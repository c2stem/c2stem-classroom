__meteor_runtime_config__ = Object.assign({
  "meteorEnv": {},
  "DDP_DEFAULT_CONNECTION_URL": "http://localhost:3000",
  "ROOT_URL": "http://localhost:3000"
}, window.__meteor_runtime_config__);

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var global, meteorEnv, Meteor;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/global.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Export a reliable global object for all Meteor code.
    global = this;

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/client_environment.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var config = __meteor_runtime_config__;
    meteorEnv = config.meteorEnv;

    /**
     * @summary The Meteor namespace
     * @namespace Meteor
     */
    Meteor = {
      /**
       * @summary Boolean variable.  True if running in production environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isProduction: meteorEnv.NODE_ENV === "production",

      /**
       * @summary Boolean variable.  True if running in development environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isDevelopment: meteorEnv.NODE_ENV !== "production",

      /**
       * @summary Boolean variable.  True if running in client environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isClient: true,

      /**
       * @summary Boolean variable.  True if running in server environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isServer: false,

      /**
       * @summary Boolean variable.  True if running in Cordova environment.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isCordova: false,

      /**
       * @summary Boolean variable. True if running in a "modern" JS
       *          environment, as determined by the `modern` package.
       * @locus Anywhere
       * @static
       * @type {Boolean}
       */
      isModern: config.isModern
    };

    if (config.gitCommitHash) {
      /**
       * @summary Hexadecimal Git commit hash, if the application is using Git
       *          for version control. Undefined otherwise.
       * @locus Anywhere
       * @static
       * @type {String}
       */
      Meteor.gitCommitHash = config.gitCommitHash;
    }

    if (config.PUBLIC_SETTINGS) {
      /**
       * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.
       * @locus Anywhere
       * @type {Object}
       */
      Meteor.settings = {
        "public": config.PUBLIC_SETTINGS
      };
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/define-package.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function PackageRegistry() {
      this._promiseInfoMap = Object.create(null);
    }

    var PRp = PackageRegistry.prototype;

    // Set global.Package[name] = pkg || {}. If additional arguments are
    // supplied, their keys will be copied into pkg if not already present.
    // This method is defined on the prototype of global.Package so that it
    // will not be included in Object.keys(Package).
    PRp._define = function definePackage(name, pkg) {
      pkg = pkg || {};

      var argc = arguments.length;
      for (var i = 2; i < argc; ++i) {
        var arg = arguments[i];
        for (var s in arg) {
          if (!(s in pkg)) {
            pkg[s] = arg[s];
          }
        }
      }

      this[name] = pkg;

      var info = this._promiseInfoMap[name];
      if (info) {
        info.resolve(pkg);
      }

      return pkg;
    };

    PRp._has = function has(name) {
      return Object.prototype.hasOwnProperty.call(this, name);
    };

    // Returns a Promise that will resolve to the exports of the named
    // package, or be rejected if the package is not installed.
    PRp._promise = function promise(name) {
      var self = this;
      var info = self._promiseInfoMap[name];

      if (!info) {
        info = self._promiseInfoMap[name] = {};
        info.promise = new Promise(function (resolve, reject) {
          info.resolve = resolve;
          if (self._has(name)) {
            resolve(self[name]);
          } else {
            Meteor.startup(function () {
              if (!self._has(name)) {
                reject(new Error("Package " + name + " not installed"));
              }
            });
          }
        });
      }

      return info.promise;
    };

    // Initialize the Package namespace used by all Meteor packages.
    global.Package = new PackageRegistry();

    if (typeof exports === "object") {
      // This code is also used by meteor/tools/isobuild/bundler.js.
      exports.PackageRegistry = PackageRegistry;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/helpers.js                                                                           //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    if (Meteor.isServer) var Future = Npm.require('fibers/future');

    if (typeof __meteor_runtime_config__ === 'object' && __meteor_runtime_config__.meteorRelease) {
      /**
       * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `"1.2.3"`). It is `undefined` if the project was built using a git checkout of Meteor.
       * @locus Anywhere
       * @type {String}
       */
      Meteor.release = __meteor_runtime_config__.meteorRelease;
    }

    // XXX find a better home for these? Ideally they would be _.get,
    // _.ensure, _.delete..

    // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or
    // a[b][c] doesn't exist.
    //
    Meteor._get = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        if (!(arguments[i] in obj)) return undefined;
        obj = obj[arguments[i]];
      }
      return obj;
    };

    // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,
    // it is created and set to {}. Either way, it is returned.
    //
    Meteor._ensure = function (obj /*, arguments */) {
      for (var i = 1; i < arguments.length; i++) {
        var key = arguments[i];
        if (!(key in obj)) obj[key] = {};
        obj = obj[key];
      }

      return obj;
    };

    // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it
    // isn't empty, then a[b] unless it isn't empty.
    //
    Meteor._delete = function (obj /*, arguments */) {
      var stack = [obj];
      var leaf = true;
      for (var i = 1; i < arguments.length - 1; i++) {
        var key = arguments[i];
        if (!(key in obj)) {
          leaf = false;
          break;
        }
        obj = obj[key];
        if (typeof obj !== "object") break;
        stack.push(obj);
      }

      for (var i = stack.length - 1; i >= 0; i--) {
        var key = arguments[i + 1];

        if (leaf) leaf = false;else for (var other in stack[i][key]) return; // not empty -- we're done

        delete stack[i][key];
      }
    };

    // wrapAsync can wrap any function that takes some number of arguments that
    // can't be undefined, followed by some optional arguments, where the callback
    // is the last optional argument.
    // e.g. fs.readFile(pathname, [callback]),
    // fs.open(pathname, flags, [mode], [callback])
    // For maximum effectiveness and least confusion, wrapAsync should be used on
    // functions where the callback is the only argument of type Function.

    /**
     * @memberOf Meteor
     * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.
     * @locus Anywhere
     * @param {Function} func A function that takes a callback as its final parameter
     * @param {Object} [context] Optional `this` object against which the original function will be invoked
     */
    Meteor.wrapAsync = function (fn, context) {
      return function () /* arguments */{
        var self = context || this;
        var newArgs = Array.prototype.slice.call(arguments);
        var callback;

        for (var i = newArgs.length - 1; i >= 0; --i) {
          var arg = newArgs[i];
          var type = typeof arg;
          if (type !== "undefined") {
            if (type === "function") {
              callback = arg;
            }
            break;
          }
        }

        if (!callback) {
          if (Meteor.isClient) {
            callback = logErr;
          } else {
            var fut = new Future();
            callback = fut.resolver();
          }
          ++i; // Insert the callback just after arg.
        }

        newArgs[i] = Meteor.bindEnvironment(callback);
        var result = fn.apply(self, newArgs);
        return fut ? fut.wait() : result;
      };
    };

    // Sets child's prototype to a new object whose prototype is parent's
    // prototype. Used as:
    //   Meteor._inherits(ClassB, ClassA).
    //   _.extend(ClassB.prototype, { ... })
    // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.
    var hasOwn = Object.prototype.hasOwnProperty;
    Meteor._inherits = function (Child, Parent) {
      // copy Parent static properties
      for (var key in Parent) {
        // make sure we only copy hasOwnProperty properties vs. prototype
        // properties
        if (hasOwn.call(Parent, key)) {
          Child[key] = Parent[key];
        }
      }

      // a middle member of prototype chain: takes the prototype from the Parent
      var Middle = function () {
        this.constructor = Child;
      };
      Middle.prototype = Parent.prototype;
      Child.prototype = new Middle();
      Child.__super__ = Parent.prototype;
      return Child;
    };

    var warnedAboutWrapAsync = false;

    /**
     * @deprecated in 0.9.3
     */
    Meteor._wrapAsync = function (fn, context) {
      if (!warnedAboutWrapAsync) {
        Meteor._debug("Meteor._wrapAsync has been renamed to Meteor.wrapAsync");
        warnedAboutWrapAsync = true;
      }
      return Meteor.wrapAsync.apply(Meteor, arguments);
    };

    function logErr(err) {
      if (err) {
        return Meteor._debug("Exception in callback of async function", err);
      }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    var global = this;

    // IE 10, Node >= 9.1

    function useSetImmediate() {
      if (!global.setImmediate) return null;else {
        var setImmediate = function (fn) {
          global.setImmediate(fn);
        };
        setImmediate.implementation = 'setImmediate';
        return setImmediate;
      }
    }

    // Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari

    function usePostMessage() {
      // The test against `importScripts` prevents this implementation
      // from being installed inside a web worker, where
      // `global.postMessage` means something completely different and
      // can't be used for this purpose.

      if (!global.postMessage || global.importScripts) {
        return null;
      }

      // Avoid synchronous post message implementations.

      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;
      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };
      global.postMessage("", "*");
      global.onmessage = oldOnMessage;

      if (!postMessageIsAsynchronous) return null;

      var funcIndex = 0;
      var funcs = {};

      // Installs an event handler on `global` for the `message` event: see
      // * https://developer.mozilla.org/en/DOM/window.postMessage
      // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

      // XXX use Random.id() here?
      var MESSAGE_PREFIX = "Meteor._setImmediate." + Math.random() + '.';

      function isStringAndStartsWith(string, putativeStart) {
        return typeof string === "string" && string.substring(0, putativeStart.length) === putativeStart;
      }

      function onGlobalMessage(event) {
        // This will catch all incoming messages (even from other
        // windows!), so we need to try reasonably hard to avoid letting
        // anyone else trick us into firing off. We test the origin is
        // still this window, and that a (randomly generated)
        // unpredictable identifying prefix is present.
        if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
          var index = event.data.substring(MESSAGE_PREFIX.length);
          try {
            if (funcs[index]) funcs[index]();
          } finally {
            delete funcs[index];
          }
        }
      }

      if (global.addEventListener) {
        global.addEventListener("message", onGlobalMessage, false);
      } else {
        global.attachEvent("onmessage", onGlobalMessage);
      }

      var setImmediate = function (fn) {
        // Make `global` post a message to itself with the handle and
        // identifying prefix, thus asynchronously invoking our
        // onGlobalMessage listener above.
        ++funcIndex;
        funcs[funcIndex] = fn;
        global.postMessage(MESSAGE_PREFIX + funcIndex, "*");
      };
      setImmediate.implementation = 'postMessage';
      return setImmediate;
    }

    function useTimeout() {
      var setImmediate = function (fn) {
        global.setTimeout(fn, 0);
      };
      setImmediate.implementation = 'setTimeout';
      return setImmediate;
    }

    Meteor._setImmediate = useSetImmediate() || usePostMessage() || useTimeout();

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/timers.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    function withoutInvocation(f) {
      if (Package.ddp) {
        var DDP = Package.ddp.DDP;
        var CurrentInvocation = DDP._CurrentMethodInvocation ||
        // For backwards compatibility, as explained in this issue:
        // https://github.com/meteor/meteor/issues/8947
        DDP._CurrentInvocation;

        var invocation = CurrentInvocation.get();
        if (invocation && invocation.isSimulation) {
          throw new Error("Can't set timers inside simulations");
        }

        return function () {
          CurrentInvocation.withValue(null, f);
        };
      } else {
        return f;
      }
    }

    function bindAndCatch(context, f) {
      return Meteor.bindEnvironment(withoutInvocation(f), context);
    }

    // Meteor.setTimeout and Meteor.setInterval callbacks scheduled
    // inside a server method are not part of the method invocation and
    // should clear out the CurrentMethodInvocation environment variable.

    /**
     * @memberOf Meteor
     * @summary Call a function in the future after waiting for a specified delay.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait before calling function
     */
    Meteor.setTimeout = function (f, duration) {
      return setTimeout(bindAndCatch("setTimeout callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Call a function repeatedly, with a time delay between calls.
     * @locus Anywhere
     * @param {Function} func The function to run
     * @param {Number} delay Number of milliseconds to wait between each function call.
     */
    Meteor.setInterval = function (f, duration) {
      return setInterval(bindAndCatch("setInterval callback", f), duration);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setInterval`
     */
    Meteor.clearInterval = function (x) {
      return clearInterval(x);
    };

    /**
     * @memberOf Meteor
     * @summary Cancel a function call scheduled by `Meteor.setTimeout`.
     * @locus Anywhere
     * @param {Object} id The handle returned by `Meteor.setTimeout`
     */
    Meteor.clearTimeout = function (x) {
      return clearTimeout(x);
    };

    // XXX consider making this guarantee ordering of defer'd callbacks, like
    // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:
    //    callSomethingThatDefersSomeWork();
    //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));

    /**
     * @memberOf Meteor
     * @summary Defer execution of a function to run asynchronously in the background (similar to `Meteor.setTimeout(func, 0)`.
     * @locus Anywhere
     * @param {Function} func The function to run
     */
    Meteor.defer = function (f) {
      Meteor._setImmediate(bindAndCatch("defer callback", f));
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/errors.js                                                                            //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Makes an error subclass which properly contains a stack trace in most
    // environments. constructor can set fields on `this` (and should probably set
    // `message`, which is what gets displayed at the top of a stack trace).
    //
    Meteor.makeErrorType = function (name, constructor) {
      var errorClass = function () /*arguments*/{
        // Ensure we get a proper stack trace in most Javascript environments
        if (Error.captureStackTrace) {
          // V8 environments (Chrome and Node.js)
          Error.captureStackTrace(this, errorClass);
        } else {
          // Borrow the .stack property of a native Error object.
          this.stack = new Error().stack;
        }
        // Safari magically works.

        constructor.apply(this, arguments);

        this.errorType = name;
      };

      Meteor._inherits(errorClass, Error);

      return errorClass;
    };

    // This should probably be in the livedata package, but we don't want
    // to require you to use the livedata package to get it. Eventually we
    // should probably rename it to DDP.Error and put it back in the
    // 'livedata' package (which we should rename to 'ddp' also.)
    //
    // Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object
    // containing 'error' and optionally 'reason' and 'details'.
    // The DDP client manually puts these into Meteor.Error objects. (We don't use
    // EJSON.addType here because the type is determined by location in the
    // protocol, not text on the wire.)

    /**
     * @summary This class represents a symbolic error thrown by a method.
     * @locus Anywhere
     * @class
     * @param {String} error A string code uniquely identifying this kind of error.
     * This string should be used by callers of the method to determine the
     * appropriate action to take, instead of attempting to parse the reason
     * or details fields. For example:
     *
     * ```
     * // on the server, pick a code unique to this error
     * // the reason field should be a useful debug message
     * throw new Meteor.Error("logged-out",
     *   "The user must be logged in to post a comment.");
     *
     * // on the client
     * Meteor.call("methodName", function (error) {
     *   // identify the error
     *   if (error && error.error === "logged-out") {
     *     // show a nice error message
     *     Session.set("errorMessage", "Please log in to post a comment.");
     *   }
     * });
     * ```
     *
     * For legacy reasons, some built-in Meteor functions such as `check` throw
     * errors with a number in this field.
     *
     * @param {String} [reason] Optional.  A short human-readable summary of the
     * error, like 'Not Found'.
     * @param {String} [details] Optional.  Additional information about the error,
     * like a textual stack trace.
     */
    Meteor.Error = Meteor.makeErrorType("Meteor.Error", function (error, reason, details) {
      var self = this;

      // Newer versions of DDP use this property to signify that an error
      // can be sent back and reconstructed on the calling client.
      self.isClientSafe = true;

      // String code uniquely identifying this kind of error.
      self.error = error;

      // Optional: A short human-readable summary of the error. Not
      // intended to be shown to end users, just developers. ("Not Found",
      // "Internal Server Error")
      self.reason = reason;

      // Optional: Additional information about the error, say for
      // debugging. It might be a (textual) stack trace if the server is
      // willing to provide one. The corresponding thing in HTTP would be
      // the body of a 404 or 500 response. (The difference is that we
      // never expect this to be shown to end users, only developers, so
      // it doesn't need to be pretty.)
      self.details = details;

      // This is what gets displayed at the top of a stack trace. Current
      // format is "[404]" (if no reason is set) or "File not found [404]"
      if (self.reason) self.message = self.reason + ' [' + self.error + ']';else self.message = '[' + self.error + ']';
    });

    // Meteor.Error is basically data and is sent over DDP, so you should be able to
    // properly EJSON-clone it. This is especially important because if a
    // Meteor.Error is thrown through a Future, the error, reason, and details
    // properties become non-enumerable so a standard Object clone won't preserve
    // them and they will be lost from DDP.
    Meteor.Error.prototype.clone = function () {
      var self = this;
      return new Meteor.Error(self.error, self.reason, self.details);
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/fiber_stubs_client.js                                                                //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This file is a partial analogue to fiber_helpers.js, which allows the client
    // to use a queue too, and also to call noYieldsAllowed.

    // The client has no ability to yield, so noYieldsAllowed is a noop.
    //
    Meteor._noYieldsAllowed = function (f) {
      return f();
    };

    // An even simpler queue of tasks than the fiber-enabled one.  This one just
    // runs all the tasks when you call runTask or flush, synchronously.
    //
    Meteor._SynchronousQueue = function () {
      var self = this;
      self._tasks = [];
      self._running = false;
      self._runTimeout = null;
    };

    var SQp = Meteor._SynchronousQueue.prototype;

    SQp.runTask = function (task) {
      var self = this;
      if (!self.safeToRunTask()) throw new Error("Could not synchronously run a task from a running task");
      self._tasks.push(task);
      var tasks = self._tasks;
      self._tasks = [];
      self._running = true;

      if (self._runTimeout) {
        // Since we're going to drain the queue, we can forget about the timeout
        // which tries to run it.  (But if one of our tasks queues something else,
        // the timeout will be correctly re-created.)
        clearTimeout(self._runTimeout);
        self._runTimeout = null;
      }

      try {
        while (tasks.length > 0) {
          var t = tasks.shift();
          try {
            t();
          } catch (e) {
            if (tasks.length === 0) {
              // this was the last task, that is, the one we're calling runTask
              // for.
              throw e;
            }
            Meteor._debug("Exception in queued task", e);
          }
        }
      } finally {
        self._running = false;
      }
    };

    SQp.queueTask = function (task) {
      var self = this;
      self._tasks.push(task);
      // Intentionally not using Meteor.setTimeout, because it doesn't like runing
      // in stubs for now.
      if (!self._runTimeout) {
        self._runTimeout = setTimeout(function () {
          return self.flush.apply(self, arguments);
        }, 0);
      }
    };

    SQp.flush = function () {
      var self = this;
      self.runTask(function () {});
    };

    SQp.drain = function () {
      var self = this;
      if (!self.safeToRunTask()) {
        return;
      }
      while (self._tasks.length > 0) {
        self.flush();
      }
    };

    SQp.safeToRunTask = function () {
      var self = this;
      return !self._running;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/startup_client.js                                                                    //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var callbackQueue = [];
    var isLoadingCompleted = false;
    var isReady = false;

    // Keeps track of how many events to wait for in addition to loading completing,
    // before we're considered ready.
    var readyHoldsCount = 0;

    var holdReady = function () {
      readyHoldsCount++;
    };

    var releaseReadyHold = function () {
      readyHoldsCount--;
      maybeReady();
    };

    var maybeReady = function () {
      if (isReady || !isLoadingCompleted || readyHoldsCount > 0) return;

      isReady = true;

      // Run startup callbacks
      while (callbackQueue.length) callbackQueue.shift()();

      if (Meteor.isCordova) {
        // Notify the WebAppLocalServer plugin that startup was completed successfully,
        // so we can roll back faulty versions if this doesn't happen
        WebAppLocalServer.startupDidComplete();
      }
    };

    var loadingCompleted = function () {
      if (!isLoadingCompleted) {
        isLoadingCompleted = true;
        maybeReady();
      }
    };

    if (Meteor.isCordova) {
      holdReady();
      document.addEventListener('deviceready', releaseReadyHold, false);
    }

    if (document.readyState === 'complete' || document.readyState === 'loaded') {
      // Loading has completed,
      // but allow other scripts the opportunity to hold ready
      window.setTimeout(loadingCompleted);
    } else {
      // Attach event listeners to wait for loading to complete
      if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', loadingCompleted, false);
        window.addEventListener('load', loadingCompleted, false);
      } else {
        // Use IE event model for < IE9
        document.attachEvent('onreadystatechange', function () {
          if (document.readyState === "complete") {
            loadingCompleted();
          }
        });
        window.attachEvent('load', loadingCompleted);
      }
    }

    /**
     * @summary Run code when a client or a server starts.
     * @locus Anywhere
     * @param {Function} func A function to run on startup.
     */
    Meteor.startup = function (callback) {
      // Fix for < IE9, see http://javascript.nwbox.com/IEContentLoaded/
      var doScroll = !document.addEventListener && document.documentElement.doScroll;

      if (!doScroll || window !== top) {
        if (isReady) callback();else callbackQueue.push(callback);
      } else {
        try {
          doScroll('left');
        } catch (error) {
          setTimeout(function () {
            Meteor.startup(callback);
          }, 50);
          return;
        };
        callback();
      }
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/debug.js                                                                             //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var suppress = 0;

    // replacement for console.log. This is a temporary API. We should
    // provide a real logging API soon (possibly just a polyfill for
    // console?)
    //
    // NOTE: this is used on the server to print the warning about
    // having autopublish enabled when you probably meant to turn it
    // off. it's not really the proper use of something called
    // _debug. the intent is for this message to go to the terminal and
    // be very visible. if you change _debug to go someplace else, etc,
    // please fix the autopublish code to do something reasonable.
    //
    Meteor._debug = function () /* arguments */{
      if (suppress) {
        suppress--;
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {
        if (arguments.length == 0) {
          // IE Companion breaks otherwise
          // IE10 PP4 requires at least one argument
          console.log('');
        } else {
          // IE doesn't have console.log.apply, it's not a real Object.
          // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
          // http://patik.com/blog/complete-cross-browser-console-log/
          if (typeof console.log.apply === "function") {
            // Most browsers

            // Chrome and Safari only hyperlink URLs to source files in first argument of
            // console.log, so try to call it with one argument if possible.
            // Approach taken here: If all arguments are strings, join them on space.
            // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991
            var allArgumentsOfTypeString = true;
            for (var i = 0; i < arguments.length; i++) if (typeof arguments[i] !== "string") allArgumentsOfTypeString = false;

            if (allArgumentsOfTypeString) console.log.apply(console, [Array.prototype.join.call(arguments, " ")]);else console.log.apply(console, arguments);
          } else if (typeof Function.prototype.bind === "function") {
            // IE9
            var log = Function.prototype.bind.call(console.log, console);
            log.apply(console, arguments);
          } else {
            // IE8
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
          }
        }
      }
    };

    // Suppress the next 'count' Meteor._debug messsages. Use this to
    // stop tests from spamming the console.
    //
    Meteor._suppress_log = function (count) {
      suppress += count;
    };

    Meteor._suppressed_log_expected = function () {
      return suppress !== 0;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/string_utils.js                                                                      //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Like Perl's quotemeta: quotes all regexp metacharacters.
    // Code taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
    Meteor._escapeRegExp = function (string) {
      return String(string).replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/test_environment.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var TEST_METADATA_STR;
    if (Meteor.isClient) {
      TEST_METADATA_STR = meteorEnv.TEST_METADATA;
    } else {
      TEST_METADATA_STR = process.env.TEST_METADATA;
    }

    var TEST_METADATA = JSON.parse(TEST_METADATA_STR || "{}");
    var testDriverPackageName = TEST_METADATA.driverPackage;

    // Note that if we are in test-packages mode neither of these will be set,
    // but we will have a test driver package
    Meteor.isTest = !!TEST_METADATA.isTest;
    Meteor.isAppTest = !!TEST_METADATA.isAppTest;
    Meteor.isPackageTest = !!testDriverPackageName && !Meteor.isTest && !Meteor.isAppTest;

    if (typeof testDriverPackageName === "string") {
      Meteor.startup(function () {
        var testDriverPackage = Package[testDriverPackageName];
        if (!testDriverPackage) {
          throw new Error("Can't find test driver package: " + testDriverPackageName);
        }

        // On the client, the test driver *must* define `runTests`
        if (Meteor.isClient) {
          if (typeof testDriverPackage.runTests !== "function") {
            throw new Error("Test driver package " + testDriverPackageName + " missing `runTests` export");
          }
          testDriverPackage.runTests();
        } else {
          // The server can optionally define `start`
          if (typeof testDriverPackage.start === "function") {
            testDriverPackage.start();
          }
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/dynamics_browser.js                                                                  //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Simple implementation of dynamic scoping, for use in browsers

    var nextSlot = 0;
    var currentValues = [];

    Meteor.EnvironmentVariable = function () {
      this.slot = nextSlot++;
    };

    var EVp = Meteor.EnvironmentVariable.prototype;

    EVp.get = function () {
      return currentValues[this.slot];
    };

    EVp.getOrNullIfOutsideFiber = function () {
      return this.get();
    };

    EVp.withValue = function (value, func) {
      var saved = currentValues[this.slot];
      try {
        currentValues[this.slot] = value;
        var ret = func();
      } finally {
        currentValues[this.slot] = saved;
      }
      return ret;
    };

    Meteor.bindEnvironment = function (func, onException, _this) {
      // needed in order to be able to create closures inside func and
      // have the closed variables not change back to their original
      // values
      var boundValues = currentValues.slice();

      if (!onException || typeof onException === 'string') {
        var description = onException || "callback of async function";
        onException = function (error) {
          Meteor._debug("Exception in " + description + ":", error);
        };
      }

      return function () /* arguments */{
        var savedValues = currentValues;
        try {
          currentValues = boundValues;
          var ret = func.apply(_this, arguments);
        } catch (e) {
          // note: callback-hook currently relies on the fact that if onException
          // throws in the browser, the wrapped call throws.
          onException(e);
        } finally {
          currentValues = savedValues;
        }
        return ret;
      };
    };

    Meteor._nodeCodeMustBeInFiber = function () {
      // no-op on browser
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                      //
    // packages/meteor/url_common.js                                                                        //
    //                                                                                                      //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**
     * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using `meteor build`.
     * @locus Anywhere
     * @param {String} [path] A path to append to the root URL. Do not include a leading "`/`".
     * @param {Object} [options]
     * @param {Boolean} options.secure Create an HTTPS URL.
     * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.
     * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: "`http://foo.example.com`"
     */
    Meteor.absoluteUrl = function (path, options) {
      // path is optional
      if (!options && typeof path === 'object') {
        options = path;
        path = undefined;
      }
      // merge options with defaults
      options = Object.assign({}, Meteor.absoluteUrl.defaultOptions, options || {});

      var url = options.rootUrl;
      if (!url) throw new Error("Must pass options.rootUrl or set ROOT_URL in the server environment");

      if (!/^http[s]?:\/\//i.test(url)) // url starts with 'http://' or 'https://'
        url = 'http://' + url; // we will later fix to https if options.secure is set

      if (!url.endsWith("/")) {
        url += "/";
      }

      if (path) {
        // join url and path with a / separator
        while (path.startsWith("/")) {
          path = path.slice(1);
        }
        url += path;
      }

      // turn http to https if secure option is set, and we're not talking
      // to localhost.
      if (options.secure && /^http:/.test(url) && // url starts with 'http:'
      !/http:\/\/localhost[:\/]/.test(url) && // doesn't match localhost
      !/http:\/\/127\.0\.0\.1[:\/]/.test(url)) // or 127.0.0.1
        url = url.replace(/^http:/, 'https:');

      if (options.replaceLocalhost) url = url.replace(/^http:\/\/localhost([:\/].*)/, 'http://127.0.0.1$1');

      return url;
    };

    // allow later packages to override default options
    var defaultOptions = Meteor.absoluteUrl.defaultOptions = {};

    // available only in a browser environment
    var location = typeof window === "object" && window.location;

    if (typeof __meteor_runtime_config__ === "object" && __meteor_runtime_config__.ROOT_URL) {
      defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;
    } else if (location && location.protocol && location.host) {
      defaultOptions.rootUrl = location.protocol + "//" + location.host;
    }

    // Make absolute URLs use HTTPS by default if the current window.location
    // uses HTTPS. Since this is just a default, it can be overridden by
    // passing { secure: false } if necessary.
    if (location && location.protocol === "https:") {
      defaultOptions.secure = true;
    }

    Meteor._relativeToSiteRootUrl = function (link) {
      if (typeof __meteor_runtime_config__ === "object" && link.substr(0, 1) === "/") link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || "") + link;
      return link;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("meteor", {
    Meteor: Meteor,
    global: global,
    meteorEnv: meteorEnv
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("meteor-base");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mobile-experience");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var makeInstaller, meteorInstall;

  ///////////////////////////////////////////////////////////////////////////////
  //                                                                           //
  // packages/modules-runtime/.npm/package/node_modules/install/install.js     //
  // This file is in bare mode and is not in its own closure.                  //
  //                                                                           //
  ///////////////////////////////////////////////////////////////////////////////
  //
  makeInstaller = function (options) {

    options = options || {};

    // These file extensions will be appended to required module identifiers
    // if they do not exactly match an installed module.
    var defaultExtensions = options.extensions || [".js", ".json"];

    // If defined, the options.fallback function will be called when no
    // installed module is found for a required module identifier. Often
    // options.fallback will be implemented in terms of the native Node
    // require function, which has the ability to load binary modules.
    var fallback = options.fallback;

    // List of fields to look for in package.json files to determine the
    // main entry module of the package. The first field listed here whose
    // value is a string will be used to resolve the entry module.
    var mainFields = options.mainFields || (
    // If options.mainFields is absent and options.browser is truthy,
    // package resolution will prefer the "browser" field of package.json
    // files to the "main" field. Note that this only supports
    // string-valued "browser" fields for now, though in the future it
    // might make sense to support the object version, a la browserify.
    options.browser ? ["browser", "main"] : ["main"]);

    var hasOwn = {}.hasOwnProperty;
    function strictHasOwn(obj, key) {
      return isObject(obj) && isString(key) && hasOwn.call(obj, key);
    }

    // Cache for looking up File objects given absolute module identifiers.
    // Invariants:
    //   filesByModuleId[module.id] === fileAppendId(root, module.id)
    //   filesByModuleId[module.id].module === module
    var filesByModuleId = {};

    // The file object representing the root directory of the installed
    // module tree.
    var root = new File("/", new File("/.."));
    var rootRequire = makeRequire(root);

    // Merges the given tree of directories and module factory functions
    // into the tree of installed modules and returns a require function
    // that behaves as if called from a module in the root directory.
    function install(tree, options) {
      if (isObject(tree)) {
        fileMergeContents(root, tree, options);
      }
      return rootRequire;
    }

    // Replace this function to enable Module.prototype.prefetch.
    install.fetch = function (ids) {
      throw new Error("fetch not implemented");
    };

    // This constructor will be used to instantiate the module objects
    // passed to module factory functions (i.e. the third argument after
    // require and exports), and is exposed as install.Module in case the
    // caller of makeInstaller wishes to modify Module.prototype.
    function Module(id) {
      this.id = id;

      // The Node implementation of module.children unfortunately includes
      // only those child modules that were imported for the first time by
      // this parent module (i.e., child.parent === this).
      this.children = [];

      // This object is an install.js extension that includes all child
      // modules imported by this module, even if this module is not the
      // first to import them.
      this.childrenById = {};
    }

    // Used to keep module.prefetch promise resolutions well-ordered.
    var lastPrefetchPromise;

    // May be shared by multiple sequential calls to module.prefetch.
    // Initialized to {} only when necessary.
    var missing;

    Module.prototype.prefetch = function (id) {
      var _module = this;
      var parentFile = getOwn(filesByModuleId, _module.id);

      lastPrefetchPromise = lastPrefetchPromise || Promise.resolve();
      var previousPromise = lastPrefetchPromise;

      function walk(_module2) {
        var file = getOwn(filesByModuleId, _module2.id);
        if (fileIsDynamic(file) && !file.pending) {
          file.pending = true;
          missing = missing || {};

          // These are the data that will be exposed to the install.fetch
          // callback, so it's worth documenting each item with a comment.
          missing[_module2.id] = {
            // The CommonJS module object that will be exposed to this
            // dynamic module when it is evaluated. Note that install.fetch
            // could decide to populate module.exports directly, instead of
            // fetching anything. In that case, install.fetch should omit
            // this module from the tree that it produces.
            module: file.module,
            // List of module identifier strings imported by this module.
            // Note that the missing object already contains all available
            // dependencies (including transitive dependencies), so
            // install.fetch should not need to traverse these dependencies
            // in most cases; however, they may be useful for other reasons.
            // Though the strings are unique, note that two different
            // strings could resolve to the same module.
            deps: Object.keys(file.deps),
            // The options (if any) that were passed as the second argument
            // to the install(tree, options) function when this stub was
            // first registered. Typically contains options.extensions, but
            // could contain any information appropriate for the entire tree
            // as originally installed. These options will be automatically
            // inherited by the newly fetched modules, so install.fetch
            // should not need to modify them.
            options: file.options,
            // Any stub data included in the array notation from the
            // original entry for this dynamic module. Typically contains
            // "main" and/or "browser" fields for package.json files, and is
            // otherwise undefined.
            stub: file.stub
          };

          each(file.deps, function (parentId, id) {
            fileResolve(file, id);
          });

          each(_module2.childrenById, walk);
        }
      }

      return lastPrefetchPromise = new Promise(function (resolve) {
        var absChildId = _module.resolve(id);
        each(_module.childrenById, walk);
        resolve(absChildId);
      }).then(function (absChildId) {
        // Grab the current missing object and fetch its contents.
        var toBeFetched = missing;
        missing = null;

        function clearPending() {
          if (toBeFetched) {
            Object.keys(toBeFetched).forEach(function (id) {
              getOwn(filesByModuleId, id).pending = false;
            });
          }
        }

        return new Promise(function (resolve) {
          // The install.fetch function takes an object mapping missing
          // dynamic module identifiers to options objects, and should
          // return a Promise that resolves to a module tree that can be
          // installed. As an optimization, if there were no missing dynamic
          // modules, then we can skip calling install.fetch entirely.
          resolve(toBeFetched && install.fetch(toBeFetched));
        }).then(function (tree) {
          function both() {
            install(tree);
            clearPending();
            return absChildId;
          }

          // Although we want multiple install.fetch calls to run in
          // parallel, it is important that the promises returned by
          // module.prefetch are resolved in the same order as the original
          // calls to module.prefetch, because previous fetches may include
          // modules assumed to exist by more recent module.prefetch calls.
          // Whether previousPromise was resolved or rejected, carry on with
          // the installation regardless.
          return previousPromise.then(both, both);
        }, function (error) {
          // Fixes https://github.com/meteor/meteor/issues/10182.
          clearPending();
          throw error;
        });
      });
    };

    install.Module = Module;

    function getOwn(obj, key) {
      return strictHasOwn(obj, key) && obj[key];
    }

    function isObject(value) {
      return value !== null && typeof value === "object";
    }

    function isFunction(value) {
      return typeof value === "function";
    }

    function isString(value) {
      return typeof value === "string";
    }

    function makeMissingError(id) {
      return new Error("Cannot find module '" + id + "'");
    }

    Module.prototype.resolve = function (id) {
      var file = fileResolve(filesByModuleId[this.id], id);
      if (file) return file.module.id;
      var error = makeMissingError(id);
      if (fallback && isFunction(fallback.resolve)) {
        return fallback.resolve(id, this.id, error);
      }
      throw error;
    };

    Module.prototype.require = function require(id) {
      var result = fileResolve(filesByModuleId[this.id], id);
      if (result) {
        return fileEvaluate(result, this);
      }

      var error = makeMissingError(id);

      if (isFunction(fallback)) {
        return fallback(id, // The missing module identifier.
        this.id, // ID of the parent module.
        error // The error we would have thrown.
        );
      }

      throw error;
    };

    function makeRequire(file) {
      var _module3 = file.module;

      function _require(id) {
        return _module3.require(id);
      }

      _require.extensions = fileGetExtensions(file).slice(0);

      _require.resolve = function resolve(id) {
        return _module3.resolve(id);
      };

      return _require;
    }

    // File objects represent either directories or modules that have been
    // installed. When a `File` respresents a directory, its `.contents`
    // property is an object containing the names of the files (or
    // directories) that it contains. When a `File` represents a module, its
    // `.contents` property is a function that can be invoked with the
    // appropriate `(require, exports, module)` arguments to evaluate the
    // module. If the `.contents` property is a string, that string will be
    // resolved as a module identifier, and the exports of the resulting
    // module will provide the exports of the original file. The `.parent`
    // property of a File is either a directory `File` or `null`. Note that
    // a child may claim another `File` as its parent even if the parent
    // does not have an entry for that child in its `.contents` object.
    // This is important for implementing anonymous files, and preventing
    // child modules from using `../relative/identifier` syntax to examine
    // unrelated modules.
    function File(moduleId, parent) {
      var file = this;

      // Link to the parent file.
      file.parent = parent = parent || null;

      // The module object for this File, which will eventually boast an
      // .exports property when/if the file is evaluated.
      file.module = new Module(moduleId);
      filesByModuleId[moduleId] = file;

      // The .contents of the file can be either (1) an object, if the file
      // represents a directory containing other files; (2) a factory
      // function, if the file represents a module that can be imported; (3)
      // a string, if the file is an alias for another file; or (4) null, if
      // the file's contents are not (yet) available.
      file.contents = null;

      // Set of module identifiers imported by this module. Note that this
      // set is not necessarily complete, so don't rely on it unless you
      // know what you're doing.
      file.deps = {};
    }

    function fileEvaluate(file, parentModule) {
      var _module4 = file.module;
      if (!strictHasOwn(_module4, "exports")) {
        var contents = file.contents;
        if (!contents) {
          // If this file was installed with array notation, and the array
          // contained one or more objects but no functions, then the combined
          // properties of the objects are treated as a temporary stub for
          // file.module.exports. This is particularly important for partial
          // package.json modules, so that the resolution logic can know the
          // value of the "main" and/or "browser" fields, at least, even if
          // the rest of the package.json file is not (yet) available.
          if (file.stub) {
            return file.stub;
          }

          throw makeMissingError(_module4.id);
        }

        if (parentModule) {
          _module4.parent = parentModule;
          var children = parentModule.children;
          if (Array.isArray(children)) {
            children.push(_module4);
          }
        }

        contents(makeRequire(file),
        // If the file had a .stub, reuse the same object for exports.
        _module4.exports = file.stub || {}, _module4, file.module.id, file.parent.module.id);

        _module4.loaded = true;
      }

      // The module.runModuleSetters method will be deprecated in favor of
      // just module.runSetters: https://github.com/benjamn/reify/pull/160
      var runSetters = _module4.runSetters || _module4.runModuleSetters;
      if (isFunction(runSetters)) {
        runSetters.call(_module4);
      }

      return _module4.exports;
    }

    function fileIsDirectory(file) {
      return file && isObject(file.contents);
    }

    function fileIsDynamic(file) {
      return file && file.contents === null;
    }

    function fileMergeContents(file, contents, options) {
      if (Array.isArray(contents)) {
        contents.forEach(function (item) {
          if (isString(item)) {
            file.deps[item] = file.module.id;
          } else if (isFunction(item)) {
            contents = item;
          } else if (isObject(item)) {
            file.stub = file.stub || {};
            each(item, function (value, key) {
              file.stub[key] = value;
            });
          }
        });

        if (!isFunction(contents)) {
          // If the array did not contain a function, merge nothing.
          contents = null;
        }
      } else if (!isFunction(contents) && !isString(contents) && !isObject(contents)) {
        // If contents is neither an array nor a function nor a string nor
        // an object, just give up and merge nothing.
        contents = null;
      }

      if (contents) {
        file.contents = file.contents || (isObject(contents) ? {} : contents);
        if (isObject(contents) && fileIsDirectory(file)) {
          each(contents, function (value, key) {
            if (key === "..") {
              child = file.parent;
            } else {
              var child = getOwn(file.contents, key);

              if (!child) {
                child = file.contents[key] = new File(file.module.id.replace(/\/*$/, "/") + key, file);

                child.options = options;
              }
            }

            fileMergeContents(child, value, options);
          });
        }
      }
    }

    function each(obj, callback, context) {
      Object.keys(obj).forEach(function (key) {
        callback.call(this, obj[key], key);
      }, context);
    }

    function fileGetExtensions(file) {
      return file.options && file.options.extensions || defaultExtensions;
    }

    function fileAppendIdPart(file, part, extensions) {
      // Always append relative to a directory.
      while (file && !fileIsDirectory(file)) {
        file = file.parent;
      }

      if (!file || !part || part === ".") {
        return file;
      }

      if (part === "..") {
        return file.parent;
      }

      var exactChild = getOwn(file.contents, part);

      // Only consider multiple file extensions if this part is the last
      // part of a module identifier and not equal to `.` or `..`, and there
      // was no exact match or the exact match was a directory.
      if (extensions && (!exactChild || fileIsDirectory(exactChild))) {
        for (var e = 0; e < extensions.length; ++e) {
          var child = getOwn(file.contents, part + extensions[e]);
          if (child && !fileIsDirectory(child)) {
            return child;
          }
        }
      }

      return exactChild;
    }

    function fileAppendId(file, id, extensions) {
      var parts = id.split("/");

      // Use `Array.prototype.every` to terminate iteration early if
      // `fileAppendIdPart` returns a falsy value.
      parts.every(function (part, i) {
        return file = i < parts.length - 1 ? fileAppendIdPart(file, part) : fileAppendIdPart(file, part, extensions);
      });

      return file;
    }

    function recordChild(parentModule, childFile) {
      var childModule = childFile && childFile.module;
      if (parentModule && childModule) {
        parentModule.childrenById[childModule.id] = childModule;
      }
    }

    function fileResolve(file, id, parentModule, seenDirFiles) {
      var parentModule = parentModule || file.module;
      var extensions = fileGetExtensions(file);

      file =
      // Absolute module identifiers (i.e. those that begin with a `/`
      // character) are interpreted relative to the root directory, which
      // is a slight deviation from Node, which has access to the entire
      // file system.
      id.charAt(0) === "/" ? fileAppendId(root, id, extensions) :
      // Relative module identifiers are interpreted relative to the
      // current file, naturally.
      id.charAt(0) === "." ? fileAppendId(file, id, extensions) :
      // Top-level module identifiers are interpreted as referring to
      // packages in `node_modules` directories.
      nodeModulesLookup(file, id, extensions);

      // If the identifier resolves to a directory, we use the same logic as
      // Node to find an `index.js` or `package.json` file to evaluate.
      while (fileIsDirectory(file)) {
        seenDirFiles = seenDirFiles || [];

        // If the "main" field of a `package.json` file resolves to a
        // directory we've already considered, then we should not attempt to
        // read the same `package.json` file again. Using an array as a set
        // is acceptable here because the number of directories to consider
        // is rarely greater than 1 or 2. Also, using indexOf allows us to
        // store File objects instead of strings.
        if (seenDirFiles.indexOf(file) < 0) {
          seenDirFiles.push(file);

          var pkgJsonFile = fileAppendIdPart(file, "package.json"),
              main;
          var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);
          if (pkg && mainFields.some(function (name) {
            return isString(main = pkg[name]);
          })) {
            // The "main" field of package.json does not have to begin with
            // ./ to be considered relative, so first we try simply
            // appending it to the directory path before falling back to a
            // full fileResolve, which might return a package from a
            // node_modules directory.
            var mainFile = fileAppendId(file, main, extensions) || fileResolve(file, main, parentModule, seenDirFiles);

            if (mainFile) {
              file = mainFile;
              recordChild(parentModule, pkgJsonFile);
              // The fileAppendId call above may have returned a directory,
              // so continue the loop to make sure we resolve it to a
              // non-directory file.
              continue;
            }
          }
        }

        // If we didn't find a `package.json` file, or it didn't have a
        // resolvable `.main` property, the only possibility left to
        // consider is that this directory contains an `index.js` module.
        // This assignment almost always terminates the while loop, because
        // there's very little chance `fileIsDirectory(file)` will be true
        // for `fileAppendIdPart(file, "index", extensions)`. However, in
        // principle it is remotely possible that a file called `index.js`
        // could be a directory instead of a file.
        file = fileAppendIdPart(file, "index", extensions);
      }

      if (file && isString(file.contents)) {
        file = fileResolve(file, file.contents, parentModule, seenDirFiles);
      }

      recordChild(parentModule, file);

      return file;
    };

    function nodeModulesLookup(file, id, extensions) {
      for (var resolved; file && !resolved; file = file.parent) {
        resolved = fileIsDirectory(file) && fileAppendId(file, "node_modules/" + id, extensions);
      }
      return resolved;
    }

    return install;
  };

  if (typeof exports === "object") {
    exports.makeInstaller = makeInstaller;
  }

  ///////////////////////////////////////////////////////////////////////////////


  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/client.js                                        //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    meteorInstall = makeInstaller({
      // On the client, make package resolution prefer the "browser" field of
      // package.json files to the "main" field.
      browser: true,

      fallback: function (id, parentId, error) {
        if (id && id.startsWith('meteor/')) {
          var packageName = id.split('/', 2)[1];
          throw new Error('Cannot find package "' + packageName + '". ' + 'Try "meteor add ' + packageName + '".');
        }

        throw error;
      }
    });

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////
    //                                                                           //
    // packages/modules-runtime/profile.js                                       //
    //                                                                           //
    ///////////////////////////////////////////////////////////////////////////////
    //
    if (typeof Profile === "function" && process.env.METEOR_PROFILE) {
      var Mp = meteorInstall.Module.prototype;
      Mp.require = Profile(function (id) {
        return "require(" + JSON.stringify(id) + ")";
      }, Mp.require);
    }

    ///////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("modules-runtime", {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package['modules-runtime'].meteorInstall;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "modules": { "client.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/client.js                                                                  //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require("./install-packages.js");
            _require("./stubs.js");
            _require("./process.js");
            _require("./reify.js");

            _exports.addStyles = _require("./css").addStyles;

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "css.js": function (_require3, _exports3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/css.js                                                                     //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var doc = document;
            var head = doc.getElementsByTagName("head").item(0);

            _exports3.addStyles = function (css) {
              var style = doc.createElement("style");

              style.setAttribute("type", "text/css");

              // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx
              var internetExplorerSheetObject = style.sheet || // Edge/IE11.
              style.styleSheet; // Older IEs.

              if (internetExplorerSheetObject) {
                internetExplorerSheetObject.cssText = css;
              } else {
                style.appendChild(doc.createTextNode(css));
              }

              return head.appendChild(style);
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "install-packages.js": function (_require4, _exports4, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/install-packages.js                                                        //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            function install(name, mainModule) {
              var meteorDir = {};

              // Given a package name <name>, install a stub module in the
              // /node_modules/meteor directory called <name>.js, so that
              // require.resolve("meteor/<name>") will always return
              // /node_modules/meteor/<name>.js instead of something like
              // /node_modules/meteor/<name>/index.js, in the rare but possible event
              // that the package contains a file called index.js (#6590).

              if (typeof mainModule === "string") {
                // Set up an alias from /node_modules/meteor/<package>.js to the main
                // module, e.g. meteor/<package>/index.js.
                meteorDir[name + ".js"] = mainModule;
              } else {
                // back compat with old Meteor packages
                meteorDir[name + ".js"] = function (r, e, _module2) {
                  _module2.exports = Package[name];
                };
              }

              meteorInstall({
                node_modules: {
                  meteor: meteorDir
                }
              });
            }

            // This file will be modified during computeJsOutputFilesMap to include
            // install(<name>) calls for every Meteor package.

            install("meteor");
            install("meteor-base");
            install("mobile-experience");
            install("modules-runtime");
            install("modules", "meteor/modules/client.js");
            install("modern-browsers");
            install("babel-compiler");
            install("ecmascript");
            install("ecmascript-runtime");
            install("babel-runtime", "meteor/babel-runtime/babel-runtime.js");
            install("promise", "meteor/promise/client.js");
            install("fetch", "meteor/fetch/modern.js");
            install("dynamic-import", "meteor/dynamic-import/client.js");
            install("es5-shim");
            install("ecmascript-runtime-client", "meteor/ecmascript-runtime-client/modern.js");
            install("base64", "meteor/base64/base64.js");
            install("ejson", "meteor/ejson/ejson.js");
            install("diff-sequence", "meteor/diff-sequence/diff.js");
            install("geojson-utils", "meteor/geojson-utils/main.js");
            install("id-map", "meteor/id-map/id-map.js");
            install("random");
            install("mongo-id", "meteor/mongo-id/id.js");
            install("ordered-dict", "meteor/ordered-dict/ordered_dict.js");
            install("tracker");
            install("minimongo", "meteor/minimongo/minimongo_client.js");
            install("check", "meteor/check/match.js");
            install("retry", "meteor/retry/retry.js");
            install("callback-hook", "meteor/callback-hook/hook.js");
            install("ddp-common");
            install("reload", "meteor/reload/reload.js");
            install("socket-stream-client", "meteor/socket-stream-client/browser.js");
            install("ddp-client", "meteor/ddp-client/client/client.js");
            install("ddp");
            install("ddp-server");
            install("allow-deny");
            install("mongo-dev-server");
            install("insecure");
            install("mongo");
            install("blaze-html-templates");
            install("reactive-var");
            install("standard-minifier-css");
            install("standard-minifier-js");
            install("shell-server");
            install("autopublish");
            install("barbatus:typescript-compiler");
            install("barbatus:typescript");
            install("ddp-rate-limiter");
            install("localstorage");
            install("jquery", "meteor/jquery/main.js");
            install("underscore");
            install("observe-sequence");
            install("deps");
            install("htmljs");
            install("blaze");
            install("accounts-base", "meteor/accounts-base/client_main.js");
            install("webapp", "meteor/webapp/webapp_client.js");
            install("livedata");
            install("hot-code-push");
            install("spacebars");
            install("templating-compiler");
            install("templating-runtime");
            install("templating");
            install("launch-screen");
            install("ui");
            install("barbatus:typescript-runtime");
            install("autoupdate", "meteor/autoupdate/autoupdate_client.js");
            install("service-configuration");

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "process.js": function (_require5, _exports5, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/process.js                                                                 //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            if (!global.process) {
              try {
                // The application can run `npm install process` to provide its own
                // process stub; otherwise this module will provide a partial stub.
                global.process = _require5("process");
              } catch (missing) {
                global.process = {};
              }
            }

            var proc = global.process;

            if (Meteor.isServer) {
              // Make require("process") work on the server in all versions of Node.
              meteorInstall({
                node_modules: {
                  "process.js": function (r, e, _module4) {
                    _module4.exports = proc;
                  }
                }
              });
            } else {
              proc.platform = "browser";
              proc.nextTick = proc.nextTick || Meteor._setImmediate;
            }

            if (typeof proc.env !== "object") {
              proc.env = {};
            }

            var hasOwn = Object.prototype.hasOwnProperty;
            for (var key in meteorEnv) {
              if (hasOwn.call(meteorEnv, key)) {
                proc.env[key] = meteorEnv[key];
              }
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "reify.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/reify.js                                                                   //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require6("reify/lib/runtime").enable(_module5.constructor.prototype);

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stubs.js": function (_require7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // packages/modules/stubs.js                                                                   //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var haveStubs = false;
            try {
              _require7.resolve("meteor-node-stubs");
              haveStubs = true;
            } catch (noStubs) {}

            if (haveStubs) {
              // When meteor-node-stubs is installed in the application's root
              // node_modules directory, requiring it here installs aliases for stubs
              // for all Node built-in modules, such as fs, util, and http.
              _require7("meteor-node-stubs");
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "reify": { "lib": { "runtime": { "index.js": function (_require8, _exports7, _module6) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require8("./utils.js");
                    var Entry = _require8("./entry.js");

                    // The exports.enable method can be used to enable the Reify runtime for
                    // specific module objects, or for Module.prototype (where implemented),
                    // to make the runtime available throughout the entire module system.
                    _exports7.enable = function (mod) {
                      if (mod.link !== moduleLink) {
                        mod.link = moduleLink;
                        mod.watch = moduleWatch;
                        mod["export"] = moduleExport;
                        mod.exportDefault = moduleExportDefault;
                        mod.exportAs = moduleExportAs;
                        mod.runSetters = runSetters;

                        // Legacy shorthand for mod.exportAs("*").
                        mod.makeNsSetter = moduleMakeNsSetter;

                        return true;
                      }

                      return false;
                    };

                    // Shorthand for module.watch(require(id), setters) that accepts just a
                    // string module identifier `id` rather than the exports object for the
                    // required module. In the future, this API will replace module.watch, and
                    // will allow for creating Entry objects before module evaluation, which
                    // will solve some problems with import cycles and hoisted declarations.
                    function moduleLink(id, setters, key) {
                      return moduleWatch.call(this, this.require(id), setters, key);
                    }

                    // If key is provided, it will be used to identify the given setters so
                    // that they can be replaced if module.watch is called again with the same
                    // key. This avoids potential memory leaks from import declarations inside
                    // loops. The compiler generates these keys automatically (and
                    // deterministically) when compiling nested import declarations.
                    function moduleWatch(exported, setters, key) {
                      utils.setESModule(this.exports);
                      Entry.getOrCreate(this.exports, this);

                      if (utils.isObject(setters)) {
                        Entry.getOrCreate(exported).addSetters(this, setters, key);
                      }
                    }

                    // Register getter functions for local variables in the scope of an export
                    // statement. Pass true as the second argument to indicate that the getter
                    // functions always return the same values.
                    function moduleExport(getters, constant) {
                      utils.setESModule(this.exports);
                      var entry = Entry.getOrCreate(this.exports, this);
                      entry.addGetters(getters, constant);
                      if (this.loaded) {
                        // If the module has already been evaluated, then we need to trigger
                        // another round of entry.runSetters calls, which begins by calling
                        // entry.runModuleGetters(module).
                        entry.runSetters();
                      }
                    }

                    // Register a getter function that always returns the given value.
                    function moduleExportDefault(value) {
                      return this["export"]({
                        "default": function () {
                          return value;
                        }
                      }, true);
                    }

                    // Returns a function suitable for passing as a setter callback to
                    // module.watch or module.link. If name is an identifier, calling the
                    // function will set the export of that name to the given value. If the
                    // name is "*", all properties of the value object will be exported by
                    // name, except for "default" (use "*+" instead of "*" to include it).
                    // Discussion of why the "default" property is skipped:
                    // https://github.com/tc39/ecma262/issues/948
                    function moduleExportAs(name) {
                      var entry = this;
                      var includeDefault = name === "*+";
                      return function (value) {
                        if (name === "*" || name === "*+") {
                          Object.keys(value).forEach(function (key) {
                            if (includeDefault || key !== "default") {
                              utils.copyKey(key, entry.exports, value);
                            }
                          });
                        } else {
                          entry.exports[name] = value;
                        }
                      };
                    }

                    // Platform-specific code should find a way to call this method whenever
                    // the module system is about to return module.exports from require. This
                    // might happen more than once per module, in case of dependency cycles,
                    // so we want Module.prototype.runSetters to run each time.
                    function runSetters(valueToPassThrough) {
                      var entry = Entry.get(this.exports);
                      if (entry !== null) {
                        entry.runSetters();
                      }

                      if (this.loaded) {
                        // If this module has finished loading, then we must create an Entry
                        // object here, so that we can add this module to entry.ownerModules
                        // by passing it as the second argument to Entry.getOrCreate.
                        Entry.getOrCreate(this.exports, this);
                      }

                      // Assignments to exported local variables get wrapped with calls to
                      // module.runSetters, so module.runSetters returns the
                      // valueToPassThrough parameter to allow the value of the original
                      // expression to pass through. For example,
                      //
                      //   export var a = 1;
                      //   console.log(a += 3);
                      //
                      // becomes
                      //
                      //   module.export("a", () => a);
                      //   var a = 1;
                      //   console.log(module.runSetters(a += 3));
                      //
                      // This ensures module.runSetters runs immediately after the assignment,
                      // and does not interfere with the larger computation.
                      return valueToPassThrough;
                    }

                    // Legacy helper that returns a function that takes a namespace object and
                    // copies the properties of the namespace to module.exports, excluding any
                    // "default" property (unless includeDefault is true), which is useful for
                    // implementing `export * from "module"`.
                    //
                    // Instead of using this helper like so:
                    //
                    //   module.link(id, { "*": module.makeNsSetter() });
                    //
                    // non-legacy code should simply use a string-valued setter:
                    //
                    //   module.link(id, { "*": "*" });
                    //
                    // or, to include the "default" property:
                    //
                    //   module.link(id, { "*": "*+" });
                    //
                    // This helper may be removed in a future version of Reify.
                    function moduleMakeNsSetter(includeDefault) {
                      return this.exportAs(includeDefault ? "*+" : "*");
                    }

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "utils.js": function (_require9, _exports8, _module7) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var useSetPrototypeOf = typeof Object.setPrototypeOf === "function";
                    var useSymbol = typeof Symbol === "function";

                    var esStrKey = "__esModule";
                    var esSymKey = useSymbol ? Symbol.for(esStrKey) : null;
                    var useToStringTag = useSymbol && typeof Symbol.toStringTag === "symbol";
                    var useGetOwnPropDesc = typeof Object.getOwnPropertyDescriptor === "function";
                    var hasOwn = Object.prototype.hasOwnProperty;

                    function copyKey(key, target, source) {
                      if (useGetOwnPropDesc) {
                        var desc = Object.getOwnPropertyDescriptor(source, key);
                        desc.configurable = true; // Allow redefinition.
                        Object.defineProperty(target, key, desc);
                      } else {
                        target[key] = source[key];
                      }
                    }

                    _exports8.copyKey = copyKey;

                    // Returns obj[key] unless that property is defined by a getter function,
                    // in which case the getter function is returned.
                    _exports8.valueOrGetter = function (obj, key) {
                      if (useGetOwnPropDesc && hasOwn.call(obj, key)) {
                        var desc = Object.getOwnPropertyDescriptor(obj, key);
                        if (typeof desc.get === "function") {
                          return desc.get;
                        }
                      }

                      return obj[key];
                    };

                    function getESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol && hasOwn.call(exported, esSymKey)) {
                          return !!exported[esSymKey];
                        }

                        if (hasOwn.call(exported, esStrKey)) {
                          return !!exported[esStrKey];
                        }
                      }

                      return false;
                    }

                    _exports8.getESModule = getESModule;

                    function setESModule(exported) {
                      if (isObjectLike(exported)) {
                        if (useSymbol) {
                          exported[esSymKey] = true;
                        } else if (!exported[esStrKey]) {
                          // Other module runtime systems may set exported.__esModule such
                          // that it can't be redefined, so we call Object.defineProperty only
                          // when exported.__esModule is not already true.
                          Object.defineProperty(exported, esStrKey, {
                            configurable: true,
                            enumerable: false,
                            value: true,
                            writable: false
                          });
                        }
                      }
                    }

                    _exports8.setESModule = setESModule;

                    function isObject(value) {
                      return typeof value === "object" && value !== null;
                    }

                    _exports8.isObject = isObject;

                    function isObjectLike(value) {
                      var type = typeof value;
                      return type === "function" || type === "object" && value !== null;
                    }

                    _exports8.isObjectLike = isObjectLike;

                    function createNamespace() {
                      var namespace = Object.create(null);

                      if (useToStringTag) {
                        Object.defineProperty(namespace, Symbol.toStringTag, {
                          value: "Module",
                          configurable: false,
                          enumerable: false,
                          writable: false
                        });
                      }

                      setESModule(namespace);

                      return namespace;
                    }

                    _exports8.createNamespace = createNamespace;

                    function setPrototypeOf(object, proto) {
                      if (useSetPrototypeOf) {
                        Object.setPrototypeOf(object, proto);
                      } else {
                        object.__proto__ = proto;
                      }
                      return object;
                    }

                    _exports8.setPrototypeOf = setPrototypeOf;

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  }, "entry.js": function (_require10, _exports9, _module8) {

                    // This module should be compatible with PhantomJS v1, just like the other files
                    // in reify/lib/runtime. Node 4+ features like const/let and arrow functions are
                    // not acceptable here, and importing any npm packages should be contemplated
                    // with extreme skepticism.

                    var utils = _require10("./utils.js");

                    var GETTER_ERROR = {};
                    var NAN = {};
                    var UNDEFINED = {};
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var keySalt = 0;

                    function Entry(exported) {
                      // The module.exports of the module this Entry is managing.
                      this.exports = exported;
                      // Getters for local variables exported from the managed module.
                      this.getters = Object.create(null);
                      // Setters for assigning to local variables in parent modules.
                      this.setters = Object.create(null);
                      // The normalized namespace object that importers receive when they use
                      // `import * as namespace from "..."` syntax.
                      this.namespace = utils.createNamespace();
                    }

                    var Ep = utils.setPrototypeOf(Entry.prototype, null);

                    var weakEntryMap = typeof WeakMap === "function" ? new WeakMap() : new function FakeWeakMap() {
                      // A barely functional WeakMap polyfill, just in case. This
                      // implementation needs to be logically correct only in the specific
                      // ways that the Entry class uses it. It isn't even "weak" in the
                      // garbage-collection sense of the word, but that's fine.
                      var keys = [];
                      var values = [];

                      this.get = function (obj) {
                        var index = keys.indexOf(obj);
                        if (index >= 0) {
                          return values[index];
                        }
                      };

                      this.set = function (obj, value) {
                        var index = keys.indexOf(obj);
                        if (index >= 0) {
                          values[index] = value;
                        } else {
                          keys.push(obj);
                          values.push(value);
                        }
                      };
                    }();

                    Entry.get = function (exported) {
                      if (utils.isObjectLike(exported)) {
                        var entry = weakEntryMap.get(exported);
                        if (entry !== void 0) {
                          return entry;
                        }
                      }
                      return null;
                    };

                    Entry.getOrCreate = function (exported, mod) {
                      if (!utils.isObjectLike(exported)) {
                        // In case the child module modified module.exports, create a
                        // temporary Entry object so that we can call the entry.addSetters
                        // method once, which will trigger entry.runSetters(names).
                        return new Entry(exported);
                      }

                      var entry = weakEntryMap.get(exported);
                      if (entry !== void 0) {
                        return entry;
                      }

                      var entry = new Entry(exported);
                      weakEntryMap.set(exported, entry);
                      return entry;
                    };

                    function safeKeys(obj) {
                      var keys = Object.keys(obj);
                      var esModuleIndex = keys.indexOf("__esModule");
                      if (esModuleIndex >= 0) {
                        keys.splice(esModuleIndex, 1);
                      }
                      return keys;
                    }

                    Ep.addGetters = function (getters, constant) {
                      var names = safeKeys(getters);
                      var nameCount = names.length;
                      constant = !!constant;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var getter = getters[name];

                        if (typeof getter === "function" &&
                        // Should this throw if this.getters[name] exists?
                        !(name in this.getters)) {
                          this.getters[name] = getter;
                          getter.constant = constant;
                          getter.runCount = 0;
                        }
                      }
                    };

                    Ep.addSetters = function (parent, setters, key) {
                      var names = safeKeys(setters);
                      var nameCount = names.length;

                      if (!nameCount) {
                        return;
                      }

                      // If no key is provided, make a unique key. Otherwise, make sure the key is
                      // distinct from keys provided by other parent modules.
                      key = key === void 0 ? makeUniqueKey() : parent.id + ":" + key;

                      var entry = this;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var setter = normalizeSetterValue(parent, setters[name]);

                        if (typeof setter === "function") {
                          setter.parent = parent;
                          if (!(name in entry.setters)) {
                            entry.setters[name] = Object.create(null);
                          }
                          entry.setters[name][key] = setter;
                        }
                      }

                      entry.runSetters(names);
                    };

                    function normalizeSetterValue(_module9, setter) {
                      if (typeof setter === "function") {
                        return setter;
                      }

                      if (typeof setter === "string") {
                        // If the value of the setter property is a string, the setter will
                        // re-export the imported value using that string as the name of the
                        // exported value. If the string is "*", all properties of the value
                        // object will be re-exported as individual exports, except for the
                        // "default" property (use "*+" instead of "*" to include it).
                        return _module9.exportAs(setter);
                      }

                      if (Array.isArray(setter)) {
                        switch (setter.length) {
                          case 0:
                            return null;
                          case 1:
                            return normalizeSetterValue(_module9, setter[0]);
                          default:
                            var setterFns = setter.map(function (elem) {
                              return normalizeSetterValue(_module9, elem);
                            });

                            // Return a combined function that calls all of the nested setter
                            // functions with the same value.
                            return function (value) {
                              setterFns.forEach(function (fn) {
                                fn(value);
                              });
                            };
                        }
                      }

                      return null;
                    }

                    Ep.runGetters = function (names) {
                      // Before running getters, copy anything added to the exports object
                      // over to the namespace. Values returned by getters take precedence
                      // over these values, but we don't want to miss anything.
                      syncExportsToNamespace(this, names);

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(this.getters);
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];
                        var value = runGetter(this, name);

                        // If the getter is run without error, update both entry.namespace and
                        // module.exports with the current value so that CommonJS require
                        // calls remain consistent with module.watch.
                        if (value !== GETTER_ERROR) {
                          this.namespace[name] = value;
                          this.exports[name] = value;
                        }
                      }
                    };

                    function syncExportsToNamespace(entry, names) {
                      var setDefault = false;

                      if (!utils.getESModule(entry.exports)) {
                        // If the module entry is managing overrides module.exports, that
                        // value should be exposed as the .default property of the namespace,
                        // unless module.exports is marked as an ECMASCript module.
                        entry.namespace.default = entry.exports;
                        setDefault = true;
                      }

                      if (!utils.isObjectLike(entry.exports)) {
                        return;
                      }

                      if (names === void 0 || names.indexOf("*") >= 0) {
                        names = Object.keys(entry.exports);
                      }

                      names.forEach(function (key) {
                        // Don't set any properties for which a getter function exists in
                        // entry.getters, don't accidentally override entry.namespace.default,
                        // and only copy own properties from entry.exports.
                        if (!hasOwn.call(entry.getters, key) && !(setDefault && key === "default") && hasOwn.call(entry.exports, key)) {
                          utils.copyKey(key, entry.namespace, entry.exports);
                        }
                      });
                    }

                    // Called whenever module.exports might have changed, to trigger any
                    // setters associated with the newly exported values. The names parameter
                    // is optional; without it, all getters and setters will run.
                    Ep.runSetters = function (names) {
                      // Make sure entry.namespace and module.exports are up to date before we
                      // call getExportByName(entry, name).
                      this.runGetters(names);

                      // Lazily-initialized object mapping parent module identifiers to parent
                      // module objects whose setters we might need to run.
                      var parents;

                      forEachSetter(this, names, function (setter, name, value) {
                        if (parents === void 0) {
                          parents = Object.create(null);
                        }
                        parents[setter.parent.id] = setter.parent;

                        // The param order for setters is `value` then `name` because the `name`
                        // param is only used by namespace exports.
                        setter(value, name);
                      });

                      if (!parents) {
                        return;
                      }

                      // If any of the setters updated the module.exports of a parent module,
                      // or updated local variables that are exported by that parent module,
                      // then we must re-run any setters registered by that parent module.
                      var parentIDs = Object.keys(parents);
                      var parentIDCount = parentIDs.length;

                      for (var i = 0; i < parentIDCount; ++i) {
                        // What happens if parents[parentIDs[id]] === module, or if
                        // longer cycles exist in the parent chain? Thanks to our setter.last
                        // bookkeeping above, the runSetters broadcast will only proceed
                        // as far as there are any actual changes to report.
                        var parent = parents[parentIDs[i]];
                        var parentEntry = Entry.get(parent.exports);
                        if (parentEntry) {
                          parentEntry.runSetters();
                        }
                      }
                    };

                    function callSetterIfNecessary(setter, name, value, callback) {
                      if (name === "__esModule") {
                        // Ignore setters asking for module.exports.__esModule.
                        return;
                      }

                      var shouldCall = false;

                      if (setter.last === void 0) {
                        setter.last = Object.create(null);
                        // Always call the setter if it has never been called before.
                        shouldCall = true;
                      }

                      function changed(name, value) {
                        var valueToCompare = value;
                        if (valueToCompare !== valueToCompare) {
                          valueToCompare = NAN;
                        } else if (valueToCompare === void 0) {
                          valueToCompare = UNDEFINED;
                        }

                        if (setter.last[name] === valueToCompare) {
                          return false;
                        }

                        setter.last[name] = valueToCompare;
                        return true;
                      }

                      if (name === "*") {
                        var keys = safeKeys(value);
                        var keyCount = keys.length;
                        for (var i = 0; i < keyCount; ++i) {
                          var key = keys[i];
                          // Evaluating value[key] is risky because the property might be
                          // defined by a getter function that logs a deprecation warning (or
                          // worse) when evaluated. For example, Node uses this trick to
                          // display a deprecation warning whenever crypto.createCredentials
                          // is accessed. Fortunately, when value[key] is defined by a getter
                          // function, it's enough to check whether the getter function itself
                          // has changed, since we are careful elsewhere to preserve getters
                          // rather than prematurely evaluating them.
                          if (changed(key, utils.valueOrGetter(value, key))) {
                            shouldCall = true;
                          }
                        }
                      } else if (changed(name, value)) {
                        shouldCall = true;
                      }

                      if (shouldCall) {
                        // Only invoke the callback if we have not called this setter
                        // (with a value of this name) before, or the current value is
                        // different from the last value we passed to this setter.
                        return callback(setter, name, value);
                      }
                    }

                    // Invoke the given callback once for every (setter, name, value) that needs to
                    // be called. Note that forEachSetter does not call any setters itself, only the
                    // given callback.
                    function forEachSetter(entry, names, callback) {
                      var needToCheckNames = true;

                      if (names === void 0) {
                        names = Object.keys(entry.setters);
                        needToCheckNames = false;
                      }

                      var nameCount = names.length;

                      for (var i = 0; i < nameCount; ++i) {
                        var name = names[i];

                        if (needToCheckNames && !hasOwn.call(entry.setters, name)) {
                          continue;
                        }

                        var setters = entry.setters[name];
                        var keys = Object.keys(setters);
                        var keyCount = keys.length;

                        for (var j = 0; j < keyCount; ++j) {
                          var key = keys[j];
                          var value = getExportByName(entry, name);

                          callSetterIfNecessary(setters[key], name, value, callback);

                          var getter = entry.getters[name];
                          if (typeof getter === "function" &&
                          // Sometimes a getter function will throw because it's called
                          // before the variable it's supposed to return has been
                          // initialized, so we need to know that the getter function has
                          // run to completion at least once.
                          getter.runCount > 0 && getter.constant) {
                            // If we happen to know that this getter function has run
                            // successfully, and will never return a different value, then we
                            // can forget the corresponding setter, because we've already
                            // reported that constant value. Note that we can't forget the
                            // getter, because we need to remember the original value in case
                            // anyone tampers with entry.exports[name].
                            delete setters[key];
                          }
                        }
                      }
                    }

                    function getExportByName(entry, name) {
                      if (name === "*") {
                        return entry.namespace;
                      }

                      if (hasOwn.call(entry.namespace, name)) {
                        return entry.namespace[name];
                      }

                      var exported = entry.exports;

                      if (name === "default" && !(utils.getESModule(exported) && "default" in exported)) {
                        return exported;
                      }

                      if (exported == null) {
                        return;
                      }

                      return exported[name];
                    }

                    function makeUniqueKey() {
                      return Math.random().toString(36)
                      // Add an incrementing salt to help track key ordering and also
                      // absolutely guarantee we never return the same key twice.
                      .replace("0.", ++keySalt + "$");
                    }

                    function runGetter(entry, name) {
                      var getter = entry.getters[name];
                      try {
                        var result = getter();
                        ++getter.runCount;
                        return result;
                      } catch (e) {}
                      return GETTER_ERROR;
                    }

                    _module8.exports = Entry;

                    /////////////////////////////////////////////////////////////////////////////////////////////////
                  } } } } } } } } }, {
    "extensions": [".js", ".json"]
  });
  meteorInstall({ "node_modules": { "meteor-node-stubs": { "package.json": function (_require11, _exports10, _module10) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/package.json                                                 //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module10.exports = {
            "name": "meteor-node-stubs",
            "version": "0.4.1",
            "main": "index.js"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "index.js": function (_require12, _exports11, _module11) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/index.js                                                     //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          var map = _require12("./map.json");
          var meteorAliases = {};

          Object.keys(map).forEach(function (id) {
            if (typeof map[id] === "string") {
              var aliasParts = _module11.id.split("/");
              aliasParts.pop();
              aliasParts.push("node_modules", map[id]);
              _exports11[id] = meteorAliases[id + ".js"] = aliasParts.join("/");
            } else {
              _exports11[id] = map[id];
              meteorAliases[id + ".js"] = function () {};
            }
          });

          if (typeof meteorInstall === "function") {
            meteorInstall({
              // Install the aliases into a node_modules directory one level up from
              // the root directory, so that they do not clutter the namespace
              // available to apps and packages.
              "..": {
                node_modules: meteorAliases
              }
            });
          }

          // If Buffer is not defined globally, but the "buffer" built-in stub is
          // installed and can be imported, use it to define global.Buffer so that
          // modules like core-util-is/lib/util.js can refer to Buffer without
          // crashing application startup.
          if (typeof global.Buffer !== "function") {
            try {
              // Use (0, require)(...) to avoid registering a dependency on the
              // "buffer" stub, in case it is not otherwise bundled.
              global.Buffer = (0, _require12)("buffer").Buffer;
            } catch (ok) {
              // Failure to import "buffer" is fine as long as the Buffer global
              // variable is not used.
            }
          }

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "map.json": function (_require13, _exports12, _module12) {

          /////////////////////////////////////////////////////////////////////////////////////////////////
          //                                                                                             //
          // node_modules/meteor-node-stubs/map.json                                                     //
          //                                                                                             //
          /////////////////////////////////////////////////////////////////////////////////////////////////
          //
          _module12.exports = {
            "assert": "assert/",
            "buffer": "buffer/",
            "child_process": null,
            "cluster": null,
            "console": "console-browserify",
            "constants": "constants-browserify",
            "crypto": "../wrappers/crypto.js",
            "dgram": null,
            "dns": null,
            "domain": "domain-browser",
            "events": "events/",
            "fs": null,
            "http": "stream-http",
            "https": "https-browserify",
            "module": "../wrappers/module.js",
            "net": null,
            "os": "os-browserify/browser.js",
            "path": "path-browserify",
            "process": "process/browser.js",
            "punycode": "punycode/",
            "querystring": "querystring-es3/",
            "readline": null,
            "repl": null,
            "stream": "stream-browserify",
            "_stream_duplex": "readable-stream/duplex.js",
            "_stream_passthrough": "readable-stream/passthrough.js",
            "_stream_readable": "readable-stream/readable.js",
            "_stream_transform": "readable-stream/transform.js",
            "_stream_writable": "readable-stream/writable.js",
            "string_decoder": "string_decoder/",
            "sys": "util/util.js",
            "timers": "timers-browserify",
            "tls": null,
            "tty": "tty-browserify",
            "url": "url/",
            "util": "util/util.js",
            "vm": "vm-browserify",
            "zlib": "browserify-zlib"
          };

          /////////////////////////////////////////////////////////////////////////////////////////////////
        }, "deps": { "process.js": function (_require14) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // node_modules/meteor-node-stubs/deps/process.js                                              //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _require14("process/browser.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////
          } }, "node_modules": { "process": { "browser.js": function (_require15, _exports13, _module13) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/meteor-node-stubs/node_modules/process/browser.js                              //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              // shim for using process in browser
              var process = _module13.exports = {};

              // cached from whatever global is present so that test runners that stub it
              // don't break things.  But we need to wrap it in a try catch in case it is
              // wrapped in strict mode code which doesn't define any globals.  It's inside a
              // function because try/catches deoptimize in certain engines.

              var cachedSetTimeout;
              var cachedClearTimeout;

              function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
              }
              function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
              }
              (function () {
                try {
                  if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                  } else {
                    cachedSetTimeout = defaultSetTimout;
                  }
                } catch (e) {
                  cachedSetTimeout = defaultSetTimout;
                }
                try {
                  if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                  } else {
                    cachedClearTimeout = defaultClearTimeout;
                  }
                } catch (e) {
                  cachedClearTimeout = defaultClearTimeout;
                }
              })();
              function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                  //normal enviroments in sane situations
                  return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  cachedSetTimeout = setTimeout;
                  return setTimeout(fun, 0);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedSetTimeout(fun, 0);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                  }
                }
              }
              function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                  //normal enviroments in sane situations
                  return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  cachedClearTimeout = clearTimeout;
                  return clearTimeout(marker);
                }
                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedClearTimeout(marker);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                  }
                }
              }
              var queue = [];
              var draining = false;
              var currentQueue;
              var queueIndex = -1;

              function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                  return;
                }
                draining = false;
                if (currentQueue.length) {
                  queue = currentQueue.concat(queue);
                } else {
                  queueIndex = -1;
                }
                if (queue.length) {
                  drainQueue();
                }
              }

              function drainQueue() {
                if (draining) {
                  return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                  currentQueue = queue;
                  queue = [];
                  while (++queueIndex < len) {
                    if (currentQueue) {
                      currentQueue[queueIndex].run();
                    }
                  }
                  queueIndex = -1;
                  len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
              }

              process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                  for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                  }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                  runTimeout(drainQueue);
                }
              };

              // v8 likes predictible objects
              function Item(fun, array) {
                this.fun = fun;
                this.array = array;
              }
              Item.prototype.run = function () {
                this.fun.apply(null, this.array);
              };
              process.title = 'browser';
              process.browser = true;
              process.env = {};
              process.argv = [];
              process.version = ''; // empty string to avoid regexp issues
              process.versions = {};

              function noop() {}

              process.on = noop;
              process.addListener = noop;
              process.once = noop;
              process.off = noop;
              process.removeListener = noop;
              process.removeAllListeners = noop;
              process.emit = noop;
              process.prependListener = noop;
              process.prependOnceListener = noop;

              process.listeners = function (name) {
                return [];
              };

              process.binding = function (name) {
                throw new Error('process.binding is not supported');
              };

              process.cwd = function () {
                return '/';
              };
              process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
              };
              process.umask = function () {
                return 0;
              };

              /////////////////////////////////////////////////////////////////////////////////////////////////
            } } } }, "@babel": { "runtime": { "package.json": function (_require16, _exports14, _module14) {

            /////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                             //
            // node_modules/@babel/runtime/package.json                                                    //
            //                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module14.exports = {
              "author": {
                "name": "Sebastian McKenzie",
                "email": "sebmck@gmail.com"
              },
              "bugs": {
                "url": "https://github.com/babel/babel/issues"
              },
              "bundleDependencies": false,
              "dependencies": {
                "regenerator-runtime": "^0.13.4"
              },
              "deprecated": false,
              "description": "babel's modular runtime helpers",
              "devDependencies": {
                "@babel/helpers": "^7.10.4"
              },
              "gitHead": "7fd40d86a0d03ff0e9c3ea16b29689945433d4df",
              "homepage": "https://babeljs.io/",
              "license": "MIT",
              "name": "@babel/runtime",
              "publishConfig": {
                "access": "public"
              },
              "repository": {
                "type": "git",
                "url": "git+https://github.com/babel/babel.git",
                "directory": "packages/babel-runtime"
              },
              "version": "7.10.4"
            };

            /////////////////////////////////////////////////////////////////////////////////////////////////
          }, "helpers": { "interopRequireDefault.js": function (_require17, _exports15, _module15) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/@babel/runtime/helpers/interopRequireDefault.js                                //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                  "default": obj
                };
              }

              _module15.exports = _interopRequireDefault;
              /////////////////////////////////////////////////////////////////////////////////////////////////
            }, "objectSpread.js": function (_require18, _exports16, _module16) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/@babel/runtime/helpers/objectSpread.js                                         //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var defineProperty = _require18("./defineProperty");

              function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i] != null ? Object(arguments[i]) : {};
                  var ownKeys = Object.keys(source);

                  if (typeof Object.getOwnPropertySymbols === 'function') {
                    ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                      return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                    }));
                  }

                  ownKeys.forEach(function (key) {
                    defineProperty(target, key, source[key]);
                  });
                }

                return target;
              }

              _module16.exports = _objectSpread;
              /////////////////////////////////////////////////////////////////////////////////////////////////
            }, "defineProperty.js": function (_require19, _exports17, _module17) {

              /////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                             //
              // node_modules/@babel/runtime/helpers/defineProperty.js                                       //
              //                                                                                             //
              /////////////////////////////////////////////////////////////////////////////////////////////////
              //
              function _defineProperty(obj, key, value) {
                if (key in obj) {
                  Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                  });
                } else {
                  obj[key] = value;
                }

                return obj;
              }

              _module17.exports = _defineProperty;
              /////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json", ".html", ".css"]
  });

  var _exports2 = _require2("/node_modules/meteor/modules/client.js");

  /* Exports */
  Package._define("modules", _exports2, {
    meteorInstall: meteorInstall
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("modern-browsers");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("babel-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ecmascript-runtime");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var meteorBabelHelpers;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "babel-runtime": { "babel-runtime.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////
            //                                                                                 //
            // packages/babel-runtime/babel-runtime.js                                         //
            //                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.meteorBabelHelpers = _require("meteor-babel-helpers");

            try {
              var babelRuntimeVersion = _require("@babel/runtime/package.json").version;
            } catch (e) {
              throw new Error(["", "The @babel/runtime npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save @babel/runtime", ""].join("\n"));
            }

            if (parseInt(babelRuntimeVersion, 10) < 7 || babelRuntimeVersion.indexOf("7.0.0-beta.") === 0 && parseInt(babelRuntimeVersion.split(".").pop(), 10) < 56) {
              console.error(["The version of @babel/runtime installed in your node_modules directory ", "(" + babelRuntimeVersion + ") is out of date. Please upgrade it by running ", "", "  meteor npm install --save @babel/runtime@latest", "", "in your application directory.", ""].join("\n"));
            }

            /////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-babel-helpers": { "package.json": function (_require3, _exports3, _module) {

                /////////////////////////////////////////////////////////////////////////////////////
                //                                                                                 //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/package.jso //
                //                                                                                 //
                /////////////////////////////////////////////////////////////////////////////////////
                //
                _module.exports = {
                  "name": "meteor-babel-helpers",
                  "version": "0.0.3",
                  "main": "index.js"
                };

                /////////////////////////////////////////////////////////////////////////////////////
              }, "index.js": function (_require4, _exports4, _module2) {

                /////////////////////////////////////////////////////////////////////////////////////
                //                                                                                 //
                // node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index.js    //
                //                                                                                 //
                /////////////////////////////////////////////////////////////////////////////////////
                //
                function canDefineNonEnumerableProperties() {
                  var testObj = {};
                  var testPropName = "t";

                  try {
                    Object.defineProperty(testObj, testPropName, {
                      enumerable: false,
                      value: testObj
                    });

                    for (var k in testObj) {
                      if (k === testPropName) {
                        return false;
                      }
                    }
                  } catch (e) {
                    return false;
                  }

                  return testObj[testPropName] === testObj;
                }

                function sanitizeEasy(value) {
                  return value;
                }

                function sanitizeHard(obj) {
                  if (Array.isArray(obj)) {
                    var newObj = {};
                    var keys = Object.keys(obj);
                    var keyCount = keys.length;
                    for (var i = 0; i < keyCount; ++i) {
                      var key = keys[i];
                      newObj[key] = obj[key];
                    }
                    return newObj;
                  }

                  return obj;
                }

                meteorBabelHelpers = _module2.exports = {
                  // Meteor-specific runtime helper for wrapping the object of for-in
                  // loops, so that inherited Array methods defined by es5-shim can be
                  // ignored in browsers where they cannot be defined as non-enumerable.
                  sanitizeForInObject: canDefineNonEnumerableProperties() ? sanitizeEasy : sanitizeHard,

                  // Exposed so that we can test sanitizeForInObject in environments that
                  // support defining non-enumerable properties.
                  _sanitizeForInObjectHard: sanitizeHard
                };

                /////////////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/babel-runtime/babel-runtime.js");

  /* Exports */
  Package._define("babel-runtime", _exports2, {
    meteorBabelHelpers: meteorBabelHelpers
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var Promise;

  var _require = meteorInstall({ "node_modules": { "meteor": { "promise": { "modern.js": function () {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/modern.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            // Initialize the package-scoped Promise variable with global.Promise in
            // all environments, even if it's not defined.
            Promise = global.Promise;

            /////////////////////////////////////////////////////////////////////////////
          }, "client.js": function (_require2) {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/client.js                                              //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            _require2("./extensions.js");
            _require2("meteor-promise").makeCompatible(Promise);

            /////////////////////////////////////////////////////////////////////////////
          }, "extensions.js": function () {

            /////////////////////////////////////////////////////////////////////////////
            //                                                                         //
            // packages/promise/extensions.js                                          //
            //                                                                         //
            /////////////////////////////////////////////////////////////////////////////
            //
            var proto = Promise.prototype;
            var hasOwn = Object.prototype.hasOwnProperty;

            proto.done = function (onFulfilled, onRejected) {
              var self = this;

              if (arguments.length > 0) {
                self = this.then.apply(this, arguments);
              }

              self.then(null, function (err) {
                Meteor._setImmediate(function () {
                  throw err;
                });
              });
            };

            if (!hasOwn.call(proto, "finally")) {
              proto["finally"] = function (onFinally) {
                var threw = false,
                    result;
                return this.then(function (value) {
                  result = value;
                  // Most implementations of Promise.prototype.finally call
                  // Promise.resolve(onFinally()) (or this.constructor.resolve or even
                  // this.constructor[Symbol.species].resolve, depending on how spec
                  // compliant they're trying to be), but this implementation simply
                  // relies on the standard Promise behavior of resolving any value
                  // returned from a .then callback function.
                  return onFinally();
                }, function (error) {
                  // Make the final .then callback (below) re-throw the error instead
                  // of returning it.
                  threw = true;
                  result = error;
                  return onFinally();
                }).then(function () {
                  if (threw) throw result;
                  return result;
                });
              };
            }

            /////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "meteor-promise": { "package.json": function (_require3, _exports2, _module) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/package.json    //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _module.exports = {
                  "name": "meteor-promise",
                  "version": "0.8.7",
                  "browser": "promise_client.js",
                  "main": "promise_server.js"
                };

                /////////////////////////////////////////////////////////////////////////////
              }, "promise_client.js": function (_require4, _exports3) {

                /////////////////////////////////////////////////////////////////////////////
                //                                                                         //
                // node_modules/meteor/promise/node_modules/meteor-promise/promise_client. //
                //                                                                         //
                /////////////////////////////////////////////////////////////////////////////
                //
                _exports3.makeCompatible = function (Promise) {
                  var es6PromiseThen = Promise.prototype.then;

                  Promise.prototype.then = function (onResolved, onRejected) {
                    if (typeof Meteor === "object" && typeof Meteor.bindEnvironment === "function") {
                      return es6PromiseThen.call(this, onResolved && Meteor.bindEnvironment(onResolved, raise), onRejected && Meteor.bindEnvironment(onRejected, raise));
                    }

                    return es6PromiseThen.call(this, onResolved, onRejected);
                  };
                };

                function raise(exception) {
                  throw exception;
                }

                /////////////////////////////////////////////////////////////////////////////
              } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/promise/modern.js");
  var _exports = _require("/node_modules/meteor/promise/client.js");

  /* Exports */
  Package._define("promise", _exports, {
    Promise: Promise
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "fetch": { "modern.js": function (_require, _exports) {

            ///////////////////////////////////////////////////////////////////////
            //                                                                   //
            // packages/fetch/modern.js                                          //
            //                                                                   //
            ///////////////////////////////////////////////////////////////////////
            //
            _exports.fetch = global.fetch;
            _exports.Headers = global.Headers;
            _exports.Request = global.Request;
            _exports.Response = global.Response;

            ///////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/fetch/modern.js");

  /* Exports */
  Package._define("fetch", _exports2, {
    fetch: fetch
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;
  var fetch = Package.fetch.fetch;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "dynamic-import": { "client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/client.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var Module = _module.constructor;
            var cache = _require("./cache.js");
            var meteorInstall = _require("meteor/modules").meteorInstall;

            // Call module.dynamicImport(id) to fetch a module and any/all of its
            // dependencies that have not already been fetched, and evaluate them as
            // soon as they arrive. This runtime API makes it very easy to implement
            // ECMAScript dynamic import(...) syntax.
            Module.prototype.dynamicImport = function (id) {
              var module = this;
              return module.prefetch(id).then(function () {
                return getNamespace(module, id);
              });
            };

            // Called by Module.prototype.prefetch if there are any missing dynamic
            // modules that need to be fetched.
            meteorInstall.fetch = function (ids) {
              var tree = Object.create(null);
              var versions = Object.create(null);
              var dynamicVersions = _require("./dynamic-versions.js");
              var missing;

              function addSource(id, source) {
                addToTree(tree, id, makeModuleFunction(id, source, ids[id].options));
              }

              function addMissing(id) {
                addToTree(missing = missing || Object.create(null), id, 1);
              }

              Object.keys(ids).forEach(function (id) {
                var version = dynamicVersions.get(id);
                if (version) {
                  versions[id] = version;
                } else {
                  addMissing(id);
                }
              });

              return cache.checkMany(versions).then(function (sources) {
                Object.keys(sources).forEach(function (id) {
                  var source = sources[id];
                  if (source) {
                    addSource(id, source);
                  } else {
                    addMissing(id);
                  }
                });

                return missing && fetchMissing(missing).then(function (results) {
                  var versionsAndSourcesById = Object.create(null);
                  var flatResults = flattenModuleTree(results);

                  Object.keys(flatResults).forEach(function (id) {
                    var source = flatResults[id];
                    addSource(id, source);

                    var version = dynamicVersions.get(id);
                    if (version) {
                      versionsAndSourcesById[id] = {
                        version: version,
                        source: source
                      };
                    }
                  });

                  cache.setMany(versionsAndSourcesById);
                });
              }).then(function () {
                return tree;
              });
            };

            function flattenModuleTree(tree) {
              var parts = [""];
              var result = Object.create(null);

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result[parts.join("/")] = t;
                }
              }

              walk(tree);

              return result;
            }

            function makeModuleFunction(id, source, options) {
              // By calling (options && options.eval || eval) in a wrapper function,
              // we delay the cost of parsing and evaluating the module code until the
              // module is first imported.
              return function () {
                // If an options.eval function was provided in the second argument to
                // meteorInstall when this bundle was first installed, use that
                // function to parse and evaluate the dynamic module code in the scope
                // of the package. Otherwise fall back to indirect (global) eval.
                return (options && options.eval || eval)(
                // Wrap the function(require,exports,module){...} expression in
                // parentheses to force it to be parsed as an expression.
                "(" + source + ")\n//# sourceURL=" + id).apply(this, arguments);
              };
            }

            var secretKey = null;
            _exports.setSecretKey = function (key) {
              secretKey = key;
            };

            var fetchURL = _require("./common.js").fetchURL;

            function fetchMissing(missingTree) {
              // If the hostname of the URL returned by Meteor.absoluteUrl differs
              // from location.host, then we'll be making a cross-origin request here,
              // but that's fine because the dynamic-import server sets appropriate
              // CORS headers to enable fetching dynamic modules from any
              // origin. Browsers that check CORS do so by sending an additional
              // preflight OPTIONS request, which may add latency to the first dynamic
              // import() request, so it's a good idea for ROOT_URL to match
              // location.host if possible, though not strictly necessary.
              var url = Meteor.absoluteUrl(fetchURL);

              if (secretKey) {
                url += "key=" + secretKey;
              }

              return fetch(url, {
                method: "POST",
                body: JSON.stringify(missingTree)
              }).then(function (res) {
                if (!res.ok) throw res;
                return res.json();
              });
            }

            function addToTree(tree, id, value) {
              var parts = id.split("/");
              var lastIndex = parts.length - 1;
              parts.forEach(function (part, i) {
                if (part) {
                  tree = tree[part] = tree[part] || (i < lastIndex ? Object.create(null) : value);
                }
              });
            }

            function getNamespace(_module2, id) {
              var namespace;

              _module2.link(id, {
                "*": function (ns) {
                  namespace = ns;
                }
              });

              // This helps with Babel interop, since we're not just returning the
              // module.exports object.
              Object.defineProperty(namespace, "__esModule", {
                value: true,
                enumerable: false
              });

              return namespace;
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "cache.js": function (_require3, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/cache.js                                            //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            var dbPromise;

            var canUseCache =
            // The server doesn't benefit from dynamic module fetching, and almost
            // certainly doesn't support IndexedDB.
            Meteor.isClient &&
            // Cordova bundles all modules into the monolithic initial bundle, so
            // the dynamic module cache won't be necessary.
            !Meteor.isCordova &&
            // Caching can be confusing in development, and is designed to be a
            // transparent optimization for production performance.
            Meteor.isProduction;

            function getIDB() {
              if (typeof indexedDB !== "undefined") return indexedDB;
              if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
              if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
              if (typeof OIndexedDB !== "undefined") return OIndexedDB;
              if (typeof msIndexedDB !== "undefined") return msIndexedDB;
            }

            function withDB(callback) {
              dbPromise = dbPromise || new Promise(function (resolve, reject) {
                var idb = getIDB();
                if (!idb) {
                  throw new Error("IndexedDB not available");
                }

                // Incrementing the version number causes all existing object stores
                // to be deleted and recreates those specified by objectStoreMap.
                var request = idb.open("MeteorDynamicImportCache", 2);

                request.onupgradeneeded = function (event) {
                  var db = event.target.result;

                  // It's fine to delete existing object stores since onupgradeneeded
                  // is only called when we change the DB version number, and the data
                  // we're storing is disposable/reconstructible.
                  Array.from(db.objectStoreNames).forEach(db.deleteObjectStore, db);

                  Object.keys(objectStoreMap).forEach(function (name) {
                    db.createObjectStore(name, objectStoreMap[name]);
                  });
                };

                request.onerror = makeOnError(reject, "indexedDB.open");
                request.onsuccess = function (event) {
                  resolve(event.target.result);
                };
              });

              return dbPromise.then(callback, function (error) {
                return callback(null);
              });
            }

            var objectStoreMap = {
              sourcesByVersion: { keyPath: "version" }
            };

            function makeOnError(reject, source) {
              return function (event) {
                reject(new Error("IndexedDB failure in " + source + " " + JSON.stringify(event.target)));

                // Returning true from an onerror callback function prevents an
                // InvalidStateError in Firefox during Private Browsing. Silencing
                // that error is safe because we handle the error more gracefully by
                // passing it to the Promise reject function above.
                // https://github.com/meteor/meteor/issues/8697
                return true;
              };
            }

            var checkCount = 0;

            _exports3.checkMany = function (versions) {
              var ids = Object.keys(versions);
              var sourcesById = Object.create(null);

              // Initialize sourcesById with null values to indicate all sources are
              // missing (unless replaced with actual sources below).
              ids.forEach(function (id) {
                sourcesById[id] = null;
              });

              if (!canUseCache) {
                return Promise.resolve(sourcesById);
              }

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return sourcesById;
                }

                var txn = db.transaction(["sourcesByVersion"], "readonly");

                var sourcesByVersion = txn.objectStore("sourcesByVersion");

                ++checkCount;

                function finish() {
                  --checkCount;
                  return sourcesById;
                }

                return Promise.all(ids.map(function (id) {
                  return new Promise(function (resolve, reject) {
                    var version = versions[id];
                    if (version) {
                      var sourceRequest = sourcesByVersion.get(version);
                      sourceRequest.onerror = makeOnError(reject, "sourcesByVersion.get");
                      sourceRequest.onsuccess = function (event) {
                        var result = event.target.result;
                        if (result) {
                          sourcesById[id] = result.source;
                        }
                        resolve();
                      };
                    } else resolve();
                  });
                })).then(finish, finish);
              });
            };

            var pendingVersionsAndSourcesById = Object.create(null);

            _exports3.setMany = function (versionsAndSourcesById) {
              if (canUseCache) {
                Object.assign(pendingVersionsAndSourcesById, versionsAndSourcesById);

                // Delay the call to flushSetMany so that it doesn't contribute to the
                // amount of time it takes to call module.dynamicImport.
                if (!flushSetMany.timer) {
                  flushSetMany.timer = setTimeout(flushSetMany, 100);
                }
              }
            };

            function flushSetMany() {
              if (checkCount > 0) {
                // If checkMany is currently underway, postpone the flush until later,
                // since updating the cache is less important than reading from it.
                return flushSetMany.timer = setTimeout(flushSetMany, 100);
              }

              flushSetMany.timer = null;

              var versionsAndSourcesById = pendingVersionsAndSourcesById;
              pendingVersionsAndSourcesById = Object.create(null);

              return withDB(function (db) {
                if (!db) {
                  // We thought we could used IndexedDB, but something went wrong
                  // while opening the database, so err on the side of safety.
                  return;
                }

                var setTxn = db.transaction(["sourcesByVersion"], "readwrite");

                var sourcesByVersion = setTxn.objectStore("sourcesByVersion");

                return Promise.all(Object.keys(versionsAndSourcesById).map(function (id) {
                  var info = versionsAndSourcesById[id];
                  return new Promise(function (resolve, reject) {
                    var request = sourcesByVersion.put({
                      version: info.version,
                      source: info.source
                    });
                    request.onerror = makeOnError(reject, "sourcesByVersion.put");
                    request.onsuccess = resolve;
                  });
                }));
              });
            }

            /////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require4, _exports4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/common.js                                           //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            _exports4.fetchURL = "/__meteor__/dynamic-import/fetch";

            /////////////////////////////////////////////////////////////////////////////////
          }, "dynamic-versions.js": function (_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////
            //                                                                             //
            // packages/dynamic-import/dynamic-versions.js                                 //
            //                                                                             //
            /////////////////////////////////////////////////////////////////////////////////
            //
            // This magic double-underscored identifier gets replaced in
            // tools/isobuild/bundler.js with a tree of hashes of all dynamic
            // modules, for use in client.js and cache.js.
            var versions = {};

            _exports5.get = function (id) {
              var tree = versions;
              var version = null;

              id.split("/").some(function (part) {
                if (part) {
                  // If the tree contains identifiers for Meteor packages with colons
                  // in their names, the colons should not have been replaced by
                  // underscores, but there's a bug that results in that behavior, so
                  // for now it seems safest to be tolerant of underscores here.
                  // https://github.com/meteor/meteor/pull/9103
                  tree = tree[part] || tree[part.replace(":", "_")];
                }

                if (!tree) {
                  // Terminate the search without reassigning version.
                  return true;
                }

                if (typeof tree === "string") {
                  version = tree;
                  return true;
                }
              });

              return version;
            };

            function getFlatModuleArray(tree) {
              var parts = [""];
              var result = [];

              function walk(t) {
                if (t && typeof t === "object") {
                  Object.keys(t).forEach(function (key) {
                    parts.push(key);
                    walk(t[key]);
                    parts.pop();
                  });
                } else if (typeof t === "string") {
                  result.push(parts.join("/"));
                }
              }

              walk(tree);

              return result;
            }

            // If Package.appcache is loaded, preload additional modules after the
            // core bundle has been loaded.
            function precacheOnLoad(event) {
              // Check inside onload to make sure Package.appcache has had a chance to
              // become available.
              if (!Package.appcache) {
                return;
              }

              // Prefetch in chunks to reduce overhead. If we call module.prefetch(id)
              // multiple times in the same tick of the event loop, all those modules
              // will be fetched in one HTTP POST request.
              function prefetchInChunks(modules, amount) {
                Promise.all(modules.splice(0, amount).map(function (id) {
                  return _module4.prefetch(id);
                })).then(function () {
                  if (modules.length > 0) {
                    setTimeout(function () {
                      prefetchInChunks(modules, amount);
                    }, 0);
                  }
                });
              }

              // Get a flat array of modules and start prefetching.
              prefetchInChunks(getFlatModuleArray(versions), 50);
            }

            // Use window.onload to only prefetch after the main bundle has loaded.
            if (global.addEventListener) {
              global.addEventListener('load', precacheOnLoad, false);
            } else if (global.attachEvent) {
              global.attachEvent('onload', precacheOnLoad);
            }

            /////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/dynamic-import/client.js");

  /* Exports */
  Package._define("dynamic-import", _exports2);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("es5-shim");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var __g, __e;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ecmascript-runtime-client": { "modern.js": function (_require) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/ecmascript-runtime-client/modern.js                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            try {
              _require("core-js/modules/es7.object.get-own-property-descriptors");
            } catch (e) {
              throw new Error(["The core-js npm package could not be found in your node_modules ", "directory. Please run the following command to install it:", "", "  meteor npm install --save core-js", ""].join("\n"));
            }

            _require("core-js/modules/es6.object.is");
            _require("core-js/modules/es6.function.name");
            _require("core-js/modules/es6.number.is-finite");
            _require("core-js/modules/es6.number.is-nan");
            _require("core-js/modules/es7.array.flatten");
            _require("core-js/modules/es7.array.flat-map");
            _require("core-js/modules/es7.object.values");
            _require("core-js/modules/es7.object.entries");
            _require("core-js/modules/es7.string.pad-start");
            _require("core-js/modules/es7.string.pad-end");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "node_modules": { "core-js": { "modules": { "es7.object.get-own-property-descriptors.js": function (_require3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.get-own-property-descriptors. //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-getownpropertydescriptors
                  var $export = _require3('./_export');
                  var ownKeys = _require3('./_own-keys');
                  var toIObject = _require3('./_to-iobject');
                  var gOPD = _require3('./_object-gopd');
                  var createProperty = _require3('./_create-property');

                  $export($export.S, 'Object', {
                    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                      var O = toIObject(object);
                      var getDesc = gOPD.f;
                      var keys = ownKeys(O);
                      var result = {};
                      var i = 0;
                      var key, desc;
                      while (keys.length > i) {
                        desc = getDesc(O, key = keys[i++]);
                        if (desc !== undefined) createProperty(result, key, desc);
                      }
                      return result;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_export.js": function (_require4, _exports3, _module) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_export.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require4('./_global');
                  var core = _require4('./_core');
                  var hide = _require4('./_hide');
                  var redefine = _require4('./_redefine');
                  var ctx = _require4('./_ctx');
                  var PROTOTYPE = 'prototype';

                  var $export = function (type, name, source) {
                    var IS_FORCED = type & $export.F;
                    var IS_GLOBAL = type & $export.G;
                    var IS_STATIC = type & $export.S;
                    var IS_PROTO = type & $export.P;
                    var IS_BIND = type & $export.B;
                    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
                    var _exports2 = IS_GLOBAL ? core : core[name] || (core[name] = {});
                    var expProto = _exports2[PROTOTYPE] || (_exports2[PROTOTYPE] = {});
                    var key, own, out, exp;
                    if (IS_GLOBAL) source = name;
                    for (key in source) {
                      // contains in native
                      own = !IS_FORCED && target && target[key] !== undefined;
                      // export native or passed
                      out = (own ? target : source)[key];
                      // bind timers to global for call from export context
                      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                      // extend global
                      if (target) redefine(target, key, out, type & $export.U);
                      // export
                      if (_exports2[key] != out) hide(_exports2, key, exp);
                      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
                    }
                  };
                  global.core = core;
                  // type bitmap
                  $export.F = 1; // forced
                  $export.G = 2; // global
                  $export.S = 4; // static
                  $export.P = 8; // proto
                  $export.B = 16; // bind
                  $export.W = 32; // wrap
                  $export.U = 64; // safe
                  $export.R = 128; // real proto method for `library`
                  _module.exports = $export;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_global.js": function (_require5, _exports4, _module2) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_global.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                  var global = _module2.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
                  // eslint-disable-next-line no-new-func
                  : Function('return this')();
                  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_core.js": function (_require6, _exports5, _module3) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_core.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var core = _module3.exports = { version: '2.5.7' };
                  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_hide.js": function (_require7, _exports6, _module4) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_hide.js                                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var dP = _require7('./_object-dp');
                  var createDesc = _require7('./_property-desc');
                  _module4.exports = _require7('./_descriptors') ? function (object, key, value) {
                    return dP.f(object, key, createDesc(1, value));
                  } : function (object, key, value) {
                    object[key] = value;
                    return object;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-dp.js": function (_require8, _exports7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-dp.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var anObject = _require8('./_an-object');
                  var IE8_DOM_DEFINE = _require8('./_ie8-dom-define');
                  var toPrimitive = _require8('./_to-primitive');
                  var dP = Object.defineProperty;

                  _exports7.f = _require8('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                    anObject(O);
                    P = toPrimitive(P, true);
                    anObject(Attributes);
                    if (IE8_DOM_DEFINE) try {
                      return dP(O, P, Attributes);
                    } catch (e) {/* empty */}
                    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                    if ('value' in Attributes) O[P] = Attributes.value;
                    return O;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_an-object.js": function (_require9, _exports8, _module5) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_an-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require9('./_is-object');
                  _module5.exports = function (it) {
                    if (!isObject(it)) throw TypeError(it + ' is not an object!');
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_is-object.js": function (_require10, _exports9, _module6) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_is-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module6.exports = function (it) {
                    return typeof it === 'object' ? it !== null : typeof it === 'function';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_ie8-dom-define.js": function (_require11, _exports10, _module7) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_ie8-dom-define.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module7.exports = !_require11('./_descriptors') && !_require11('./_fails')(function () {
                    return Object.defineProperty(_require11('./_dom-create')('div'), 'a', { get: function () {
                        return 7;
                      } }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_descriptors.js": function (_require12, _exports11, _module8) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_descriptors.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // Thank's IE8 for his funny defineProperty
                  _module8.exports = !_require12('./_fails')(function () {
                    return Object.defineProperty({}, 'a', { get: function () {
                        return 7;
                      } }).a != 7;
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_fails.js": function (_require13, _exports12, _module9) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_fails.js                                //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module9.exports = function (exec) {
                    try {
                      return !!exec();
                    } catch (e) {
                      return true;
                    }
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_dom-create.js": function (_require14, _exports13, _module10) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_dom-create.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require14('./_is-object');
                  var document = _require14('./_global').document;
                  // typeof document.createElement is 'object' in old IE
                  var is = isObject(document) && isObject(document.createElement);
                  _module10.exports = function (it) {
                    return is ? document.createElement(it) : {};
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-primitive.js": function (_require15, _exports14, _module11) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-primitive.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.1 ToPrimitive(input [, PreferredType])
                  var isObject = _require15('./_is-object');
                  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
                  // and the second argument - flag - preferred type is a string
                  _module11.exports = function (it, S) {
                    if (!isObject(it)) return it;
                    var fn, val;
                    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                    throw TypeError("Can't convert object to primitive value");
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_property-desc.js": function (_require16, _exports15, _module12) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_property-desc.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module12.exports = function (bitmap, value) {
                    return {
                      enumerable: !(bitmap & 1),
                      configurable: !(bitmap & 2),
                      writable: !(bitmap & 4),
                      value: value
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_redefine.js": function (_require17, _exports16, _module13) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_redefine.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require17('./_global');
                  var hide = _require17('./_hide');
                  var has = _require17('./_has');
                  var SRC = _require17('./_uid')('src');
                  var TO_STRING = 'toString';
                  var $toString = Function[TO_STRING];
                  var TPL = ('' + $toString).split(TO_STRING);

                  _require17('./_core').inspectSource = function (it) {
                    return $toString.call(it);
                  };

                  (_module13.exports = function (O, key, val, safe) {
                    var isFunction = typeof val == 'function';
                    if (isFunction) has(val, 'name') || hide(val, 'name', key);
                    if (O[key] === val) return;
                    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
                    if (O === global) {
                      O[key] = val;
                    } else if (!safe) {
                      delete O[key];
                      hide(O, key, val);
                    } else if (O[key]) {
                      O[key] = val;
                    } else {
                      hide(O, key, val);
                    }
                    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
                  })(Function.prototype, TO_STRING, function toString() {
                    return typeof this == 'function' && this[SRC] || $toString.call(this);
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_has.js": function (_require18, _exports17, _module14) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_has.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var hasOwnProperty = {}.hasOwnProperty;
                  _module14.exports = function (it, key) {
                    return hasOwnProperty.call(it, key);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_uid.js": function (_require19, _exports18, _module15) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_uid.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var id = 0;
                  var px = Math.random();
                  _module15.exports = function (key) {
                    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_ctx.js": function (_require20, _exports19, _module16) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_ctx.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // optional / simple context binding
                  var aFunction = _require20('./_a-function');
                  _module16.exports = function (fn, that, length) {
                    aFunction(fn);
                    if (that === undefined) return fn;
                    switch (length) {
                      case 1:
                        return function (a) {
                          return fn.call(that, a);
                        };
                      case 2:
                        return function (a, b) {
                          return fn.call(that, a, b);
                        };
                      case 3:
                        return function (a, b, c) {
                          return fn.call(that, a, b, c);
                        };
                    }
                    return function () /* ...args */{
                      return fn.apply(that, arguments);
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_a-function.js": function (_require21, _exports20, _module17) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_a-function.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module17.exports = function (it) {
                    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_own-keys.js": function (_require22, _exports21, _module18) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_own-keys.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // all object keys, includes non-enumerable and symbols
                  var gOPN = _require22('./_object-gopn');
                  var gOPS = _require22('./_object-gops');
                  var anObject = _require22('./_an-object');
                  var Reflect = _require22('./_global').Reflect;
                  _module18.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
                    var keys = gOPN.f(anObject(it));
                    var getSymbols = gOPS.f;
                    return getSymbols ? keys.concat(getSymbols(it)) : keys;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gopn.js": function (_require23, _exports22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gopn.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
                  var $keys = _require23('./_object-keys-internal');
                  var hiddenKeys = _require23('./_enum-bug-keys').concat('length', 'prototype');

                  _exports22.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                    return $keys(O, hiddenKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-keys-internal.js": function (_require24, _exports23, _module19) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-keys-internal.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var has = _require24('./_has');
                  var toIObject = _require24('./_to-iobject');
                  var arrayIndexOf = _require24('./_array-includes')(false);
                  var IE_PROTO = _require24('./_shared-key')('IE_PROTO');

                  _module19.exports = function (object, names) {
                    var O = toIObject(object);
                    var i = 0;
                    var result = [];
                    var key;
                    for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
                    // Don't enum bug & hidden keys
                    while (names.length > i) if (has(O, key = names[i++])) {
                      ~arrayIndexOf(result, key) || result.push(key);
                    }
                    return result;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-iobject.js": function (_require25, _exports24, _module20) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-iobject.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // to indexed object, toObject with fallback for non-array-like ES3 strings
                  var IObject = _require25('./_iobject');
                  var defined = _require25('./_defined');
                  _module20.exports = function (it) {
                    return IObject(defined(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_iobject.js": function (_require26, _exports25, _module21) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_iobject.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // fallback for non-array-like ES3 and non-enumerable old V8 strings
                  var cof = _require26('./_cof');
                  // eslint-disable-next-line no-prototype-builtins
                  _module21.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                    return cof(it) == 'String' ? it.split('') : Object(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_cof.js": function (_require27, _exports26, _module22) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_cof.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toString = {}.toString;

                  _module22.exports = function (it) {
                    return toString.call(it).slice(8, -1);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_defined.js": function (_require28, _exports27, _module23) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_defined.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.1 RequireObjectCoercible(argument)
                  _module23.exports = function (it) {
                    if (it == undefined) throw TypeError("Can't call method on  " + it);
                    return it;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-includes.js": function (_require29, _exports28, _module24) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-includes.js                       //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // false -> Array#indexOf
                  // true  -> Array#includes
                  var toIObject = _require29('./_to-iobject');
                  var toLength = _require29('./_to-length');
                  var toAbsoluteIndex = _require29('./_to-absolute-index');
                  _module24.exports = function (IS_INCLUDES) {
                    return function ($this, el, fromIndex) {
                      var O = toIObject($this);
                      var length = toLength(O.length);
                      var index = toAbsoluteIndex(fromIndex, length);
                      var value;
                      // Array#includes uses SameValueZero equality algorithm
                      // eslint-disable-next-line no-self-compare
                      if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                      } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
                        if (O[index] === el) return IS_INCLUDES || index || 0;
                      }return !IS_INCLUDES && -1;
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-length.js": function (_require30, _exports29, _module25) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-length.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.15 ToLength
                  var toInteger = _require30('./_to-integer');
                  var min = Math.min;
                  _module25.exports = function (it) {
                    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-integer.js": function (_require31, _exports30, _module26) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-integer.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.4 ToInteger
                  var ceil = Math.ceil;
                  var floor = Math.floor;
                  _module26.exports = function (it) {
                    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-absolute-index.js": function (_require32, _exports31, _module27) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-absolute-index.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var toInteger = _require32('./_to-integer');
                  var max = Math.max;
                  var min = Math.min;
                  _module27.exports = function (index, length) {
                    index = toInteger(index);
                    return index < 0 ? max(index + length, 0) : min(index, length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_shared-key.js": function (_require33, _exports32, _module28) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_shared-key.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var shared = _require33('./_shared')('keys');
                  var uid = _require33('./_uid');
                  _module28.exports = function (key) {
                    return shared[key] || (shared[key] = uid(key));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_shared.js": function (_require34, _exports33, _module29) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_shared.js                               //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var core = _require34('./_core');
                  var global = _require34('./_global');
                  var SHARED = '__core-js_shared__';
                  var store = global[SHARED] || (global[SHARED] = {});

                  (_module29.exports = function (key, value) {
                    return store[key] || (store[key] = value !== undefined ? value : {});
                  })('versions', []).push({
                    version: core.version,
                    mode: _require34('./_library') ? 'pure' : 'global',
                    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_library.js": function (_require35, _exports34, _module30) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_library.js                              //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _module30.exports = false;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_enum-bug-keys.js": function (_require36, _exports35, _module31) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_enum-bug-keys.js                        //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // IE 8- don't enum bug keys
                  _module31.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gops.js": function (_require37, _exports36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gops.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports36.f = Object.getOwnPropertySymbols;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-gopd.js": function (_require38, _exports37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-gopd.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var pIE = _require38('./_object-pie');
                  var createDesc = _require38('./_property-desc');
                  var toIObject = _require38('./_to-iobject');
                  var toPrimitive = _require38('./_to-primitive');
                  var has = _require38('./_has');
                  var IE8_DOM_DEFINE = _require38('./_ie8-dom-define');
                  var gOPD = Object.getOwnPropertyDescriptor;

                  _exports37.f = _require38('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
                    O = toIObject(O);
                    P = toPrimitive(P, true);
                    if (IE8_DOM_DEFINE) try {
                      return gOPD(O, P);
                    } catch (e) {/* empty */}
                    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-pie.js": function (_require39, _exports38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-pie.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  _exports38.f = {}.propertyIsEnumerable;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_create-property.js": function (_require40, _exports39, _module32) {
                  var $defineProperty = _require40('./_object-dp');
                  var createDesc = _require40('./_property-desc');

                  _module32.exports = function (object, index, value) {
                    if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.object.is.js": function (_require41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.object.is.js                         //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.3.10 Object.is(value1, value2)
                  var $export = _require41('./_export');
                  $export($export.S, 'Object', { is: _require41('./_same-value') });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_same-value.js": function (_require42, _exports40, _module33) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_same-value.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.9 SameValue(x, y)
                  _module33.exports = Object.is || function is(x, y) {
                    // eslint-disable-next-line no-self-compare
                    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.function.name.js": function (_require43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.function.name.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var dP = _require43('./_object-dp').f;
                  var FProto = Function.prototype;
                  var nameRE = /^\s*function ([^ (]*)/;
                  var NAME = 'name';

                  // 19.2.4.2 name
                  NAME in FProto || _require43('./_descriptors') && dP(FProto, NAME, {
                    configurable: true,
                    get: function () {
                      try {
                        return ('' + this).match(nameRE)[1];
                      } catch (e) {
                        return '';
                      }
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.number.is-finite.js": function (_require44) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.number.is-finite.js                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 20.1.2.2 Number.isFinite(number)
                  var $export = _require44('./_export');
                  var _isFinite = _require44('./_global').isFinite;

                  $export($export.S, 'Number', {
                    isFinite: function isFinite(it) {
                      return typeof it == 'number' && _isFinite(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es6.number.is-nan.js": function (_require45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es6.number.is-nan.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 20.1.2.4 Number.isNaN(number)
                  var $export = _require45('./_export');

                  $export($export.S, 'Number', {
                    isNaN: function isNaN(number) {
                      // eslint-disable-next-line no-self-compare
                      return number != number;
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.array.flatten.js": function (_require46) {
                  // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
                  var $export = _require46('./_export');
                  var flattenIntoArray = _require46('./_flatten-into-array');
                  var toObject = _require46('./_to-object');
                  var toLength = _require46('./_to-length');
                  var toInteger = _require46('./_to-integer');
                  var arraySpeciesCreate = _require46('./_array-species-create');

                  $export($export.P, 'Array', {
                    flatten: function flatten() /* depthArg = 1 */{
                      var depthArg = arguments[0];
                      var O = toObject(this);
                      var sourceLen = toLength(O.length);
                      var A = arraySpeciesCreate(O, 0);
                      flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
                      return A;
                    }
                  });

                  _require46('./_add-to-unscopables')('flatten');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_flatten-into-array.js": function (_require47, _exports41, _module34) {
                  // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
                  var isArray = _require47('./_is-array');
                  var isObject = _require47('./_is-object');
                  var toLength = _require47('./_to-length');
                  var ctx = _require47('./_ctx');
                  var IS_CONCAT_SPREADABLE = _require47('./_wks')('isConcatSpreadable');

                  function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
                    var targetIndex = start;
                    var sourceIndex = 0;
                    var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
                    var element, spreadable;

                    while (sourceIndex < sourceLen) {
                      if (sourceIndex in source) {
                        element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

                        spreadable = false;
                        if (isObject(element)) {
                          spreadable = element[IS_CONCAT_SPREADABLE];
                          spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
                        }

                        if (spreadable && depth > 0) {
                          targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
                        } else {
                          if (targetIndex >= 0x1fffffffffffff) throw TypeError();
                          target[targetIndex] = element;
                        }

                        targetIndex++;
                      }
                      sourceIndex++;
                    }
                    return targetIndex;
                  }

                  _module34.exports = flattenIntoArray;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_is-array.js": function (_require48, _exports42, _module35) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_is-array.js                             //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.2.2 IsArray(argument)
                  var cof = _require48('./_cof');
                  _module35.exports = Array.isArray || function isArray(arg) {
                    return cof(arg) == 'Array';
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_wks.js": function (_require49, _exports43, _module36) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_wks.js                                  //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var store = _require49('./_shared')('wks');
                  var uid = _require49('./_uid');
                  var Symbol = _require49('./_global').Symbol;
                  var USE_SYMBOL = typeof Symbol == 'function';

                  var $exports = _module36.exports = function (name) {
                    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
                  };

                  $exports.store = store;

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_to-object.js": function (_require50, _exports44, _module37) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_to-object.js                            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 7.1.13 ToObject(argument)
                  var defined = _require50('./_defined');
                  _module37.exports = function (it) {
                    return Object(defined(it));
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-species-create.js": function (_require51, _exports45, _module38) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-species-create.js                 //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
                  var speciesConstructor = _require51('./_array-species-constructor');

                  _module38.exports = function (original, length) {
                    return new (speciesConstructor(original))(length);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_array-species-constructor.js": function (_require52, _exports46, _module39) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_array-species-constructor.js            //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var isObject = _require52('./_is-object');
                  var isArray = _require52('./_is-array');
                  var SPECIES = _require52('./_wks')('species');

                  _module39.exports = function (original) {
                    var C;
                    if (isArray(original)) {
                      C = original.constructor;
                      // cross-realm fallback
                      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                      if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                      }
                    }return C === undefined ? Array : C;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_add-to-unscopables.js": function (_require53, _exports47, _module40) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_add-to-unscopables.js                   //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 22.1.3.31 Array.prototype[@@unscopables]
                  var UNSCOPABLES = _require53('./_wks')('unscopables');
                  var ArrayProto = Array.prototype;
                  if (ArrayProto[UNSCOPABLES] == undefined) _require53('./_hide')(ArrayProto, UNSCOPABLES, {});
                  _module40.exports = function (key) {
                    ArrayProto[UNSCOPABLES][key] = true;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.array.flat-map.js": function (_require54) {
                  // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
                  var $export = _require54('./_export');
                  var flattenIntoArray = _require54('./_flatten-into-array');
                  var toObject = _require54('./_to-object');
                  var toLength = _require54('./_to-length');
                  var aFunction = _require54('./_a-function');
                  var arraySpeciesCreate = _require54('./_array-species-create');

                  $export($export.P, 'Array', {
                    flatMap: function flatMap(callbackfn /* , thisArg */) {
                      var O = toObject(this);
                      var sourceLen, A;
                      aFunction(callbackfn);
                      sourceLen = toLength(O.length);
                      A = arraySpeciesCreate(O, 0);
                      flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
                      return A;
                    }
                  });

                  _require54('./_add-to-unscopables')('flatMap');

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.object.values.js": function (_require55) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.values.js                     //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-values-entries
                  var $export = _require55('./_export');
                  var $values = _require55('./_object-to-array')(false);

                  $export($export.S, 'Object', {
                    values: function values(it) {
                      return $values(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-to-array.js": function (_require56, _exports48, _module41) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-to-array.js                      //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var getKeys = _require56('./_object-keys');
                  var toIObject = _require56('./_to-iobject');
                  var isEnum = _require56('./_object-pie').f;
                  _module41.exports = function (isEntries) {
                    return function (it) {
                      var O = toIObject(it);
                      var keys = getKeys(O);
                      var length = keys.length;
                      var i = 0;
                      var result = [];
                      var key;
                      while (length > i) if (isEnum.call(O, key = keys[i++])) {
                        result.push(isEntries ? [key, O[key]] : O[key]);
                      }return result;
                    };
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_object-keys.js": function (_require57, _exports49, _module42) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_object-keys.js                          //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
                  var $keys = _require57('./_object-keys-internal');
                  var enumBugKeys = _require57('./_enum-bug-keys');

                  _module42.exports = Object.keys || function keys(O) {
                    return $keys(O, enumBugKeys);
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.object.entries.js": function (_require58) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/es7.object.entries.js                    //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-object-values-entries
                  var $export = _require58('./_export');
                  var $entries = _require58('./_object-to-array')(true);

                  $export($export.S, 'Object', {
                    entries: function entries(it) {
                      return $entries(it);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.string.pad-start.js": function (_require59) {
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var $export = _require59('./_export');
                  var $pad = _require59('./_string-pad');
                  var userAgent = _require59('./_user-agent');

                  // https://github.com/zloirock/core-js/issues/280
                  $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                    padStart: function padStart(maxLength /* , fillString = ' ' */) {
                      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_string-pad.js": function (_require60, _exports50, _module43) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_string-pad.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var toLength = _require60('./_to-length');
                  var repeat = _require60('./_string-repeat');
                  var defined = _require60('./_defined');

                  _module43.exports = function (that, maxLength, fillString, left) {
                    var S = String(defined(that));
                    var stringLength = S.length;
                    var fillStr = fillString === undefined ? ' ' : String(fillString);
                    var intMaxLength = toLength(maxLength);
                    if (intMaxLength <= stringLength || fillStr == '') return S;
                    var fillLen = intMaxLength - stringLength;
                    var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
                    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
                    return left ? stringFiller + S : S + stringFiller;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_string-repeat.js": function (_require61, _exports51, _module44) {
                  var toInteger = _require61('./_to-integer');
                  var defined = _require61('./_defined');

                  _module44.exports = function repeat(count) {
                    var str = String(defined(this));
                    var res = '';
                    var n = toInteger(count);
                    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
                    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
                    return res;
                  };

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "_user-agent.js": function (_require62, _exports52, _module45) {

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //                                                                                                                     //
                  // node_modules/meteor/ecmascript-runtime-client/node_modules/core-js/modules/_user-agent.js                           //
                  //                                                                                                                     //
                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                  //
                  var global = _require62('./_global');
                  var navigator = global.navigator;

                  _module45.exports = navigator && navigator.userAgent || '';

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                }, "es7.string.pad-end.js": function (_require63) {
                  // https://github.com/tc39/proposal-string-pad-start-end
                  var $export = _require63('./_export');
                  var $pad = _require63('./_string-pad');
                  var userAgent = _require63('./_user-agent');

                  // https://github.com/zloirock/core-js/issues/280
                  $export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
                    padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
                      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
                    }
                  });

                  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                } } } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports = _require2("/node_modules/meteor/ecmascript-runtime-client/modern.js");

  /* Exports */
  Package._define("ecmascript-runtime-client", _exports);
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Base64;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "base64": { "base64.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/base64/base64.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Base64: () => Base64
            });
            // Base 64 encoding
            const BASE_64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            const BASE_64_VALS = Object.create(null);

            const getChar = val => BASE_64_CHARS.charAt(val);

            const getVal = ch => ch === '=' ? -1 : BASE_64_VALS[ch];

            for (let i = 0; i < BASE_64_CHARS.length; i++) {
              BASE_64_VALS[getChar(i)] = i;
            }

            ;

            const encode = array => {
              if (typeof array === "string") {
                const str = array;
                array = newBinary(str.length);

                for (let i = 0; i < str.length; i++) {
                  const ch = str.charCodeAt(i);

                  if (ch > 0xFF) {
                    throw new Error("Not ascii. Base64.encode can only take ascii strings.");
                  }

                  array[i] = ch;
                }
              }

              const answer = [];
              let a = null;
              let b = null;
              let c = null;
              let d = null;

              for (let i = 0; i < array.length; i++) {
                switch (i % 3) {
                  case 0:
                    a = array[i] >> 2 & 0x3F;
                    b = (array[i] & 0x03) << 4;
                    break;

                  case 1:
                    b = b | array[i] >> 4 & 0xF;
                    c = (array[i] & 0xF) << 2;
                    break;

                  case 2:
                    c = c | array[i] >> 6 & 0x03;
                    d = array[i] & 0x3F;
                    answer.push(getChar(a));
                    answer.push(getChar(b));
                    answer.push(getChar(c));
                    answer.push(getChar(d));
                    a = null;
                    b = null;
                    c = null;
                    d = null;
                    break;
                }
              }

              if (a != null) {
                answer.push(getChar(a));
                answer.push(getChar(b));

                if (c == null) {
                  answer.push('=');
                } else {
                  answer.push(getChar(c));
                }

                if (d == null) {
                  answer.push('=');
                }
              }

              return answer.join("");
            }; // XXX This is a weird place for this to live, but it's used both by
            // this package and 'ejson', and we can't put it in 'ejson' without
            // introducing a circular dependency. It should probably be in its own
            // package or as a helper in a package that both 'base64' and 'ejson'
            // use.


            const newBinary = len => {
              if (typeof Uint8Array === 'undefined' || typeof ArrayBuffer === 'undefined') {
                const ret = [];

                for (let i = 0; i < len; i++) {
                  ret.push(0);
                }

                ret.$Uint8ArrayPolyfill = true;
                return ret;
              }

              return new Uint8Array(new ArrayBuffer(len));
            };

            const decode = str => {
              let len = Math.floor(str.length * 3 / 4);

              if (str.charAt(str.length - 1) == '=') {
                len--;

                if (str.charAt(str.length - 2) == '=') {
                  len--;
                }
              }

              const arr = newBinary(len);
              let one = null;
              let two = null;
              let three = null;
              let j = 0;

              for (let i = 0; i < str.length; i++) {
                const c = str.charAt(i);
                const v = getVal(c);

                switch (i % 4) {
                  case 0:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = v << 2;
                    break;

                  case 1:
                    if (v < 0) {
                      throw new Error('invalid base64 string');
                    }

                    one = one | v >> 4;
                    arr[j++] = one;
                    two = (v & 0x0F) << 4;
                    break;

                  case 2:
                    if (v >= 0) {
                      two = two | v >> 2;
                      arr[j++] = two;
                      three = (v & 0x03) << 6;
                    }

                    break;

                  case 3:
                    if (v >= 0) {
                      arr[j++] = three | v;
                    }

                    break;
                }
              }

              return arr;
            };

            const Base64 = {
              encode,
              decode,
              newBinary
            };
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/base64/base64.js");

  /* Exports */
  Package._define("base64", _exports2, {
    Base64: Base64
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Base64 = Package.base64.Base64;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var EJSON;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ejson": { "ejson.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/ejson.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              EJSON: () => EJSON
            });
            let isFunction, isObject, keysOf, lengthOf, hasOwn, convertMapToObject, isArguments, isInfOrNaN, handleError;
            _module.link("./utils", {
              isFunction(v) {
                isFunction = v;
              },

              isObject(v) {
                isObject = v;
              },

              keysOf(v) {
                keysOf = v;
              },

              lengthOf(v) {
                lengthOf = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              convertMapToObject(v) {
                convertMapToObject = v;
              },

              isArguments(v) {
                isArguments = v;
              },

              isInfOrNaN(v) {
                isInfOrNaN = v;
              },

              handleError(v) {
                handleError = v;
              }

            }, 0);

            /**
             * @namespace
             * @summary Namespace for EJSON functions
             */
            const EJSON = {}; // Custom type interface definition

            /**
             * @class CustomType
             * @instanceName customType
             * @memberOf EJSON
             * @summary The interface that a class must satisfy to be able to become an
             * EJSON custom type via EJSON.addType.
             */

            /**
             * @function typeName
             * @memberOf EJSON.CustomType
             * @summary Return the tag used to identify this type.  This must match the
             *          tag used to register this type with
             *          [`EJSON.addType`](#ejson_add_type).
             * @locus Anywhere
             * @instance
             */

            /**
             * @function toJSONValue
             * @memberOf EJSON.CustomType
             * @summary Serialize this instance into a JSON-compatible value.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function clone
             * @memberOf EJSON.CustomType
             * @summary Return a value `r` such that `this.equals(r)` is true, and
             *          modifications to `r` do not affect `this` and vice versa.
             * @locus Anywhere
             * @instance
             */

            /**
             * @function equals
             * @memberOf EJSON.CustomType
             * @summary Return `true` if `other` has a value equal to `this`; `false`
             *          otherwise.
             * @locus Anywhere
             * @param {Object} other Another object to compare this to.
             * @instance
             */

            const customTypes = new Map(); // Add a custom type, using a method of your choice to get to and
            // from a basic JSON-able representation.  The factory argument
            // is a function of JSON-able --> your object
            // The type you add must have:
            // - A toJSONValue() method, so that Meteor can serialize it
            // - a typeName() method, to show how to look it up in our type table.
            // It is okay if these methods are monkey-patched on.
            // EJSON.clone will use toJSONValue and the given factory to produce
            // a clone, but you may specify a method clone() that will be
            // used instead.
            // Similarly, EJSON.equals will use toJSONValue to make comparisons,
            // but you may provide a method equals() instead.

            /**
             * @summary Add a custom datatype to EJSON.
             * @locus Anywhere
             * @param {String} name A tag for your custom type; must be unique among
             *                      custom data types defined in your project, and must
             *                      match the result of your type's `typeName` method.
             * @param {Function} factory A function that deserializes a JSON-compatible
             *                           value into an instance of your type.  This should
             *                           match the serialization performed by your
             *                           type's `toJSONValue` method.
             */

            EJSON.addType = (name, factory) => {
              if (customTypes.has(name)) {
                throw new Error("Type ".concat(name, " already present"));
              }

              customTypes.set(name, factory);
            };

            const builtinConverters = [{
              // Date
              matchJSONValue(obj) {
                return hasOwn(obj, '$date') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return obj instanceof Date;
              },

              toJSONValue(obj) {
                return {
                  $date: obj.getTime()
                };
              },

              fromJSONValue(obj) {
                return new Date(obj.$date);
              }

            }, {
              // RegExp
              matchJSONValue(obj) {
                return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return obj instanceof RegExp;
              },

              toJSONValue(regexp) {
                return {
                  $regexp: regexp.source,
                  $flags: regexp.flags
                };
              },

              fromJSONValue(obj) {
                // Replaces duplicate / invalid flags.
                return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.
                .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\1)/g, ''));
              }

            }, {
              // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'
              // which we match.)
              matchJSONValue(obj) {
                return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;
              },

              matchObject: isInfOrNaN,

              toJSONValue(obj) {
                let sign;

                if (Number.isNaN(obj)) {
                  sign = 0;
                } else if (obj === Infinity) {
                  sign = 1;
                } else {
                  sign = -1;
                }

                return {
                  $InfNaN: sign
                };
              },

              fromJSONValue(obj) {
                return obj.$InfNaN / 0;
              }

            }, {
              // Binary
              matchJSONValue(obj) {
                return hasOwn(obj, '$binary') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');
              },

              toJSONValue(obj) {
                return {
                  $binary: Base64.encode(obj)
                };
              },

              fromJSONValue(obj) {
                return Base64.decode(obj.$binary);
              }

            }, {
              // Escaping one level
              matchJSONValue(obj) {
                return hasOwn(obj, '$escape') && lengthOf(obj) === 1;
              },

              matchObject(obj) {
                let match = false;

                if (obj) {
                  const keyCount = lengthOf(obj);

                  if (keyCount === 1 || keyCount === 2) {
                    match = builtinConverters.some(converter => converter.matchJSONValue(obj));
                  }
                }

                return match;
              },

              toJSONValue(obj) {
                const newObj = {};
                keysOf(obj).forEach(key => {
                  newObj[key] = EJSON.toJSONValue(obj[key]);
                });
                return {
                  $escape: newObj
                };
              },

              fromJSONValue(obj) {
                const newObj = {};
                keysOf(obj.$escape).forEach(key => {
                  newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);
                });
                return newObj;
              }

            }, {
              // Custom
              matchJSONValue(obj) {
                return hasOwn(obj, '$type') && hasOwn(obj, '$value') && lengthOf(obj) === 2;
              },

              matchObject(obj) {
                return EJSON._isCustomType(obj);
              },

              toJSONValue(obj) {
                const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());

                return {
                  $type: obj.typeName(),
                  $value: jsonValue
                };
              },

              fromJSONValue(obj) {
                const typeName = obj.$type;

                if (!customTypes.has(typeName)) {
                  throw new Error("Custom EJSON type ".concat(typeName, " is not defined"));
                }

                const converter = customTypes.get(typeName);
                return Meteor._noYieldsAllowed(() => converter(obj.$value));
              }

            }];

            EJSON._isCustomType = obj => obj && isFunction(obj.toJSONValue) && isFunction(obj.typeName) && customTypes.has(obj.typeName());

            EJSON._getTypes = function () {
              let isOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return isOriginal ? customTypes : convertMapToObject(customTypes);
            };

            EJSON._getConverters = () => builtinConverters; // Either return the JSON-compatible version of the argument, or undefined (if
            // the item isn't itself replaceable, but maybe some fields in it are)


            const toJSONValueHelper = item => {
              for (let i = 0; i < builtinConverters.length; i++) {
                const converter = builtinConverters[i];

                if (converter.matchObject(item)) {
                  return converter.toJSONValue(item);
                }
              }

              return undefined;
            }; // for both arrays and objects, in-place modification.


            const adjustTypesToJSONValue = obj => {
              // Is it an atom that we need to adjust?
              if (obj === null) {
                return null;
              }

              const maybeChanged = toJSONValueHelper(obj);

              if (maybeChanged !== undefined) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              } // Iterate over array or object structure.


              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (!isObject(value) && value !== undefined && !isInfOrNaN(value)) {
                  return; // continue
                }

                const changed = toJSONValueHelper(value);

                if (changed) {
                  obj[key] = changed;
                  return; // on to the next key
                } // if we get here, value is an object but not adjustable
                // at this level.  recurse.


                adjustTypesToJSONValue(value);
              });
              return obj;
            };

            EJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;
            /**
             * @summary Serialize an EJSON-compatible value into its plain JSON
             *          representation.
             * @locus Anywhere
             * @param {EJSON} val A value to serialize to plain JSON.
             */

            EJSON.toJSONValue = item => {
              const changed = toJSONValueHelper(item);

              if (changed !== undefined) {
                return changed;
              }

              let newItem = item;

              if (isObject(item)) {
                newItem = EJSON.clone(item);
                adjustTypesToJSONValue(newItem);
              }

              return newItem;
            }; // Either return the argument changed to have the non-json
            // rep of itself (the Object version) or the argument itself.
            // DOES NOT RECURSE.  For actually getting the fully-changed value, use
            // EJSON.fromJSONValue


            const fromJSONValueHelper = value => {
              if (isObject(value) && value !== null) {
                const keys = keysOf(value);

                if (keys.length <= 2 && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {
                  for (let i = 0; i < builtinConverters.length; i++) {
                    const converter = builtinConverters[i];

                    if (converter.matchJSONValue(value)) {
                      return converter.fromJSONValue(value);
                    }
                  }
                }
              }

              return value;
            }; // for both arrays and objects. Tries its best to just
            // use the object you hand it, but may return something
            // different if the object you hand it itself needs changing.


            const adjustTypesFromJSONValue = obj => {
              if (obj === null) {
                return null;
              }

              const maybeChanged = fromJSONValueHelper(obj);

              if (maybeChanged !== obj) {
                return maybeChanged;
              } // Other atoms are unchanged.


              if (!isObject(obj)) {
                return obj;
              }

              keysOf(obj).forEach(key => {
                const value = obj[key];

                if (isObject(value)) {
                  const changed = fromJSONValueHelper(value);

                  if (value !== changed) {
                    obj[key] = changed;
                    return;
                  } // if we get here, value is an object but not adjustable
                  // at this level.  recurse.


                  adjustTypesFromJSONValue(value);
                }
              });
              return obj;
            };

            EJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;
            /**
             * @summary Deserialize an EJSON value from its plain JSON representation.
             * @locus Anywhere
             * @param {JSONCompatible} val A value to deserialize into EJSON.
             */

            EJSON.fromJSONValue = item => {
              let changed = fromJSONValueHelper(item);

              if (changed === item && isObject(item)) {
                changed = EJSON.clone(item);
                adjustTypesFromJSONValue(changed);
              }

              return changed;
            };
            /**
             * @summary Serialize a value to a string. For EJSON values, the serialization
             *          fully represents the value. For non-EJSON values, serializes the
             *          same way as `JSON.stringify`.
             * @locus Anywhere
             * @param {EJSON} val A value to stringify.
             * @param {Object} [options]
             * @param {Boolean | Integer | String} options.indent Indents objects and
             * arrays for easy readability.  When `true`, indents by 2 spaces; when an
             * integer, indents by that number of spaces; and when a string, uses the
             * string as the indentation pattern.
             * @param {Boolean} options.canonical When `true`, stringifies keys in an
             *                                    object in sorted order.
             */

            EJSON.stringify = handleError((item, options) => {
              let serialized;
              const json = EJSON.toJSONValue(item);

              if (options && (options.canonical || options.indent)) {
                let canonicalStringify;
                _module.link("./stringify", {
                  default(v) {
                    canonicalStringify = v;
                  }

                }, 1);
                serialized = canonicalStringify(json, options);
              } else {
                serialized = JSON.stringify(json);
              }

              return serialized;
            });
            /**
             * @summary Parse a string into an EJSON value. Throws an error if the string
             *          is not valid EJSON.
             * @locus Anywhere
             * @param {String} str A string to parse into an EJSON value.
             */

            EJSON.parse = item => {
              if (typeof item !== 'string') {
                throw new Error('EJSON.parse argument should be a string');
              }

              return EJSON.fromJSONValue(JSON.parse(item));
            };
            /**
             * @summary Returns true if `x` is a buffer of binary data, as returned from
             *          [`EJSON.newBinary`](#ejson_new_binary).
             * @param {Object} x The variable to check.
             * @locus Anywhere
             */

            EJSON.isBinary = obj => {
              return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);
            };
            /**
             * @summary Return true if `a` and `b` are equal to each other.  Return false
             *          otherwise.  Uses the `equals` method on `a` if present, otherwise
             *          performs a deep comparison.
             * @locus Anywhere
             * @param {EJSON} a
             * @param {EJSON} b
             * @param {Object} [options]
             * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,
             * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`
             * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The
             * default is `false`.
             */

            EJSON.equals = (a, b, options) => {
              let i;
              const keyOrderSensitive = !!(options && options.keyOrderSensitive);

              if (a === b) {
                return true;
              } // This differs from the IEEE spec for NaN equality, b/c we don't want
              // anything ever with a NaN to be poisoned from becoming equal to anything.


              if (Number.isNaN(a) && Number.isNaN(b)) {
                return true;
              } // if either one is falsy, they'd have to be === to be equal


              if (!a || !b) {
                return false;
              }

              if (!(isObject(a) && isObject(b))) {
                return false;
              }

              if (a instanceof Date && b instanceof Date) {
                return a.valueOf() === b.valueOf();
              }

              if (EJSON.isBinary(a) && EJSON.isBinary(b)) {
                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (a[i] !== b[i]) {
                    return false;
                  }
                }

                return true;
              }

              if (isFunction(a.equals)) {
                return a.equals(b, options);
              }

              if (isFunction(b.equals)) {
                return b.equals(a, options);
              }

              if (a instanceof Array) {
                if (!(b instanceof Array)) {
                  return false;
                }

                if (a.length !== b.length) {
                  return false;
                }

                for (i = 0; i < a.length; i++) {
                  if (!EJSON.equals(a[i], b[i], options)) {
                    return false;
                  }
                }

                return true;
              } // fallback for custom types that don't implement their own equals


              switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {
                case 1:
                  return false;

                case 2:
                  return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));

                default: // Do nothing

              } // fall back to structural equality of objects


              let ret;
              const aKeys = keysOf(a);
              const bKeys = keysOf(b);

              if (keyOrderSensitive) {
                i = 0;
                ret = aKeys.every(key => {
                  if (i >= bKeys.length) {
                    return false;
                  }

                  if (key !== bKeys[i]) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[bKeys[i]], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              } else {
                i = 0;
                ret = aKeys.every(key => {
                  if (!hasOwn(b, key)) {
                    return false;
                  }

                  if (!EJSON.equals(a[key], b[key], options)) {
                    return false;
                  }

                  i++;
                  return true;
                });
              }

              return ret && i === bKeys.length;
            };
            /**
             * @summary Return a deep copy of `val`.
             * @locus Anywhere
             * @param {EJSON} val A value to copy.
             */

            EJSON.clone = v => {
              let ret;

              if (!isObject(v)) {
                return v;
              }

              if (v === null) {
                return null; // null has typeof "object"
              }

              if (v instanceof Date) {
                return new Date(v.getTime());
              } // RegExps are not really EJSON elements (eg we don't define a serialization
              // for them), but they're immutable anyway, so we can support them in clone.


              if (v instanceof RegExp) {
                return v;
              }

              if (EJSON.isBinary(v)) {
                ret = EJSON.newBinary(v.length);

                for (let i = 0; i < v.length; i++) {
                  ret[i] = v[i];
                }

                return ret;
              }

              if (Array.isArray(v)) {
                return v.map(EJSON.clone);
              }

              if (isArguments(v)) {
                return Array.from(v).map(EJSON.clone);
              } // handle general user-defined typed Objects if they have a clone method


              if (isFunction(v.clone)) {
                return v.clone();
              } // handle other custom types


              if (EJSON._isCustomType(v)) {
                return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);
              } // handle other objects


              ret = {};
              keysOf(v).forEach(key => {
                ret[key] = EJSON.clone(v[key]);
              });
              return ret;
            };
            /**
             * @summary Allocate a new buffer of binary data that EJSON can serialize.
             * @locus Anywhere
             * @param {Number} size The number of bytes of binary data to allocate.
             */
            // EJSON.newBinary is the public documented API for this functionality,
            // but the implementation is in the 'base64' package to avoid
            // introducing a circular dependency. (If the implementation were here,
            // then 'base64' would have to use EJSON.newBinary, and 'ejson' would
            // also have to use 'base64'.)


            EJSON.newBinary = Base64.newBinary;
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "stringify.js": function (_require3, _exports3, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/stringify.js                                                                                 //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Based on json2.js from https://github.com/douglascrockford/JSON-js
            //
            //    json2.js
            //    2012-10-08
            //
            //    Public Domain.
            //
            //    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
            function quote(string) {
              return JSON.stringify(string);
            }

            const str = (key, holder, singleIndent, outerIndent, canonical) => {
              const value = holder[key]; // What happens next depends on the value's type.

              switch (typeof value) {
                case 'string':
                  return quote(value);

                case 'number':
                  // JSON numbers must be finite. Encode non-finite numbers as null.
                  return isFinite(value) ? String(value) : 'null';

                case 'boolean':
                  return String(value);
                // If the type is 'object', we might be dealing with an object or an array or
                // null.

                case 'object':
                  {
                    // Due to a specification blunder in ECMAScript, typeof null is 'object',
                    // so watch out for that case.
                    if (!value) {
                      return 'null';
                    } // Make an array to hold the partial results of stringifying this object
                    // value.


                    const innerIndent = outerIndent + singleIndent;
                    const partial = [];
                    let v; // Is the value an array?

                    if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {
                      // The value is an array. Stringify every element. Use null as a
                      // placeholder for non-JSON values.
                      const length = value.length;

                      for (let i = 0; i < length; i += 1) {
                        partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';
                      } // Join all of the elements together, separated with commas, and wrap
                      // them in brackets.


                      if (partial.length === 0) {
                        v = '[]';
                      } else if (innerIndent) {
                        v = '[\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + ']';
                      } else {
                        v = '[' + partial.join(',') + ']';
                      }

                      return v;
                    } // Iterate through all of the keys in the object.


                    let keys = Object.keys(value);

                    if (canonical) {
                      keys = keys.sort();
                    }

                    keys.forEach(k => {
                      v = str(k, value, singleIndent, innerIndent, canonical);

                      if (v) {
                        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);
                      }
                    }); // Join all of the member texts together, separated with commas,
                    // and wrap them in braces.

                    if (partial.length === 0) {
                      v = '{}';
                    } else if (innerIndent) {
                      v = '{\n' + innerIndent + partial.join(',\n' + innerIndent) + '\n' + outerIndent + '}';
                    } else {
                      v = '{' + partial.join(',') + '}';
                    }

                    return v;
                  }

                default: // Do nothing

              }
            }; // If the JSON object does not yet have a stringify method, give it one.


            const canonicalStringify = (value, options) => {
              // Make a fake root object containing our value under the key of ''.
              // Return the result of stringifying the value.
              const allOptions = Object.assign({
                indent: '',
                canonical: false
              }, options);

              if (allOptions.indent === true) {
                allOptions.indent = '  ';
              } else if (typeof allOptions.indent === 'number') {
                let newIndent = '';

                for (let i = 0; i < allOptions.indent; i++) {
                  newIndent += ' ';
                }

                allOptions.indent = newIndent;
              }

              return str('', {
                '': value
              }, allOptions.indent, '', allOptions.canonical);
            };

            _module2.exportDefault(canonicalStringify);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function (_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                             //
            // packages/ejson/utils.js                                                                                     //
            //                                                                                                             //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              isFunction: () => isFunction,
              isObject: () => isObject,
              keysOf: () => keysOf,
              lengthOf: () => lengthOf,
              hasOwn: () => hasOwn,
              convertMapToObject: () => convertMapToObject,
              isArguments: () => isArguments,
              isInfOrNaN: () => isInfOrNaN,
              checkError: () => checkError,
              handleError: () => handleError
            });

            const isFunction = fn => typeof fn === 'function';

            const isObject = fn => typeof fn === 'object';

            const keysOf = obj => Object.keys(obj);

            const lengthOf = obj => Object.keys(obj).length;

            const hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);

            const convertMapToObject = map => Array.from(map).reduce((acc, _ref) => {
              let [key, value] = _ref;
              // reassign to not create new object
              acc[key] = value;
              return acc;
            }, {});

            const isArguments = obj => obj != null && hasOwn(obj, 'callee');

            const isInfOrNaN = obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;

            const checkError = {
              maxStack: msgError => new RegExp('Maximum call stack size exceeded', 'g').test(msgError)
            };

            const handleError = fn => function () {
              try {
                return fn.apply(this, arguments);
              } catch (error) {
                const isMaxStack = checkError.maxStack(error.message);

                if (isMaxStack) {
                  throw new Error('Converting circular structure to JSON');
                }

                throw error;
              }
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ejson/ejson.js");

  /* Exports */
  Package._define("ejson", _exports2, {
    EJSON: EJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DiffSequence;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "diff-sequence": { "diff.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/diff-sequence/diff.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              DiffSequence: () => DiffSequence
            });
            const DiffSequence = {};
            const hasOwn = Object.prototype.hasOwnProperty;

            function isObjEmpty(obj) {
              for (let key in Object(obj)) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            } // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            DiffSequence.diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {
              if (ordered) DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);else DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);
            };

            DiffSequence.diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;

              if (observer.movedBefore) {
                throw new Error("_diffQueryUnordered called with a movedBefore observer!");
              }

              newResults.forEach(function (newDoc, id) {
                var oldDoc = oldResults.get(id);

                if (oldDoc) {
                  if (observer.changed && !EJSON.equals(oldDoc, newDoc)) {
                    var projectedNew = projectionFn(newDoc);
                    var projectedOld = projectionFn(oldDoc);
                    var changedFields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(changedFields)) {
                      observer.changed(id, changedFields);
                    }
                  }
                } else if (observer.added) {
                  var fields = projectionFn(newDoc);
                  delete fields._id;
                  observer.added(newDoc._id, fields);
                }
              });

              if (observer.removed) {
                oldResults.forEach(function (oldDoc, id) {
                  if (!newResults.has(id)) observer.removed(id);
                });
              }
            };

            DiffSequence.diffQueryOrderedChanges = function (old_results, new_results, observer, options) {
              options = options || {};
              var projectionFn = options.projectionFn || EJSON.clone;
              var new_presence_of_id = {};
              new_results.forEach(function (doc) {
                if (new_presence_of_id[doc._id]) Meteor._debug("Duplicate _id in new_results");
                new_presence_of_id[doc._id] = true;
              });
              var old_index_of_id = {};
              old_results.forEach(function (doc, i) {
                if (doc._id in old_index_of_id) Meteor._debug("Duplicate _id in old_results");
                old_index_of_id[doc._id] = i;
              }); // ALGORITHM:
              //
              // To determine which docs should be considered "moved" (and which
              // merely change position because of other docs moving) we run
              // a "longest common subsequence" (LCS) algorithm.  The LCS of the
              // old doc IDs and the new doc IDs gives the docs that should NOT be
              // considered moved.
              // To actually call the appropriate callbacks to get from the old state to the
              // new state:
              // First, we call removed() on all the items that only appear in the old
              // state.
              // Then, once we have the items that should not move, we walk through the new
              // results array group-by-group, where a "group" is a set of items that have
              // moved, anchored on the end by an item that should not move.  One by one, we
              // move each of those elements into place "before" the anchoring end-of-group
              // item, and fire changed events on them if necessary.  Then we fire a changed
              // event on the anchor, and move on to the next group.  There is always at
              // least one group; the last group is anchored by a virtual "null" id at the
              // end.
              // Asymptotically: O(N k) where k is number of ops, or potentially
              // O(N log N) if inner loop of LCS were made to be binary search.
              //////// LCS (longest common sequence, with respect to _id)
              // (see Wikipedia article on Longest Increasing Subsequence,
              // where the LIS is taken of the sequence of old indices of the
              // docs in new_results)
              //
              // unmoved: the output of the algorithm; members of the LCS,
              // in the form of indices into new_results

              var unmoved = []; // max_seq_len: length of LCS found so far

              var max_seq_len = 0; // seq_ends[i]: the index into new_results of the last doc in a
              // common subsequence of length of i+1 <= max_seq_len

              var N = new_results.length;
              var seq_ends = new Array(N); // ptrs:  the common subsequence ending with new_results[n] extends
              // a common subsequence ending with new_results[ptr[n]], unless
              // ptr[n] is -1.

              var ptrs = new Array(N); // virtual sequence of old indices of new results

              var old_idx_seq = function (i_new) {
                return old_index_of_id[new_results[i_new]._id];
              }; // for each item in new_results, use it to extend a common subsequence
              // of length j <= max_seq_len


              for (var i = 0; i < N; i++) {
                if (old_index_of_id[new_results[i]._id] !== undefined) {
                  var j = max_seq_len; // this inner loop would traditionally be a binary search,
                  // but scanning backwards we will likely find a subseq to extend
                  // pretty soon, bounded for example by the total number of ops.
                  // If this were to be changed to a binary search, we'd still want
                  // to scan backwards a bit as an optimization.

                  while (j > 0) {
                    if (old_idx_seq(seq_ends[j - 1]) < old_idx_seq(i)) break;
                    j--;
                  }

                  ptrs[i] = j === 0 ? -1 : seq_ends[j - 1];
                  seq_ends[j] = i;
                  if (j + 1 > max_seq_len) max_seq_len = j + 1;
                }
              } // pull out the LCS/LIS into unmoved


              var idx = max_seq_len === 0 ? -1 : seq_ends[max_seq_len - 1];

              while (idx >= 0) {
                unmoved.push(idx);
                idx = ptrs[idx];
              } // the unmoved item list is built backwards, so fix that


              unmoved.reverse(); // the last group is always anchored by the end of the result list, which is
              // an id of "null"

              unmoved.push(new_results.length);
              old_results.forEach(function (doc) {
                if (!new_presence_of_id[doc._id]) observer.removed && observer.removed(doc._id);
              }); // for each group of things in the new_results that is anchored by an unmoved
              // element, iterate through the things before it.

              var startOfGroup = 0;
              unmoved.forEach(function (endOfGroup) {
                var groupId = new_results[endOfGroup] ? new_results[endOfGroup]._id : null;
                var oldDoc, newDoc, fields, projectedNew, projectedOld;

                for (var i = startOfGroup; i < endOfGroup; i++) {
                  newDoc = new_results[i];

                  if (!hasOwn.call(old_index_of_id, newDoc._id)) {
                    fields = projectionFn(newDoc);
                    delete fields._id;
                    observer.addedBefore && observer.addedBefore(newDoc._id, fields, groupId);
                    observer.added && observer.added(newDoc._id, fields);
                  } else {
                    // moved
                    oldDoc = old_results[old_index_of_id[newDoc._id]];
                    projectedNew = projectionFn(newDoc);
                    projectedOld = projectionFn(oldDoc);
                    fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                    if (!isObjEmpty(fields)) {
                      observer.changed && observer.changed(newDoc._id, fields);
                    }

                    observer.movedBefore && observer.movedBefore(newDoc._id, groupId);
                  }
                }

                if (groupId) {
                  newDoc = new_results[endOfGroup];
                  oldDoc = old_results[old_index_of_id[newDoc._id]];
                  projectedNew = projectionFn(newDoc);
                  projectedOld = projectionFn(oldDoc);
                  fields = DiffSequence.makeChangedFields(projectedNew, projectedOld);

                  if (!isObjEmpty(fields)) {
                    observer.changed && observer.changed(newDoc._id, fields);
                  }
                }

                startOfGroup = endOfGroup + 1;
              });
            }; // General helper for diff-ing two objects.
            // callbacks is an object like so:
            // { leftOnly: function (key, leftValue) {...},
            //   rightOnly: function (key, rightValue) {...},
            //   both: function (key, leftValue, rightValue) {...},
            // }


            DiffSequence.diffObjects = function (left, right, callbacks) {
              Object.keys(left).forEach(key => {
                const leftValue = left[key];

                if (hasOwn.call(right, key)) {
                  callbacks.both && callbacks.both(key, leftValue, right[key]);
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                Object.keys(right).forEach(key => {
                  const rightValue = right[key];

                  if (!hasOwn.call(left, key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.diffMaps = function (left, right, callbacks) {
              left.forEach(function (leftValue, key) {
                if (right.has(key)) {
                  callbacks.both && callbacks.both(key, leftValue, right.get(key));
                } else {
                  callbacks.leftOnly && callbacks.leftOnly(key, leftValue);
                }
              });

              if (callbacks.rightOnly) {
                right.forEach(function (rightValue, key) {
                  if (!left.has(key)) {
                    callbacks.rightOnly(key, rightValue);
                  }
                });
              }
            };

            DiffSequence.makeChangedFields = function (newDoc, oldDoc) {
              var fields = {};
              DiffSequence.diffObjects(oldDoc, newDoc, {
                leftOnly: function (key, value) {
                  fields[key] = undefined;
                },
                rightOnly: function (key, value) {
                  fields[key] = value;
                },
                both: function (key, leftValue, rightValue) {
                  if (!EJSON.equals(leftValue, rightValue)) fields[key] = rightValue;
                }
              });
              return fields;
            };

            DiffSequence.applyChanges = function (doc, changeFields) {
              Object.keys(changeFields).forEach(key => {
                const value = changeFields[key];

                if (typeof value === "undefined") {
                  delete doc[key];
                } else {
                  doc[key] = value;
                }
              });
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/diff-sequence/diff.js");

  /* Exports */
  Package._define("diff-sequence", _exports2, {
    DiffSequence: DiffSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;

  /* Package-scope variables */
  var GeoJSON;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "geojson-utils": { "main.js": function (_require, _exports) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/main.js                                                                          //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _exports.GeoJSON = _require("./geojson-utils.js");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "geojson-utils.js": function (_require2, _exports2, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                         //
            // packages/geojson-utils/geojson-utils.js                                                                 //
            //                                                                                                         //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            (function () {
              var gju = {};

              // Export the geojson object for **CommonJS**
              if (typeof _module !== 'undefined' && _module.exports) {
                _module.exports = gju;
              }

              // adapted from http://www.kevlindev.com/gui/math/intersection/Intersection.js
              gju.lineStringsIntersect = function (l1, l2) {
                var intersects = [];
                for (var i = 0; i <= l1.coordinates.length - 2; ++i) {
                  for (var j = 0; j <= l2.coordinates.length - 2; ++j) {
                    var a1 = {
                      x: l1.coordinates[i][1],
                      y: l1.coordinates[i][0]
                    },
                        a2 = {
                      x: l1.coordinates[i + 1][1],
                      y: l1.coordinates[i + 1][0]
                    },
                        b1 = {
                      x: l2.coordinates[j][1],
                      y: l2.coordinates[j][0]
                    },
                        b2 = {
                      x: l2.coordinates[j + 1][1],
                      y: l2.coordinates[j + 1][0]
                    },
                        ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
                        ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
                        u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
                    if (u_b != 0) {
                      var ua = ua_t / u_b,
                          ub = ub_t / u_b;
                      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                        intersects.push({
                          'type': 'Point',
                          'coordinates': [a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)]
                        });
                      }
                    }
                  }
                }
                if (intersects.length == 0) intersects = false;
                return intersects;
              };

              // Bounding Box

              function boundingBoxAroundPolyCoords(coords) {
                var xAll = [],
                    yAll = [];

                for (var i = 0; i < coords[0].length; i++) {
                  xAll.push(coords[0][i][1]);
                  yAll.push(coords[0][i][0]);
                }

                xAll = xAll.sort(function (a, b) {
                  return a - b;
                });
                yAll = yAll.sort(function (a, b) {
                  return a - b;
                });

                return [[xAll[0], yAll[0]], [xAll[xAll.length - 1], yAll[yAll.length - 1]]];
              }

              gju.pointInBoundingBox = function (point, bounds) {
                return !(point.coordinates[1] < bounds[0][0] || point.coordinates[1] > bounds[1][0] || point.coordinates[0] < bounds[0][1] || point.coordinates[0] > bounds[1][1]);
              };

              // Point in Polygon
              // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#Listing the Vertices

              function pnpoly(x, y, coords) {
                var vert = [[0, 0]];

                for (var i = 0; i < coords.length; i++) {
                  for (var j = 0; j < coords[i].length; j++) {
                    vert.push(coords[i][j]);
                  }
                  vert.push([0, 0]);
                }

                var inside = false;
                for (var i = 0, j = vert.length - 1; i < vert.length; j = i++) {
                  if (vert[i][0] > y != vert[j][0] > y && x < (vert[j][1] - vert[i][1]) * (y - vert[i][0]) / (vert[j][0] - vert[i][0]) + vert[i][1]) inside = !inside;
                }

                return inside;
              }

              gju.pointInPolygon = function (p, poly) {
                var coords = poly.type == "Polygon" ? [poly.coordinates] : poly.coordinates;

                var insideBox = false;
                for (var i = 0; i < coords.length; i++) {
                  if (gju.pointInBoundingBox(p, boundingBoxAroundPolyCoords(coords[i]))) insideBox = true;
                }
                if (!insideBox) return false;

                var insidePoly = false;
                for (var i = 0; i < coords.length; i++) {
                  if (pnpoly(p.coordinates[1], p.coordinates[0], coords[i])) insidePoly = true;
                }

                return insidePoly;
              };

              gju.numberToRadius = function (number) {
                return number * Math.PI / 180;
              };

              gju.numberToDegree = function (number) {
                return number * 180 / Math.PI;
              };

              // written with help from @tautologe
              gju.drawCircle = function (radiusInMeters, centerPoint, steps) {
                var center = [centerPoint.coordinates[1], centerPoint.coordinates[0]],
                    dist = radiusInMeters / 1000 / 6371,

                // convert meters to radiant
                radCenter = [gju.numberToRadius(center[0]), gju.numberToRadius(center[1])],
                    steps = steps || 15,

                // 15 sided circle
                poly = [[center[0], center[1]]];
                for (var i = 0; i < steps; i++) {
                  var brng = 2 * Math.PI * i / steps;
                  var lat = Math.asin(Math.sin(radCenter[0]) * Math.cos(dist) + Math.cos(radCenter[0]) * Math.sin(dist) * Math.cos(brng));
                  var lng = radCenter[1] + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(radCenter[0]), Math.cos(dist) - Math.sin(radCenter[0]) * Math.sin(lat));
                  poly[i] = [];
                  poly[i][1] = gju.numberToDegree(lat);
                  poly[i][0] = gju.numberToDegree(lng);
                }
                return {
                  "type": "Polygon",
                  "coordinates": [poly]
                };
              };

              // assumes rectangle starts at lower left point
              gju.rectangleCentroid = function (rectangle) {
                var bbox = rectangle.coordinates[0];
                var xmin = bbox[0][0],
                    ymin = bbox[0][1],
                    xmax = bbox[2][0],
                    ymax = bbox[2][1];
                var xwidth = xmax - xmin;
                var ywidth = ymax - ymin;
                return {
                  'type': 'Point',
                  'coordinates': [xmin + xwidth / 2, ymin + ywidth / 2]
                };
              };

              // from http://www.movable-type.co.uk/scripts/latlong.html
              gju.pointDistance = function (pt1, pt2) {
                var lon1 = pt1.coordinates[0],
                    lat1 = pt1.coordinates[1],
                    lon2 = pt2.coordinates[0],
                    lat2 = pt2.coordinates[1],
                    dLat = gju.numberToRadius(lat2 - lat1),
                    dLon = gju.numberToRadius(lon2 - lon1),
                    a = Math.pow(Math.sin(dLat / 2), 2) + Math.cos(gju.numberToRadius(lat1)) * Math.cos(gju.numberToRadius(lat2)) * Math.pow(Math.sin(dLon / 2), 2),
                    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                // Earth radius is 6371 km
                return 6371 * c * 1000; // returns meters
              },

              // checks if geometry lies entirely within a circle
              // works with Point, LineString, Polygon
              gju.geometryWithinRadius = function (geometry, center, radius) {
                if (geometry.type == 'Point') {
                  return gju.pointDistance(geometry, center) <= radius;
                } else if (geometry.type == 'LineString' || geometry.type == 'Polygon') {
                  var point = {};
                  var coordinates;
                  if (geometry.type == 'Polygon') {
                    // it's enough to check the exterior ring of the Polygon
                    coordinates = geometry.coordinates[0];
                  } else {
                    coordinates = geometry.coordinates;
                  }
                  for (var i in coordinates) {
                    point.coordinates = coordinates[i];
                    if (gju.pointDistance(point, center) > radius) {
                      return false;
                    }
                  }
                }
                return true;
              };

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.area = function (polygon) {
                var area = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  area += p1.x * p2.y;
                  area -= p1.y * p2.x;
                }

                area /= 2;
                return area;
              },

              // adapted from http://paulbourke.net/geometry/polyarea/javascript.txt
              gju.centroid = function (polygon) {
                var f,
                    x = 0,
                    y = 0;
                // TODO: polygon holes at coordinates[1]
                var points = polygon.coordinates[0];
                var j = points.length - 1;
                var p1, p2;

                for (var i = 0; i < points.length; j = i++) {
                  var p1 = {
                    x: points[i][1],
                    y: points[i][0]
                  };
                  var p2 = {
                    x: points[j][1],
                    y: points[j][0]
                  };
                  f = p1.x * p2.y - p2.x * p1.y;
                  x += (p1.x + p2.x) * f;
                  y += (p1.y + p2.y) * f;
                }

                f = gju.area(polygon) * 6;
                return {
                  'type': 'Point',
                  'coordinates': [y / f, x / f]
                };
              }, gju.simplify = function (source, kink) {
                /* source[] array of geojson points */
                /* kink	in metres, kinks above this depth kept  */
                /* kink depth is the height of the triangle abc where a-b and b-c are two consecutive line segments */
                kink = kink || 20;
                source = source.map(function (o) {
                  return {
                    lng: o.coordinates[0],
                    lat: o.coordinates[1]
                  };
                });

                var n_source, n_stack, n_dest, start, end, i, sig;
                var dev_sqr, max_dev_sqr, band_sqr;
                var x12, y12, d12, x13, y13, d13, x23, y23, d23;
                var F = Math.PI / 180.0 * 0.5;
                var index = new Array(); /* aray of indexes of source points to include in the reduced line */
                var sig_start = new Array(); /* indices of start & end of working section */
                var sig_end = new Array();

                /* check for simple cases */

                if (source.length < 3) return source; /* one or two points */

                /* more complex case. initialize stack */

                n_source = source.length;
                band_sqr = kink * 360.0 / (2.0 * Math.PI * 6378137.0); /* Now in degrees */
                band_sqr *= band_sqr;
                n_dest = 0;
                sig_start[0] = 0;
                sig_end[0] = n_source - 1;
                n_stack = 1;

                /* while the stack is not empty  ... */
                while (n_stack > 0) {

                  /* ... pop the top-most entries off the stacks */

                  start = sig_start[n_stack - 1];
                  end = sig_end[n_stack - 1];
                  n_stack--;

                  if (end - start > 1) {
                    /* any intermediate points ? */

                    /* ... yes, so find most deviant intermediate point to
                    either side of line joining start & end points */

                    x12 = source[end].lng() - source[start].lng();
                    y12 = source[end].lat() - source[start].lat();
                    if (Math.abs(x12) > 180.0) x12 = 360.0 - Math.abs(x12);
                    x12 *= Math.cos(F * (source[end].lat() + source[start].lat())); /* use avg lat to reduce lng */
                    d12 = x12 * x12 + y12 * y12;

                    for (i = start + 1, sig = start, max_dev_sqr = -1.0; i < end; i++) {

                      x13 = source[i].lng() - source[start].lng();
                      y13 = source[i].lat() - source[start].lat();
                      if (Math.abs(x13) > 180.0) x13 = 360.0 - Math.abs(x13);
                      x13 *= Math.cos(F * (source[i].lat() + source[start].lat()));
                      d13 = x13 * x13 + y13 * y13;

                      x23 = source[i].lng() - source[end].lng();
                      y23 = source[i].lat() - source[end].lat();
                      if (Math.abs(x23) > 180.0) x23 = 360.0 - Math.abs(x23);
                      x23 *= Math.cos(F * (source[i].lat() + source[end].lat()));
                      d23 = x23 * x23 + y23 * y23;

                      if (d13 >= d12 + d23) dev_sqr = d23;else if (d23 >= d12 + d13) dev_sqr = d13;else dev_sqr = (x13 * y12 - y13 * x12) * (x13 * y12 - y13 * x12) / d12; // solve triangle
                      if (dev_sqr > max_dev_sqr) {
                        sig = i;
                        max_dev_sqr = dev_sqr;
                      }
                    }

                    if (max_dev_sqr < band_sqr) {
                      /* is there a sig. intermediate point ? */
                      /* ... no, so transfer current start point */
                      index[n_dest] = start;
                      n_dest++;
                    } else {
                      /* ... yes, so push two sub-sections on stack for further processing */
                      n_stack++;
                      sig_start[n_stack - 1] = sig;
                      sig_end[n_stack - 1] = end;
                      n_stack++;
                      sig_start[n_stack - 1] = start;
                      sig_end[n_stack - 1] = sig;
                    }
                  } else {
                    /* ... no intermediate points, so transfer current start point */
                    index[n_dest] = start;
                    n_dest++;
                  }
                }

                /* transfer last point */
                index[n_dest] = n_source - 1;
                n_dest++;

                /* make return array */
                var r = new Array();
                for (var i = 0; i < n_dest; i++) r.push(source[index[i]]);

                return r.map(function (o) {
                  return {
                    type: "Point",
                    coordinates: [o.lng, o.lat]
                  };
                });
              };

              // http://www.movable-type.co.uk/scripts/latlong.html#destPoint
              gju.destinationPoint = function (pt, brng, dist) {
                dist = dist / 6371; // convert dist to angular distance in radians
                brng = gju.numberToRadius(brng);

                var lat1 = gju.numberToRadius(pt.coordinates[0]);
                var lon1 = gju.numberToRadius(pt.coordinates[1]);

                var lat2 = Math.asin(Math.sin(lat1) * Math.cos(dist) + Math.cos(lat1) * Math.sin(dist) * Math.cos(brng));
                var lon2 = lon1 + Math.atan2(Math.sin(brng) * Math.sin(dist) * Math.cos(lat1), Math.cos(dist) - Math.sin(lat1) * Math.sin(lat2));
                lon2 = (lon2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180º

                return {
                  'type': 'Point',
                  'coordinates': [gju.numberToDegree(lat2), gju.numberToDegree(lon2)]
                };
              };
            })();

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/geojson-utils/main.js");

  /* Exports */
  Package._define("geojson-utils", _exports3, {
    GeoJSON: GeoJSON
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var IdMap;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "id-map": { "id-map.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                        //
            // packages/id-map/id-map.js                                                              //
            //                                                                                        //
            ////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              IdMap: () => IdMap
            });
            const hasOwn = Object.prototype.hasOwnProperty;

            class IdMap {
              constructor(idStringify, idParse) {
                this.clear();
                this._idStringify = idStringify || JSON.stringify;
                this._idParse = idParse || JSON.parse;
              } // Some of these methods are designed to match methods on OrderedDict, since
              // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.
              // (Conceivably, this should be replaced with "UnorderedDict" with a specific
              // set of methods that overlap between the two.)


              get(id) {
                var key = this._idStringify(id);

                return this._map[key];
              }

              set(id, value) {
                var key = this._idStringify(id);

                this._map[key] = value;
              }

              remove(id) {
                var key = this._idStringify(id);

                delete this._map[key];
              }

              has(id) {
                var key = this._idStringify(id);

                return hasOwn.call(this._map, key);
              }

              empty() {
                for (let key in this._map) {
                  return false;
                }

                return true;
              }

              clear() {
                this._map = Object.create(null);
              } // Iterates over the items in the map. Return `false` to break the loop.


              forEach(iterator) {
                // don't use _.each, because we can't break out of it.
                var keys = Object.keys(this._map);

                for (var i = 0; i < keys.length; i++) {
                  var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));

                  if (breakIfFalse === false) {
                    return;
                  }
                }
              }

              size() {
                return Object.keys(this._map).length;
              }

              setDefault(id, def) {
                var key = this._idStringify(id);

                if (hasOwn.call(this._map, key)) {
                  return this._map[key];
                }

                this._map[key] = def;
                return def;
              } // Assumes that values are EJSON-cloneable, and that we don't need to clone
              // IDs (ie, that nobody is going to mutate an ObjectId).


              clone() {
                var clone = new IdMap(this._idStringify, this._idParse);
                this.forEach(function (value, id) {
                  clone.set(id, EJSON.clone(value));
                });
                return clone;
              }

            }
            ////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/id-map/id-map.js");

  /* Exports */
  Package._define("id-map", _exports2, {
    IdMap: IdMap
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Random;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "random": { "random.js": function (_require) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/random/random.js                                                                                     //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,
            // window.crypto.getRandomValues() in the browser) when available. If these
            // PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically
            // strong, and we seed it with various sources such as the date, Math.random,
            // and window size on the client.  When using crypto.getRandomValues(), our
            // primitive is hexString(), from which we construct fraction(). When using
            // window.crypto.getRandomValues() or alea, the primitive is fraction and we use
            // that to construct hex string.
            if (Meteor.isServer) var nodeCrypto = Npm.require('crypto'); // see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript
            // for a full discussion and Alea implementation.

            var Alea = function () {
              function Mash() {
                var n = 0xefc8249d;

                var mash = function (data) {
                  data = data.toString();

                  for (var i = 0; i < data.length; i++) {
                    n += data.charCodeAt(i);
                    var h = 0.02519603282416938 * n;
                    n = h >>> 0;
                    h -= n;
                    h *= n;
                    n = h >>> 0;
                    h -= n;
                    n += h * 0x100000000; // 2^32
                  }

                  return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
                };

                mash.version = 'Mash 0.9';
                return mash;
              }

              return function (args) {
                var s0 = 0;
                var s1 = 0;
                var s2 = 0;
                var c = 1;

                if (args.length == 0) {
                  args = [+new Date()];
                }

                var mash = Mash();
                s0 = mash(' ');
                s1 = mash(' ');
                s2 = mash(' ');

                for (var i = 0; i < args.length; i++) {
                  s0 -= mash(args[i]);

                  if (s0 < 0) {
                    s0 += 1;
                  }

                  s1 -= mash(args[i]);

                  if (s1 < 0) {
                    s1 += 1;
                  }

                  s2 -= mash(args[i]);

                  if (s2 < 0) {
                    s2 += 1;
                  }
                }

                mash = null;

                var random = function () {
                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32

                  s0 = s1;
                  s1 = s2;
                  return s2 = t - (c = t | 0);
                };

                random.uint32 = function () {
                  return random() * 0x100000000; // 2^32
                };

                random.fract53 = function () {
                  return random() + (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
                };

                random.version = 'Alea 0.9';
                random.args = args;
                return random;
              }(Array.prototype.slice.call(arguments));
            };

            var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";
            var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" + "0123456789-_"; // `type` is one of `RandomGenerator.Type` as defined below.
            //
            // options:
            // - seeds: (required, only for RandomGenerator.Type.ALEA) an array
            //   whose items will be `toString`ed and used as the seed to the Alea
            //   algorithm

            var RandomGenerator = function (type, options) {
              var self = this;
              self.type = type;

              if (!RandomGenerator.Type[type]) {
                throw new Error("Unknown random generator type: " + type);
              }

              if (type === RandomGenerator.Type.ALEA) {
                if (!options.seeds) {
                  throw new Error("No seeds were provided for Alea PRNG");
                }

                self.alea = Alea.apply(null, options.seeds);
              }
            }; // Types of PRNGs supported by the `RandomGenerator` class


            RandomGenerator.Type = {
              // Use Node's built-in `crypto.getRandomBytes` (cryptographically
              // secure but not seedable, runs only on the server). Reverts to
              // `crypto.getPseudoRandomBytes` in the extremely uncommon case that
              // there isn't enough entropy yet
              NODE_CRYPTO: "NODE_CRYPTO",
              // Use non-IE browser's built-in `window.crypto.getRandomValues`
              // (cryptographically secure but not seedable, runs only in the
              // browser).
              BROWSER_CRYPTO: "BROWSER_CRYPTO",
              // Use the *fast*, seedaable and not cryptographically secure
              // Alea algorithm
              ALEA: "ALEA"
            };
            /**
             * @name Random.fraction
             * @summary Return a number between 0 and 1, like `Math.random`.
             * @locus Anywhere
             */

            RandomGenerator.prototype.fraction = function () {
              var self = this;

              if (self.type === RandomGenerator.Type.ALEA) {
                return self.alea();
              } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                var numerator = parseInt(self.hexString(8), 16);
                return numerator * 2.3283064365386963e-10; // 2^-32
              } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {
                var array = new Uint32Array(1);
                window.crypto.getRandomValues(array);
                return array[0] * 2.3283064365386963e-10; // 2^-32
              } else {
                throw new Error('Unknown random generator type: ' + self.type);
              }
            };
            /**
             * @name Random.hexString
             * @summary Return a random string of `n` hexadecimal digits.
             * @locus Anywhere
             * @param {Number} n Length of the string
             */

            RandomGenerator.prototype.hexString = function (digits) {
              var self = this;

              if (self.type === RandomGenerator.Type.NODE_CRYPTO) {
                var numBytes = Math.ceil(digits / 2);
                var bytes; // Try to get cryptographically strong randomness. Fall back to
                // non-cryptographically strong if not available.

                try {
                  bytes = nodeCrypto.randomBytes(numBytes);
                } catch (e) {
                  // XXX should re-throw any error except insufficient entropy
                  bytes = nodeCrypto.pseudoRandomBytes(numBytes);
                }

                var result = bytes.toString("hex"); // If the number of digits is odd, we'll have generated an extra 4 bits
                // of randomness, so we need to trim the last digit.

                return result.substring(0, digits);
              } else {
                return this._randomString(digits, "0123456789abcdef");
              }
            };

            RandomGenerator.prototype._randomString = function (charsCount, alphabet) {
              var self = this;
              var digits = [];

              for (var i = 0; i < charsCount; i++) {
                digits[i] = self.choice(alphabet);
              }

              return digits.join("");
            };
            /**
             * @name Random.id
             * @summary Return a unique identifier, such as `"Jjwjg6gouWLXhMGKW"`, that is
             * likely to be unique in the whole world.
             * @locus Anywhere
             * @param {Number} [n] Optional length of the identifier in characters
             *   (defaults to 17)
             */

            RandomGenerator.prototype.id = function (charsCount) {
              var self = this; // 17 characters is around 96 bits of entropy, which is the amount of
              // state in the Alea PRNG.

              if (charsCount === undefined) charsCount = 17;
              return self._randomString(charsCount, UNMISTAKABLE_CHARS);
            };
            /**
             * @name Random.secret
             * @summary Return a random string of printable characters with 6 bits of
             * entropy per character. Use `Random.secret` for security-critical secrets
             * that are intended for machine, rather than human, consumption.
             * @locus Anywhere
             * @param {Number} [n] Optional length of the secret string (defaults to 43
             *   characters, or 256 bits of entropy)
             */

            RandomGenerator.prototype.secret = function (charsCount) {
              var self = this; // Default to 256 bits of entropy, or 43 characters at 6 bits per
              // character.

              if (charsCount === undefined) charsCount = 43;
              return self._randomString(charsCount, BASE64_CHARS);
            };
            /**
             * @name Random.choice
             * @summary Return a random element of the given array or string.
             * @locus Anywhere
             * @param {Array|String} arrayOrString Array or string to choose from
             */

            RandomGenerator.prototype.choice = function (arrayOrString) {
              var index = Math.floor(this.fraction() * arrayOrString.length);
              if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);else return arrayOrString[index];
            }; // instantiate RNG.  Heuristically collect entropy from various sources when a
            // cryptographic PRNG isn't available.
            // client sources


            var height = typeof window !== 'undefined' && window.innerHeight || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientHeight || typeof document !== 'undefined' && document.body && document.body.clientHeight || 1;
            var width = typeof window !== 'undefined' && window.innerWidth || typeof document !== 'undefined' && document.documentElement && document.documentElement.clientWidth || typeof document !== 'undefined' && document.body && document.body.clientWidth || 1;
            var agent = typeof navigator !== 'undefined' && navigator.userAgent || "";

            function createAleaGeneratorWithGeneratedSeed() {
              return new RandomGenerator(RandomGenerator.Type.ALEA, {
                seeds: [new Date(), height, width, agent, Math.random()]
              });
            }

            ;

            if (Meteor.isServer) {
              Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);
            } else {
              if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) {
                Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);
              } else {
                // On IE 10 and below, there's no browser crypto API
                // available. Fall back to Alea
                //
                // XXX looks like at the moment, we use Alea in IE 11 as well,
                // which has `window.msCrypto` instead of `window.crypto`.
                Random = createAleaGeneratorWithGeneratedSeed();
              }
            } // Create a non-cryptographically secure PRNG with a given seed (using
            // the Alea algorithm)


            Random.createWithSeeds = function () {
              for (var _len = arguments.length, seeds = new Array(_len), _key = 0; _key < _len; _key++) {
                seeds[_key] = arguments[_key];
              }

              if (seeds.length === 0) {
                throw new Error("No seeds were provided");
              }

              return new RandomGenerator(RandomGenerator.Type.ALEA, {
                seeds: seeds
              });
            }; // Used like `Random`, but much faster and not cryptographically
            // secure


            Random.insecure = createAleaGeneratorWithGeneratedSeed();
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/random/random.js");

  /* Exports */
  Package._define("random", {
    Random: Random
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var IdMap = Package['id-map'].IdMap;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var hexString, MongoID;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo-id": { "id.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/mongo-id/id.js                                                                   //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              MongoID: () => MongoID
            });
            let EJSON;
            _module.link("meteor/ejson", {
              EJSON(v) {
                EJSON = v;
              }

            }, 0);
            let Random;
            _module.link("meteor/random", {
              Random(v) {
                Random = v;
              }

            }, 1);
            const MongoID = {};

            MongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);

            MongoID.ObjectID = class ObjectID {
              constructor(hexString) {
                //random-based impl of Mongo ObjectID
                if (hexString) {
                  hexString = hexString.toLowerCase();

                  if (!MongoID._looksLikeObjectID(hexString)) {
                    throw new Error('Invalid hexadecimal string for creating an ObjectID');
                  } // meant to work with _.isEqual(), which relies on structural equality


                  this._str = hexString;
                } else {
                  this._str = Random.hexString(24);
                }
              }

              equals(other) {
                return other instanceof MongoID.ObjectID && this.valueOf() === other.valueOf();
              }

              toString() {
                return "ObjectID(\"".concat(this._str, "\")");
              }

              clone() {
                return new MongoID.ObjectID(this._str);
              }

              typeName() {
                return 'oid';
              }

              getTimestamp() {
                return Number.parseInt(this._str.substr(0, 8), 16);
              }

              valueOf() {
                return this._str;
              }

              toJSONValue() {
                return this.valueOf();
              }

              toHexString() {
                return this.valueOf();
              }

            };
            EJSON.addType('oid', str => new MongoID.ObjectID(str));

            MongoID.idStringify = id => {
              if (id instanceof MongoID.ObjectID) {
                return id.valueOf();
              } else if (typeof id === 'string') {
                if (id === '') {
                  return id;
                } else if (id.startsWith('-') || // escape previously dashed strings
                id.startsWith('~') || // escape escaped numbers, true, false
                MongoID._looksLikeObjectID(id) || // escape object-id-form strings
                id.startsWith('{')) {
                  // escape object-form strings, for maybe implementing later
                  return "-".concat(id);
                } else {
                  return id; // other strings go through unchanged.
                }
              } else if (id === undefined) {
                return '-';
              } else if (typeof id === 'object' && id !== null) {
                throw new Error('Meteor does not currently support objects other than ObjectID as ids');
              } else {
                // Numbers, true, false, null
                return "~".concat(JSON.stringify(id));
              }
            };

            MongoID.idParse = id => {
              if (id === '') {
                return id;
              } else if (id === '-') {
                return undefined;
              } else if (id.startsWith('-')) {
                return id.substr(1);
              } else if (id.startsWith('~')) {
                return JSON.parse(id.substr(1));
              } else if (MongoID._looksLikeObjectID(id)) {
                return new MongoID.ObjectID(id);
              } else {
                return id;
              }
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/mongo-id/id.js");

  /* Exports */
  Package._define("mongo-id", _exports2, {
    MongoID: MongoID
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var OrderedDict;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ordered-dict": { "ordered_dict.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                      //
            // packages/ordered-dict/ordered_dict.js                                                                //
            //                                                                                                      //
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              OrderedDict: () => OrderedDict
            });

            // This file defines an ordered dictionary abstraction that is useful for
            // maintaining a dataset backed by observeChanges.  It supports ordering items
            // by specifying the item they now come before.
            // The implementation is a dictionary that contains nodes of a doubly-linked
            // list as its values.
            // constructs a new element struct
            // next and prev are whole elements, not keys.
            function element(key, value, next, prev) {
              return {
                key: key,
                value: value,
                next: next,
                prev: prev
              };
            }

            class OrderedDict {
              constructor() {
                this._dict = Object.create(null);
                this._first = null;
                this._last = null;
                this._size = 0;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                if (typeof args[0] === 'function') {
                  this._stringify = args.shift();
                } else {
                  this._stringify = function (x) {
                    return x;
                  };
                }

                args.forEach(kv => this.putBefore(kv[0], kv[1], null));
              } // the "prefix keys with a space" thing comes from here
              // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649


              _k(key) {
                return " " + this._stringify(key);
              }

              empty() {
                return !this._first;
              }

              size() {
                return this._size;
              }

              _linkEltIn(elt) {
                if (!elt.next) {
                  elt.prev = this._last;
                  if (this._last) this._last.next = elt;
                  this._last = elt;
                } else {
                  elt.prev = elt.next.prev;
                  elt.next.prev = elt;
                  if (elt.prev) elt.prev.next = elt;
                }

                if (this._first === null || this._first === elt.next) this._first = elt;
              }

              _linkEltOut(elt) {
                if (elt.next) elt.next.prev = elt.prev;
                if (elt.prev) elt.prev.next = elt.next;
                if (elt === this._last) this._last = elt.prev;
                if (elt === this._first) this._first = elt.next;
              }

              putBefore(key, item, before) {
                if (this._dict[this._k(key)]) throw new Error("Item " + key + " already present in OrderedDict");
                var elt = before ? element(key, item, this._dict[this._k(before)]) : element(key, item, null);
                if (typeof elt.next === "undefined") throw new Error("could not find item to put this one before");

                this._linkEltIn(elt);

                this._dict[this._k(key)] = elt;
                this._size++;
              }

              append(key, item) {
                this.putBefore(key, item, null);
              }

              remove(key) {
                var elt = this._dict[this._k(key)];

                if (typeof elt === "undefined") throw new Error("Item " + key + " not present in OrderedDict");

                this._linkEltOut(elt);

                this._size--;
                delete this._dict[this._k(key)];
                return elt.value;
              }

              get(key) {
                if (this.has(key)) {
                  return this._dict[this._k(key)].value;
                }
              }

              has(key) {
                return Object.prototype.hasOwnProperty.call(this._dict, this._k(key));
              } // Iterate through the items in this dictionary in order, calling
              // iter(value, key, index) on each one.
              // Stops whenever iter returns OrderedDict.BREAK, or after the last element.


              forEach(iter) {
                let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                var i = 0;
                var elt = this._first;

                while (elt !== null) {
                  var b = iter.call(context, elt.value, elt.key, i);
                  if (b === OrderedDict.BREAK) return;
                  elt = elt.next;
                  i++;
                }
              }

              first() {
                if (this.empty()) {
                  return;
                }

                return this._first.key;
              }

              firstValue() {
                if (this.empty()) {
                  return;
                }

                return this._first.value;
              }

              last() {
                if (this.empty()) {
                  return;
                }

                return this._last.key;
              }

              lastValue() {
                if (this.empty()) {
                  return;
                }

                return this._last.value;
              }

              prev(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.prev) return elt.prev.key;
                }

                return null;
              }

              next(key) {
                if (this.has(key)) {
                  var elt = this._dict[this._k(key)];

                  if (elt.next) return elt.next.key;
                }

                return null;
              }

              moveBefore(key, before) {
                var elt = this._dict[this._k(key)];

                var eltBefore = before ? this._dict[this._k(before)] : null;

                if (typeof elt === "undefined") {
                  throw new Error("Item to move is not present");
                }

                if (typeof eltBefore === "undefined") {
                  throw new Error("Could not find element to move this one before");
                }

                if (eltBefore === elt.next) // no moving necessary
                  return; // remove from its old place

                this._linkEltOut(elt); // patch into its new place


                elt.next = eltBefore;

                this._linkEltIn(elt);
              } // Linear, sadly.


              indexOf(key) {
                var ret = null;
                this.forEach((v, k, i) => {
                  if (this._k(k) === this._k(key)) {
                    ret = i;
                    return OrderedDict.BREAK;
                  }

                  return;
                });
                return ret;
              }

              _checkRep() {
                Object.keys(this._dict).forEach(k => {
                  const v = this._dict[k];

                  if (v.next === v) {
                    throw new Error("Next is a loop");
                  }

                  if (v.prev === v) {
                    throw new Error("Prev is a loop");
                  }
                });
              }

            }

            OrderedDict.BREAK = {
              "break": true
            };
            //////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ordered-dict/ordered_dict.js");

  /* Exports */
  Package._define("ordered-dict", _exports2, {
    OrderedDict: OrderedDict
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Tracker, Deps, computation;

  var _require = meteorInstall({ "node_modules": { "meteor": { "tracker": { "tracker.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/tracker/tracker.js                                                                                        //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /////////////////////////////////////////////////////
            // Package docs at http://docs.meteor.com/#tracker //
            /////////////////////////////////////////////////////

            /**
             * @namespace Tracker
             * @summary The namespace for Tracker-related methods.
             */
            Tracker = {};
            /**
             * @namespace Deps
             * @deprecated
             */

            Deps = Tracker; // http://docs.meteor.com/#tracker_active

            /**
             * @summary True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.
             * @locus Client
             * @type {Boolean}
             */

            Tracker.active = false; // http://docs.meteor.com/#tracker_currentcomputation

            /**
             * @summary The current computation, or `null` if there isn't one.  The current computation is the [`Tracker.Computation`](#tracker_computation) object created by the innermost active call to `Tracker.autorun`, and it's the computation that gains dependencies when reactive data sources are accessed.
             * @locus Client
             * @type {Tracker.Computation}
             */

            Tracker.currentComputation = null;

            function setCurrentComputation(c) {
              Tracker.currentComputation = c;
              Tracker.active = !!c;
            }

            function _debugFunc() {
              // We want this code to work without Meteor, and also without
              // "console" (which is technically non-standard and may be missing
              // on some browser we come across, like it was on IE 7).
              //
              // Lazy evaluation because `Meteor` does not exist right away.(??)
              return typeof Meteor !== "undefined" ? Meteor._debug : typeof console !== "undefined" && console.error ? function () {
                console.error.apply(console, arguments);
              } : function () {};
            }

            function _maybeSuppressMoreLogs(messagesLength) {
              // Sometimes when running tests, we intentionally suppress logs on expected
              // printed errors. Since the current implementation of _throwOrLog can log
              // multiple separate log messages, suppress all of them if at least one suppress
              // is expected as we still want them to count as one.
              if (typeof Meteor !== "undefined") {
                if (Meteor._suppressed_log_expected()) {
                  Meteor._suppress_log(messagesLength - 1);
                }
              }
            }

            function _throwOrLog(from, e) {
              if (throwFirstError) {
                throw e;
              } else {
                var printArgs = ["Exception from Tracker " + from + " function:"];

                if (e.stack && e.message && e.name) {
                  var idx = e.stack.indexOf(e.message);

                  if (idx < 0 || idx > e.name.length + 2) {
                    // check for "Error: "
                    // message is not part of the stack
                    var message = e.name + ": " + e.message;
                    printArgs.push(message);
                  }
                }

                printArgs.push(e.stack);

                _maybeSuppressMoreLogs(printArgs.length);

                for (var i = 0; i < printArgs.length; i++) {
                  _debugFunc()(printArgs[i]);
                }
              }
            } // Takes a function `f`, and wraps it in a `Meteor._noYieldsAllowed`
            // block if we are running on the server. On the client, returns the
            // original function (since `Meteor._noYieldsAllowed` is a
            // no-op). This has the benefit of not adding an unnecessary stack
            // frame on the client.


            function withNoYieldsAllowed(f) {
              if (typeof Meteor === 'undefined' || Meteor.isClient) {
                return f;
              } else {
                return function () {
                  var args = arguments;

                  Meteor._noYieldsAllowed(function () {
                    f.apply(null, args);
                  });
                };
              }
            }

            var nextId = 1; // computations whose callbacks we should call at flush time

            var pendingComputations = []; // `true` if a Tracker.flush is scheduled, or if we are in Tracker.flush now

            var willFlush = false; // `true` if we are in Tracker.flush now

            var inFlush = false; // `true` if we are computing a computation now, either first time
            // or recompute.  This matches Tracker.active unless we are inside
            // Tracker.nonreactive, which nullfies currentComputation even though
            // an enclosing computation may still be running.

            var inCompute = false; // `true` if the `_throwFirstError` option was passed in to the call
            // to Tracker.flush that we are in. When set, throw rather than log the
            // first error encountered while flushing. Before throwing the error,
            // finish flushing (from a finally block), logging any subsequent
            // errors.

            var throwFirstError = false;
            var afterFlushCallbacks = [];

            function requireFlush() {
              if (!willFlush) {
                // We want this code to work without Meteor, see debugFunc above
                if (typeof Meteor !== "undefined") Meteor._setImmediate(Tracker._runFlush);else setTimeout(Tracker._runFlush, 0);
                willFlush = true;
              }
            } // Tracker.Computation constructor is visible but private
            // (throws an error if you try to call it)


            var constructingComputation = false; //
            // http://docs.meteor.com/#tracker_computation

            /**
             * @summary A Computation object represents code that is repeatedly rerun
             * in response to
             * reactive data changes. Computations don't have return values; they just
             * perform actions, such as rerendering a template on the screen. Computations
             * are created using Tracker.autorun. Use stop to prevent further rerunning of a
             * computation.
             * @instancename computation
             */

            Tracker.Computation = class Computation {
              constructor(f, parent, onError) {
                if (!constructingComputation) throw new Error("Tracker.Computation constructor is private; use Tracker.autorun");
                constructingComputation = false; // http://docs.meteor.com/#computation_stopped

                /**
                 * @summary True if this computation has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  stopped
                 */

                this.stopped = false; // http://docs.meteor.com/#computation_invalidated

                /**
                 * @summary True if this computation has been invalidated (and not yet rerun), or if it has been stopped.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  invalidated
                 * @type {Boolean}
                 */

                this.invalidated = false; // http://docs.meteor.com/#computation_firstrun

                /**
                 * @summary True during the initial run of the computation at the time `Tracker.autorun` is called, and false on subsequent reruns and at other times.
                 * @locus Client
                 * @memberOf Tracker.Computation
                 * @instance
                 * @name  firstRun
                 * @type {Boolean}
                 */

                this.firstRun = true;
                this._id = nextId++;
                this._onInvalidateCallbacks = [];
                this._onStopCallbacks = []; // the plan is at some point to use the parent relation
                // to constrain the order that computations are processed

                this._parent = parent;
                this._func = f;
                this._onError = onError;
                this._recomputing = false;
                var errored = true;

                try {
                  this._compute();

                  errored = false;
                } finally {
                  this.firstRun = false;
                  if (errored) this.stop();
                }
              } // http://docs.meteor.com/#computation_oninvalidate

              /**
               * @summary Registers `callback` to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated.  The callback is run exactly once and not upon future invalidations unless `onInvalidate` is called again after the computation becomes valid again.
               * @locus Client
               * @param {Function} callback Function to be called on invalidation. Receives one argument, the computation that was invalidated.
               */

              onInvalidate(f) {
                if (typeof f !== 'function') throw new Error("onInvalidate requires a function");

                if (this.invalidated) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onInvalidateCallbacks.push(f);
                }
              }
              /**
               * @summary Registers `callback` to run when this computation is stopped, or runs it immediately if the computation is already stopped.  The callback is run after any `onInvalidate` callbacks.
               * @locus Client
               * @param {Function} callback Function to be called on stop. Receives one argument, the computation that was stopped.
               */

              onStop(f) {
                if (typeof f !== 'function') throw new Error("onStop requires a function");

                if (this.stopped) {
                  Tracker.nonreactive(() => {
                    withNoYieldsAllowed(f)(this);
                  });
                } else {
                  this._onStopCallbacks.push(f);
                }
              } // http://docs.meteor.com/#computation_invalidate

              /**
               * @summary Invalidates this computation so that it will be rerun.
               * @locus Client
               */

              invalidate() {
                if (!this.invalidated) {
                  // if we're currently in _recompute(), don't enqueue
                  // ourselves, since we'll rerun immediately anyway.
                  if (!this._recomputing && !this.stopped) {
                    requireFlush();
                    pendingComputations.push(this);
                  }

                  this.invalidated = true; // callbacks can't add callbacks, because
                  // this.invalidated === true.

                  for (var i = 0, f; f = this._onInvalidateCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onInvalidateCallbacks = [];
                }
              } // http://docs.meteor.com/#computation_stop

              /**
               * @summary Prevents this computation from rerunning.
               * @locus Client
               */

              stop() {
                if (!this.stopped) {
                  this.stopped = true;
                  this.invalidate();

                  for (var i = 0, f; f = this._onStopCallbacks[i]; i++) {
                    Tracker.nonreactive(() => {
                      withNoYieldsAllowed(f)(this);
                    });
                  }

                  this._onStopCallbacks = [];
                }
              }

              _compute() {
                this.invalidated = false;
                var previous = Tracker.currentComputation;
                setCurrentComputation(this);
                var previousInCompute = inCompute;
                inCompute = true;

                try {
                  withNoYieldsAllowed(this._func)(this);
                } finally {
                  setCurrentComputation(previous);
                  inCompute = previousInCompute;
                }
              }

              _needsRecompute() {
                return this.invalidated && !this.stopped;
              }

              _recompute() {
                this._recomputing = true;

                try {
                  if (this._needsRecompute()) {
                    try {
                      this._compute();
                    } catch (e) {
                      if (this._onError) {
                        this._onError(e);
                      } else {
                        _throwOrLog("recompute", e);
                      }
                    }
                  }
                } finally {
                  this._recomputing = false;
                }
              }
              /**
               * @summary Process the reactive updates for this computation immediately
               * and ensure that the computation is rerun. The computation is rerun only
               * if it is invalidated.
               * @locus Client
               */

              flush() {
                if (this._recomputing) return;

                this._recompute();
              }
              /**
               * @summary Causes the function inside this computation to run and
               * synchronously process all reactive updtes.
               * @locus Client
               */

              run() {
                this.invalidate();
                this.flush();
              }

            }; //
            // http://docs.meteor.com/#tracker_dependency

            /**
             * @summary A Dependency represents an atomic unit of reactive data that a
             * computation might depend on. Reactive data sources such as Session or
             * Minimongo internally create different Dependency objects for different
             * pieces of data, each of which may be depended on by multiple computations.
             * When the data changes, the computations are invalidated.
             * @class
             * @instanceName dependency
             */

            Tracker.Dependency = class Dependency {
              constructor() {
                this._dependentsById = Object.create(null);
              } // http://docs.meteor.com/#dependency_depend
              //
              // Adds `computation` to this set if it is not already
              // present.  Returns true if `computation` is a new member of the set.
              // If no argument, defaults to currentComputation, or does nothing
              // if there is no currentComputation.

              /**
               * @summary Declares that the current computation (or `fromComputation` if given) depends on `dependency`.  The computation will be invalidated the next time `dependency` changes.
                If there is no current computation and `depend()` is called with no arguments, it does nothing and returns false.
                Returns true if the computation is a new dependent of `dependency` rather than an existing one.
               * @locus Client
               * @param {Tracker.Computation} [fromComputation] An optional computation declared to depend on `dependency` instead of the current computation.
               * @returns {Boolean}
               */

              depend(computation) {
                if (!computation) {
                  if (!Tracker.active) return false;
                  computation = Tracker.currentComputation;
                }

                var id = computation._id;

                if (!(id in this._dependentsById)) {
                  this._dependentsById[id] = computation;
                  computation.onInvalidate(() => {
                    delete this._dependentsById[id];
                  });
                  return true;
                }

                return false;
              } // http://docs.meteor.com/#dependency_changed

              /**
               * @summary Invalidate all dependent computations immediately and remove them as dependents.
               * @locus Client
               */

              changed() {
                for (var id in this._dependentsById) this._dependentsById[id].invalidate();
              } // http://docs.meteor.com/#dependency_hasdependents

              /**
               * @summary True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.
               * @locus Client
               * @returns {Boolean}
               */

              hasDependents() {
                for (var id in this._dependentsById) return true;

                return false;
              }

            }; // http://docs.meteor.com/#tracker_flush

            /**
             * @summary Process all reactive updates immediately and ensure that all invalidated computations are rerun.
             * @locus Client
             */

            Tracker.flush = function (options) {
              Tracker._runFlush({
                finishSynchronously: true,
                throwFirstError: options && options._throwFirstError
              });
            };
            /**
             * @summary True if we are computing a computation now, either first time or recompute.  This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.
             * @locus Client
             * @returns {Boolean}
             */

            Tracker.inFlush = function () {
              return inFlush;
            }; // Run all pending computations and afterFlush callbacks.  If we were not called
            // directly via Tracker.flush, this may return before they're all done to allow
            // the event loop to run a little before continuing.


            Tracker._runFlush = function (options) {
              // XXX What part of the comment below is still true? (We no longer
              // have Spark)
              //
              // Nested flush could plausibly happen if, say, a flush causes
              // DOM mutation, which causes a "blur" event, which runs an
              // app event handler that calls Tracker.flush.  At the moment
              // Spark blocks event handlers during DOM mutation anyway,
              // because the LiveRange tree isn't valid.  And we don't have
              // any useful notion of a nested flush.
              //
              // https://app.asana.com/0/159908330244/385138233856
              if (Tracker.inFlush()) throw new Error("Can't call Tracker.flush while flushing");
              if (inCompute) throw new Error("Can't flush inside Tracker.autorun");
              options = options || {};
              inFlush = true;
              willFlush = true;
              throwFirstError = !!options.throwFirstError;
              var recomputedCount = 0;
              var finishedTry = false;

              try {
                while (pendingComputations.length || afterFlushCallbacks.length) {
                  // recompute all pending computations
                  while (pendingComputations.length) {
                    var comp = pendingComputations.shift();

                    comp._recompute();

                    if (comp._needsRecompute()) {
                      pendingComputations.unshift(comp);
                    }

                    if (!options.finishSynchronously && ++recomputedCount > 1000) {
                      finishedTry = true;
                      return;
                    }
                  }

                  if (afterFlushCallbacks.length) {
                    // call one afterFlush callback, which may
                    // invalidate more computations
                    var func = afterFlushCallbacks.shift();

                    try {
                      func();
                    } catch (e) {
                      _throwOrLog("afterFlush", e);
                    }
                  }
                }

                finishedTry = true;
              } finally {
                if (!finishedTry) {
                  // we're erroring due to throwFirstError being true.
                  inFlush = false; // needed before calling `Tracker.flush()` again
                  // finish flushing

                  Tracker._runFlush({
                    finishSynchronously: options.finishSynchronously,
                    throwFirstError: false
                  });
                }

                willFlush = false;
                inFlush = false;

                if (pendingComputations.length || afterFlushCallbacks.length) {
                  // We're yielding because we ran a bunch of computations and we aren't
                  // required to finish synchronously, so we'd like to give the event loop a
                  // chance. We should flush again soon.
                  if (options.finishSynchronously) {
                    throw new Error("still have more to do?"); // shouldn't happen
                  }

                  setTimeout(requireFlush, 10);
                }
              }
            }; // http://docs.meteor.com/#tracker_autorun
            //
            // Run f(). Record its dependencies. Rerun it whenever the
            // dependencies change.
            //
            // Returns a new Computation, which is also passed to f.
            //
            // Links the computation to the current computation
            // so that it is stopped if the current computation is invalidated.

            /**
             * @callback Tracker.ComputationFunction
             * @param {Tracker.Computation}
             */

            /**
             * @summary Run a function now and rerun it later whenever its dependencies
             * change. Returns a Computation object that can be used to stop or observe the
             * rerunning.
             * @locus Client
             * @param {Tracker.ComputationFunction} runFunc The function to run. It receives
             * one argument: the Computation object that will be returned.
             * @param {Object} [options]
             * @param {Function} options.onError Optional. The function to run when an error
             * happens in the Computation. The only argument it receives is the Error
             * thrown. Defaults to the error being logged to the console.
             * @returns {Tracker.Computation}
             */

            Tracker.autorun = function (f, options) {
              if (typeof f !== 'function') throw new Error('Tracker.autorun requires a function argument');
              options = options || {};
              constructingComputation = true;
              var c = new Tracker.Computation(f, Tracker.currentComputation, options.onError);
              if (Tracker.active) Tracker.onInvalidate(function () {
                c.stop();
              });
              return c;
            }; // http://docs.meteor.com/#tracker_nonreactive
            //
            // Run `f` with no current computation, returning the return value
            // of `f`.  Used to turn off reactivity for the duration of `f`,
            // so that reactive data sources accessed by `f` will not result in any
            // computations being invalidated.

            /**
             * @summary Run a function without tracking dependencies.
             * @locus Client
             * @param {Function} func A function to call immediately.
             */

            Tracker.nonreactive = function (f) {
              var previous = Tracker.currentComputation;
              setCurrentComputation(null);

              try {
                return f();
              } finally {
                setCurrentComputation(previous);
              }
            }; // http://docs.meteor.com/#tracker_oninvalidate

            /**
             * @summary Registers a new [`onInvalidate`](#computation_oninvalidate) callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.
             * @locus Client
             * @param {Function} callback A callback function that will be invoked as `func(c)`, where `c` is the computation on which the callback is registered.
             */

            Tracker.onInvalidate = function (f) {
              if (!Tracker.active) throw new Error("Tracker.onInvalidate requires a currentComputation");
              Tracker.currentComputation.onInvalidate(f);
            }; // http://docs.meteor.com/#tracker_afterflush

            /**
             * @summary Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun.  The function will be run once and not on subsequent flushes unless `afterFlush` is called again.
             * @locus Client
             * @param {Function} callback A function to call at flush time.
             */

            Tracker.afterFlush = function (f) {
              afterFlushCallbacks.push(f);
              requireFlush();
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/tracker/tracker.js");

  /* Exports */
  Package._define("tracker", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var EJSON = Package.ejson.EJSON;
  var GeoJSON = Package['geojson-utils'].GeoJSON;
  var IdMap = Package['id-map'].IdMap;
  var MongoID = Package['mongo-id'].MongoID;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var Random = Package.random.Random;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var operand, selectorValue, MinimongoTest, MinimongoError, selector, doc, callback, options, oldResults, a, b, LocalCollection, Minimongo;

  var _require3 = meteorInstall({ "node_modules": { "meteor": { "minimongo": { "minimongo_client.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_client.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.link("./minimongo_common.js");
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require2, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/common.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              hasOwn: () => hasOwn,
              ELEMENT_OPERATORS: () => ELEMENT_OPERATORS,
              compileDocumentSelector: () => compileDocumentSelector,
              equalityElementMatcher: () => equalityElementMatcher,
              expandArraysInBranches: () => expandArraysInBranches,
              isIndexable: () => isIndexable,
              isNumericKey: () => isNumericKey,
              isOperatorObject: () => isOperatorObject,
              makeLookupFunction: () => makeLookupFunction,
              nothingMatcher: () => nothingMatcher,
              pathsToTree: () => pathsToTree,
              populateDocumentWithQueryFields: () => populateDocumentWithQueryFields,
              projectionDetails: () => projectionDetails,
              regexpElementMatcher: () => regexpElementMatcher
            });
            let LocalCollection;
            _module2.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            const hasOwn = Object.prototype.hasOwnProperty;
            const ELEMENT_OPERATORS = {
              $lt: makeInequality(cmpValue => cmpValue < 0),
              $gt: makeInequality(cmpValue => cmpValue > 0),
              $lte: makeInequality(cmpValue => cmpValue <= 0),
              $gte: makeInequality(cmpValue => cmpValue >= 0),
              $mod: {
                compileElementSelector(operand) {
                  if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {
                    throw Error('argument to $mod must be an array of two numbers');
                  } // XXX could require to be ints or round or something


                  const divisor = operand[0];
                  const remainder = operand[1];
                  return value => typeof value === 'number' && value % divisor === remainder;
                }

              },
              $in: {
                compileElementSelector(operand) {
                  if (!Array.isArray(operand)) {
                    throw Error('$in needs an array');
                  }

                  const elementMatchers = operand.map(option => {
                    if (option instanceof RegExp) {
                      return regexpElementMatcher(option);
                    }

                    if (isOperatorObject(option)) {
                      throw Error('cannot nest $ under $in');
                    }

                    return equalityElementMatcher(option);
                  });
                  return value => {
                    // Allow {a: {$in: [null]}} to match when 'a' does not exist.
                    if (value === undefined) {
                      value = null;
                    }

                    return elementMatchers.some(matcher => matcher(value));
                  };
                }

              },
              $size: {
                // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we
                // don't want to consider the element [5,5] in the leaf array [[5,5]] as a
                // possible value.
                dontExpandLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    // Don't ask me why, but by experimentation, this seems to be what Mongo
                    // does.
                    operand = 0;
                  } else if (typeof operand !== 'number') {
                    throw Error('$size needs a number');
                  }

                  return value => Array.isArray(value) && value.length === operand;
                }

              },
              $type: {
                // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should
                // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:
                // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but
                // should *not* include it itself.
                dontIncludeLeafArrays: true,

                compileElementSelector(operand) {
                  if (typeof operand === 'string') {
                    const operandAliasMap = {
                      'double': 1,
                      'string': 2,
                      'object': 3,
                      'array': 4,
                      'binData': 5,
                      'undefined': 6,
                      'objectId': 7,
                      'bool': 8,
                      'date': 9,
                      'null': 10,
                      'regex': 11,
                      'dbPointer': 12,
                      'javascript': 13,
                      'symbol': 14,
                      'javascriptWithScope': 15,
                      'int': 16,
                      'timestamp': 17,
                      'long': 18,
                      'decimal': 19,
                      'minKey': -1,
                      'maxKey': 127
                    };

                    if (!hasOwn.call(operandAliasMap, operand)) {
                      throw Error("unknown string alias for $type: ".concat(operand));
                    }

                    operand = operandAliasMap[operand];
                  } else if (typeof operand === 'number') {
                    if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {
                      throw Error("Invalid numerical $type code: ".concat(operand));
                    }
                  } else {
                    throw Error('argument to $type is not a number or a string');
                  }

                  return value => value !== undefined && LocalCollection._f._type(value) === operand;
                }

              },
              $bitsAllSet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllSet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);
                  };
                }

              },
              $bitsAnySet: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnySet');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);
                  };
                }

              },
              $bitsAllClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAllClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));
                  };
                }

              },
              $bitsAnyClear: {
                compileElementSelector(operand) {
                  const mask = getOperandBitmask(operand, '$bitsAnyClear');
                  return value => {
                    const bitmask = getValueBitmask(value, mask.length);
                    return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);
                  };
                }

              },
              $regex: {
                compileElementSelector(operand, valueSelector) {
                  if (!(typeof operand === 'string' || operand instanceof RegExp)) {
                    throw Error('$regex has to be a string or RegExp');
                  }

                  let regexp;

                  if (valueSelector.$options !== undefined) {
                    // Options passed in $options (even the empty string) always overrides
                    // options in the RegExp object itself.
                    // Be clear that we only support the JS-supported options, not extended
                    // ones (eg, Mongo supports x and s). Ideally we would implement x and s
                    // by transforming the regexp, but not today...
                    if (/[^gim]/.test(valueSelector.$options)) {
                      throw new Error('Only the i, m, and g regexp options are supported');
                    }

                    const source = operand instanceof RegExp ? operand.source : operand;
                    regexp = new RegExp(source, valueSelector.$options);
                  } else if (operand instanceof RegExp) {
                    regexp = operand;
                  } else {
                    regexp = new RegExp(operand);
                  }

                  return regexpElementMatcher(regexp);
                }

              },
              $elemMatch: {
                dontExpandLeafArrays: true,

                compileElementSelector(operand, valueSelector, matcher) {
                  if (!LocalCollection._isPlainObject(operand)) {
                    throw Error('$elemMatch need an object');
                  }

                  const isDocMatcher = !isOperatorObject(Object.keys(operand).filter(key => !hasOwn.call(LOGICAL_OPERATORS, key)).reduce((a, b) => Object.assign(a, {
                    [b]: operand[b]
                  }), {}), true);
                  let subMatcher;

                  if (isDocMatcher) {
                    // This is NOT the same as compileValueSelector(operand), and not just
                    // because of the slightly different calling convention.
                    // {$elemMatch: {x: 3}} means "an element has a field x:3", not
                    // "consists only of a field x:3". Also, regexps and sub-$ are allowed.
                    subMatcher = compileDocumentSelector(operand, matcher, {
                      inElemMatch: true
                    });
                  } else {
                    subMatcher = compileValueSelector(operand, matcher);
                  }

                  return value => {
                    if (!Array.isArray(value)) {
                      return false;
                    }

                    for (let i = 0; i < value.length; ++i) {
                      const arrayElement = value[i];
                      let arg;

                      if (isDocMatcher) {
                        // We can only match {$elemMatch: {b: 3}} against objects.
                        // (We can also match against arrays, if there's numeric indices,
                        // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)
                        if (!isIndexable(arrayElement)) {
                          return false;
                        }

                        arg = arrayElement;
                      } else {
                        // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches
                        // {a: [8]} but not {a: [[8]]}
                        arg = [{
                          value: arrayElement,
                          dontIterate: true
                        }];
                      } // XXX support $near in $elemMatch by propagating $distance?


                      if (subMatcher(arg).result) {
                        return i; // specially understood to mean "use as arrayIndices"
                      }
                    }

                    return false;
                  };
                }

              }
            };
            // Operators that appear at the top level of a document selector.
            const LOGICAL_OPERATORS = {
              $and(subSelector, matcher, inElemMatch) {
                return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));
              },

              $or(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch); // Special case: if there is only one matcher, use it directly, *preserving*
                // any arrayIndices it returns.

                if (matchers.length === 1) {
                  return matchers[0];
                }

                return doc => {
                  const result = matchers.some(fn => fn(doc).result); // $or does NOT set arrayIndices when it has multiple
                  // sub-expressions. (Tested against MongoDB.)

                  return {
                    result
                  };
                };
              },

              $nor(subSelector, matcher, inElemMatch) {
                const matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);
                return doc => {
                  const result = matchers.every(fn => !fn(doc).result); // Never set arrayIndices, because we only match if nothing in particular
                  // 'matched' (and because this is consistent with MongoDB).

                  return {
                    result
                  };
                };
              },

              $where(selectorValue, matcher) {
                // Record that *any* path may be used.
                matcher._recordPathUsed('');

                matcher._hasWhere = true;

                if (!(selectorValue instanceof Function)) {
                  // XXX MongoDB seems to have more complex logic to decide where or or not
                  // to add 'return'; not sure exactly what it is.
                  selectorValue = Function('obj', "return ".concat(selectorValue));
                } // We make the document available as both `this` and `obj`.
                // // XXX not sure what we should do if this throws


                return doc => ({
                  result: selectorValue.call(doc, doc)
                });
              },

              // This is just used as a comment in the query (in MongoDB, it also ends up in
              // query logs); it has no effect on the actual selection.
              $comment() {
                return () => ({
                  result: true
                });
              }

            }; // Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a
            // document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as
            // "match each branched value independently and combine with
            // convertElementMatcherToBranchedMatcher".

            const VALUE_OPERATORS = {
              $eq(operand) {
                return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));
              },

              $not(operand, valueSelector, matcher) {
                return invertBranchedMatcher(compileValueSelector(operand, matcher));
              },

              $ne(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));
              },

              $nin(operand) {
                return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));
              },

              $exists(operand) {
                const exists = convertElementMatcherToBranchedMatcher(value => value !== undefined);
                return operand ? exists : invertBranchedMatcher(exists);
              },

              // $options just provides options for $regex; its logic is inside $regex
              $options(operand, valueSelector) {
                if (!hasOwn.call(valueSelector, '$regex')) {
                  throw Error('$options needs a $regex');
                }

                return everythingMatcher;
              },

              // $maxDistance is basically an argument to $near
              $maxDistance(operand, valueSelector) {
                if (!valueSelector.$near) {
                  throw Error('$maxDistance needs a $near');
                }

                return everythingMatcher;
              },

              $all(operand, valueSelector, matcher) {
                if (!Array.isArray(operand)) {
                  throw Error('$all requires array');
                } // Not sure why, but this seems to be what MongoDB does.


                if (operand.length === 0) {
                  return nothingMatcher;
                }

                const branchedMatchers = operand.map(criterion => {
                  // XXX handle $all/$elemMatch combination
                  if (isOperatorObject(criterion)) {
                    throw Error('no $ expressions in $all');
                  } // This is always a regexp or equality selector.


                  return compileValueSelector(criterion, matcher);
                }); // andBranchedMatchers does NOT require all selectors to return true on the
                // SAME branch.

                return andBranchedMatchers(branchedMatchers);
              },

              $near(operand, valueSelector, matcher, isRoot) {
                if (!isRoot) {
                  throw Error('$near can\'t be inside another $ operator');
                }

                matcher._hasGeoQuery = true; // There are two kinds of geodata in MongoDB: legacy coordinate pairs and
                // GeoJSON. They use different distance metrics, too. GeoJSON queries are
                // marked with a $geometry property, though legacy coordinates can be
                // matched using $geometry.

                let maxDistance, point, distance;

                if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {
                  // GeoJSON "2dsphere" mode.
                  maxDistance = operand.$maxDistance;
                  point = operand.$geometry;

                  distance = value => {
                    // XXX: for now, we don't calculate the actual distance between, say,
                    // polygon and circle. If people care about this use-case it will get
                    // a priority.
                    if (!value) {
                      return null;
                    }

                    if (!value.type) {
                      return GeoJSON.pointDistance(point, {
                        type: 'Point',
                        coordinates: pointToArray(value)
                      });
                    }

                    if (value.type === 'Point') {
                      return GeoJSON.pointDistance(point, value);
                    }

                    return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;
                  };
                } else {
                  maxDistance = valueSelector.$maxDistance;

                  if (!isIndexable(operand)) {
                    throw Error('$near argument must be coordinate pair or GeoJSON');
                  }

                  point = pointToArray(operand);

                  distance = value => {
                    if (!isIndexable(value)) {
                      return null;
                    }

                    return distanceCoordinatePairs(point, value);
                  };
                }

                return branchedValues => {
                  // There might be multiple points in the document that match the given
                  // field. Only one of them needs to be within $maxDistance, but we need to
                  // evaluate all of them and use the nearest one for the implicit sort
                  // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)
                  //
                  // Note: This differs from MongoDB's implementation, where a document will
                  // actually show up *multiple times* in the result set, with one entry for
                  // each within-$maxDistance branching point.
                  const result = {
                    result: false
                  };
                  expandArraysInBranches(branchedValues).every(branch => {
                    // if operation is an update, don't skip branches, just return the first
                    // one (#3599)
                    let curDistance;

                    if (!matcher._isUpdate) {
                      if (!(typeof branch.value === 'object')) {
                        return true;
                      }

                      curDistance = distance(branch.value); // Skip branches that aren't real points or are too far away.

                      if (curDistance === null || curDistance > maxDistance) {
                        return true;
                      } // Skip anything that's a tie.


                      if (result.distance !== undefined && result.distance <= curDistance) {
                        return true;
                      }
                    }

                    result.result = true;
                    result.distance = curDistance;

                    if (branch.arrayIndices) {
                      result.arrayIndices = branch.arrayIndices;
                    } else {
                      delete result.arrayIndices;
                    }

                    return !matcher._isUpdate;
                  });
                  return result;
                };
              }

            }; // NB: We are cheating and using this function to implement 'AND' for both
            // 'document matchers' and 'branched matchers'. They both return result objects
            // but the argument is different: for the former it's a whole doc, whereas for
            // the latter it's an array of 'branched values'.

            function andSomeMatchers(subMatchers) {
              if (subMatchers.length === 0) {
                return everythingMatcher;
              }

              if (subMatchers.length === 1) {
                return subMatchers[0];
              }

              return docOrBranches => {
                const match = {};
                match.result = subMatchers.every(fn => {
                  const subResult = fn(docOrBranches); // Copy a 'distance' number out of the first sub-matcher that has
                  // one. Yes, this means that if there are multiple $near fields in a
                  // query, something arbitrary happens; this appears to be consistent with
                  // Mongo.

                  if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {
                    match.distance = subResult.distance;
                  } // Similarly, propagate arrayIndices from sub-matchers... but to match
                  // MongoDB behavior, this time the *last* sub-matcher with arrayIndices
                  // wins.


                  if (subResult.result && subResult.arrayIndices) {
                    match.arrayIndices = subResult.arrayIndices;
                  }

                  return subResult.result;
                }); // If we didn't actually match, forget any extra metadata we came up with.

                if (!match.result) {
                  delete match.distance;
                  delete match.arrayIndices;
                }

                return match;
              };
            }

            const andDocumentMatchers = andSomeMatchers;
            const andBranchedMatchers = andSomeMatchers;

            function compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {
              if (!Array.isArray(selectors) || selectors.length === 0) {
                throw Error('$and/$or/$nor must be nonempty array');
              }

              return selectors.map(subSelector => {
                if (!LocalCollection._isPlainObject(subSelector)) {
                  throw Error('$or/$and/$nor entries need to be full objects');
                }

                return compileDocumentSelector(subSelector, matcher, {
                  inElemMatch
                });
              });
            } // Takes in a selector that could match a full document (eg, the original
            // selector). Returns a function mapping document->result object.
            //
            // matcher is the Matcher object we are compiling.
            //
            // If this is the root document selector (ie, not wrapped in $and or the like),
            // then isRoot is true. (This is used by $near.)


            function compileDocumentSelector(docSelector, matcher) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              const docMatchers = Object.keys(docSelector).map(key => {
                const subSelector = docSelector[key];

                if (key.substr(0, 1) === '$') {
                  // Outer operators are either logical operators (they recurse back into
                  // this function), or $where.
                  if (!hasOwn.call(LOGICAL_OPERATORS, key)) {
                    throw new Error("Unrecognized logical operator: ".concat(key));
                  }

                  matcher._isSimple = false;
                  return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);
                } // Record this path, but only if we aren't in an elemMatcher, since in an
                // elemMatch this is a path inside an object in an array, not in the doc
                // root.


                if (!options.inElemMatch) {
                  matcher._recordPathUsed(key);
                } // Don't add a matcher if subSelector is a function -- this is to match
                // the behavior of Meteor on the server (inherited from the node mongodb
                // driver), which is to ignore any part of a selector which is a function.


                if (typeof subSelector === 'function') {
                  return undefined;
                }

                const lookUpByIndex = makeLookupFunction(key);
                const valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);
                return doc => valueMatcher(lookUpByIndex(doc));
              }).filter(Boolean);
              return andDocumentMatchers(docMatchers);
            }

            // Takes in a selector that could match a key-indexed value in a document; eg,
            // {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to
            // indicate equality).  Returns a branched matcher: a function mapping
            // [branched value]->result object.
            function compileValueSelector(valueSelector, matcher, isRoot) {
              if (valueSelector instanceof RegExp) {
                matcher._isSimple = false;
                return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));
              }

              if (isOperatorObject(valueSelector)) {
                return operatorBranchedMatcher(valueSelector, matcher, isRoot);
              }

              return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));
            } // Given an element matcher (which evaluates a single value), returns a branched
            // value (which evaluates the element matcher on all the branches and returns a
            // more structured return value possibly including arrayIndices).


            function convertElementMatcherToBranchedMatcher(elementMatcher) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              return branches => {
                const expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);
                const match = {};
                match.result = expanded.some(element => {
                  let matched = elementMatcher(element.value); // Special case for $elemMatch: it means "true, and use this as an array
                  // index if I didn't already have one".

                  if (typeof matched === 'number') {
                    // XXX This code dates from when we only stored a single array index
                    // (for the outermost array). Should we be also including deeper array
                    // indices from the $elemMatch match?
                    if (!element.arrayIndices) {
                      element.arrayIndices = [matched];
                    }

                    matched = true;
                  } // If some element matched, and it's tagged with array indices, include
                  // those indices in our result object.


                  if (matched && element.arrayIndices) {
                    match.arrayIndices = element.arrayIndices;
                  }

                  return matched;
                });
                return match;
              };
            } // Helpers for $near.


            function distanceCoordinatePairs(a, b) {
              const pointA = pointToArray(a);
              const pointB = pointToArray(b);
              return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);
            } // Takes something that is not an operator object and returns an element matcher
            // for equality with that thing.


            function equalityElementMatcher(elementSelector) {
              if (isOperatorObject(elementSelector)) {
                throw Error('Can\'t create equalityValueSelector for operator object');
              } // Special-case: null and undefined are equal (if you got undefined in there
              // somewhere, or if you got it due to some branch being non-existent in the
              // weird special case), even though they aren't with EJSON.equals.
              // undefined or null


              if (elementSelector == null) {
                return value => value == null;
              }

              return value => LocalCollection._f._equal(elementSelector, value);
            }

            function everythingMatcher(docOrBranchedValues) {
              return {
                result: true
              };
            }

            function expandArraysInBranches(branches, skipTheArrays) {
              const branchesOut = [];
              branches.forEach(branch => {
                const thisIsArray = Array.isArray(branch.value); // We include the branch itself, *UNLESS* we it's an array that we're going
                // to iterate and we're told to skip arrays.  (That's right, we include some
                // arrays even skipTheArrays is true: these are arrays that were found via
                // explicit numerical indices.)

                if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {
                  branchesOut.push({
                    arrayIndices: branch.arrayIndices,
                    value: branch.value
                  });
                }

                if (thisIsArray && !branch.dontIterate) {
                  branch.value.forEach((value, i) => {
                    branchesOut.push({
                      arrayIndices: (branch.arrayIndices || []).concat(i),
                      value
                    });
                  });
                }
              });
              return branchesOut;
            }

            // Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.
            function getOperandBitmask(operand, selector) {
              // numeric bitmask
              // You can provide a numeric bitmask to be matched against the operand field.
              // It must be representable as a non-negative 32-bit signed integer.
              // Otherwise, $bitsAllSet will return an error.
              if (Number.isInteger(operand) && operand >= 0) {
                return new Uint8Array(new Int32Array([operand]).buffer);
              } // bindata bitmask
              // You can also use an arbitrarily large BinData instance as a bitmask.


              if (EJSON.isBinary(operand)) {
                return new Uint8Array(operand.buffer);
              } // position list
              // If querying a list of bit positions, each <position> must be a non-negative
              // integer. Bit positions start at 0 from the least significant bit.


              if (Array.isArray(operand) && operand.every(x => Number.isInteger(x) && x >= 0)) {
                const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);
                const view = new Uint8Array(buffer);
                operand.forEach(x => {
                  view[x >> 3] |= 1 << (x & 0x7);
                });
                return view;
              } // bad operand


              throw Error("operand to ".concat(selector, " must be a numeric bitmask (representable as a ") + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');
            }

            function getValueBitmask(value, length) {
              // The field value must be either numerical or a BinData instance. Otherwise,
              // $bits... will not match the current document.
              // numerical
              if (Number.isSafeInteger(value)) {
                // $bits... will not match numerical values that cannot be represented as a
                // signed 64-bit integer. This can be the case if a value is either too
                // large or small to fit in a signed 64-bit integer, or if it has a
                // fractional component.
                const buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));
                let view = new Uint32Array(buffer, 0, 2);
                view[0] = value % ((1 << 16) * (1 << 16)) | 0;
                view[1] = value / ((1 << 16) * (1 << 16)) | 0; // sign extension

                if (value < 0) {
                  view = new Uint8Array(buffer, 2);
                  view.forEach((byte, i) => {
                    view[i] = 0xff;
                  });
                }

                return new Uint8Array(buffer);
              } // bindata


              if (EJSON.isBinary(value)) {
                return new Uint8Array(value.buffer);
              } // no match


              return false;
            } // Actually inserts a key value into the selector document
            // However, this checks there is no ambiguity in setting
            // the value for the given key, throws otherwise


            function insertIntoDocument(document, key, value) {
              Object.keys(document).forEach(existingKey => {
                if (existingKey.length > key.length && existingKey.indexOf("".concat(key, ".")) === 0 || key.length > existingKey.length && key.indexOf("".concat(existingKey, ".")) === 0) {
                  throw new Error("cannot infer query fields to set, both paths '".concat(existingKey, "' and ") + "'".concat(key, "' are matched"));
                } else if (existingKey === key) {
                  throw new Error("cannot infer query fields to set, path '".concat(key, "' is matched twice"));
                }
              });
              document[key] = value;
            } // Returns a branched matcher that matches iff the given matcher does not.
            // Note that this implicitly "deMorganizes" the wrapped function.  ie, it
            // means that ALL branch values need to fail to match innerBranchedMatcher.


            function invertBranchedMatcher(branchedMatcher) {
              return branchValues => {
                // We explicitly choose to strip arrayIndices here: it doesn't make sense to
                // say "update the array element that does not match something", at least
                // in mongo-land.
                return {
                  result: !branchedMatcher(branchValues).result
                };
              };
            }

            function isIndexable(obj) {
              return Array.isArray(obj) || LocalCollection._isPlainObject(obj);
            }

            function isNumericKey(s) {
              return (/^[0-9]+$/.test(s)
              );
            }

            function isOperatorObject(valueSelector, inconsistentOK) {
              if (!LocalCollection._isPlainObject(valueSelector)) {
                return false;
              }

              let theseAreOperators = undefined;
              Object.keys(valueSelector).forEach(selKey => {
                const thisIsOperator = selKey.substr(0, 1) === '$';

                if (theseAreOperators === undefined) {
                  theseAreOperators = thisIsOperator;
                } else if (theseAreOperators !== thisIsOperator) {
                  if (!inconsistentOK) {
                    throw new Error("Inconsistent operator: ".concat(JSON.stringify(valueSelector)));
                  }

                  theseAreOperators = false;
                }
              });
              return !!theseAreOperators; // {} has no operators
            }

            // Helper for $lt/$gt/$lte/$gte.
            function makeInequality(cmpValueComparator) {
              return {
                compileElementSelector(operand) {
                  // Arrays never compare false with non-arrays for any inequality.
                  // XXX This was behavior we observed in pre-release MongoDB 2.5, but
                  //     it seems to have been reverted.
                  //     See https://jira.mongodb.org/browse/SERVER-11444
                  if (Array.isArray(operand)) {
                    return () => false;
                  } // Special case: consider undefined and null the same (so true with
                  // $gte/$lte).


                  if (operand === undefined) {
                    operand = null;
                  }

                  const operandType = LocalCollection._f._type(operand);

                  return value => {
                    if (value === undefined) {
                      value = null;
                    } // Comparisons are never true among things of different type (except
                    // null vs undefined).


                    if (LocalCollection._f._type(value) !== operandType) {
                      return false;
                    }

                    return cmpValueComparator(LocalCollection._f._cmp(value, operand));
                  };
                }

              };
            } // makeLookupFunction(key) returns a lookup function.
            //
            // A lookup function takes in a document and returns an array of matching
            // branches.  If no arrays are found while looking up the key, this array will
            // have exactly one branches (possibly 'undefined', if some segment of the key
            // was not found).
            //
            // If arrays are found in the middle, this can have more than one element, since
            // we 'branch'. When we 'branch', if there are more key segments to look up,
            // then we only pursue branches that are plain objects (not arrays or scalars).
            // This means we can actually end up with no branches!
            //
            // We do *NOT* branch on arrays that are found at the end (ie, at the last
            // dotted member of the key). We just return that array; if you want to
            // effectively 'branch' over the array's values, post-process the lookup
            // function with expandArraysInBranches.
            //
            // Each branch is an object with keys:
            //  - value: the value at the branch
            //  - dontIterate: an optional bool; if true, it means that 'value' is an array
            //    that expandArraysInBranches should NOT expand. This specifically happens
            //    when there is a numeric index in the key, and ensures the
            //    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT
            //    match {a: [[5]]}.
            //  - arrayIndices: if any array indexing was done during lookup (either due to
            //    explicit numeric indices or implicit branching), this will be an array of
            //    the array indices used, from outermost to innermost; it is falsey or
            //    absent if no array index is used. If an explicit numeric index is used,
            //    the index will be followed in arrayIndices by the string 'x'.
            //
            //    Note: arrayIndices is used for two purposes. First, it is used to
            //    implement the '$' modifier feature, which only ever looks at its first
            //    element.
            //
            //    Second, it is used for sort key generation, which needs to be able to tell
            //    the difference between different paths. Moreover, it needs to
            //    differentiate between explicit and implicit branching, which is why
            //    there's the somewhat hacky 'x' entry: this means that explicit and
            //    implicit array lookups will have different full arrayIndices paths. (That
            //    code only requires that different paths have different arrayIndices; it
            //    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices
            //    could contain objects with flags like 'implicit', but I think that only
            //    makes the code surrounding them more complex.)
            //
            //    (By the way, this field ends up getting passed around a lot without
            //    cloning, so never mutate any arrayIndices field/var in this package!)
            //
            //
            // At the top level, you may only pass in a plain object or array.
            //
            // See the test 'minimongo - lookup' for some examples of what lookup functions
            // return.


            function makeLookupFunction(key) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              const parts = key.split('.');
              const firstPart = parts.length ? parts[0] : '';
              const lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);

              const omitUnnecessaryFields = result => {
                if (!result.dontIterate) {
                  delete result.dontIterate;
                }

                if (result.arrayIndices && !result.arrayIndices.length) {
                  delete result.arrayIndices;
                }

                return result;
              }; // Doc will always be a plain object or an array.
              // apply an explicit numeric index, an array.


              return function (doc) {
                let arrayIndices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

                if (Array.isArray(doc)) {
                  // If we're being asked to do an invalid lookup into an array (non-integer
                  // or out-of-bounds), return no results (which is different from returning
                  // a single undefined result, in that `null` equality checks won't match).
                  if (!(isNumericKey(firstPart) && firstPart < doc.length)) {
                    return [];
                  } // Remember that we used this array index. Include an 'x' to indicate that
                  // the previous index came from being considered as an explicit array
                  // index (not branching).


                  arrayIndices = arrayIndices.concat(+firstPart, 'x');
                } // Do our first lookup.


                const firstLevel = doc[firstPart]; // If there is no deeper to dig, return what we found.
                //
                // If what we found is an array, most value selectors will choose to treat
                // the elements of the array as matchable values in their own right, but
                // that's done outside of the lookup function. (Exceptions to this are $size
                // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:
                // [[1, 2]]}.)
                //
                // That said, if we just did an *explicit* array lookup (on doc) to find
                // firstLevel, and firstLevel is an array too, we do NOT want value
                // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.
                // So in that case, we mark the return value as 'don't iterate'.

                if (!lookupRest) {
                  return [omitUnnecessaryFields({
                    arrayIndices,
                    dontIterate: Array.isArray(doc) && Array.isArray(firstLevel),
                    value: firstLevel
                  })];
                } // We need to dig deeper.  But if we can't, because what we've found is not
                // an array or plain object, we're done. If we just did a numeric index into
                // an array, we return nothing here (this is a change in Mongo 2.5 from
                // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,
                // return a single `undefined` (which can, for example, match via equality
                // with `null`).


                if (!isIndexable(firstLevel)) {
                  if (Array.isArray(doc)) {
                    return [];
                  }

                  return [omitUnnecessaryFields({
                    arrayIndices,
                    value: undefined
                  })];
                }

                const result = [];

                const appendToResult = more => {
                  result.push(...more);
                }; // Dig deeper: look up the rest of the parts on whatever we've found.
                // (lookupRest is smart enough to not try to do invalid lookups into
                // firstLevel if it's an array.)


                appendToResult(lookupRest(firstLevel, arrayIndices)); // If we found an array, then in *addition* to potentially treating the next
                // part as a literal integer lookup, we should also 'branch': try to look up
                // the rest of the parts on each array element in parallel.
                //
                // In this case, we *only* dig deeper into array elements that are plain
                // objects. (Recall that we only got this far if we have further to dig.)
                // This makes sense: we certainly don't dig deeper into non-indexable
                // objects. And it would be weird to dig into an array: it's simpler to have
                // a rule that explicit integer indexes only apply to an outer array, not to
                // an array you find after a branching search.
                //
                // In the special case of a numeric part in a *sort selector* (not a query
                // selector), we skip the branching: we ONLY allow the numeric part to mean
                // 'look up this index' in that case, not 'also look up this index in all
                // the elements of the array'.

                if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {
                  firstLevel.forEach((branch, arrayIndex) => {
                    if (LocalCollection._isPlainObject(branch)) {
                      appendToResult(lookupRest(branch, arrayIndices.concat(arrayIndex)));
                    }
                  });
                }

                return result;
              };
            }

            // Object exported only for unit testing.
            // Use it to export private functions to test in Tinytest.
            MinimongoTest = {
              makeLookupFunction
            };

            MinimongoError = function (message) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (typeof message === 'string' && options.field) {
                message += " for field '".concat(options.field, "'");
              }

              const error = new Error(message);
              error.name = 'MinimongoError';
              return error;
            };

            function nothingMatcher(docOrBranchedValues) {
              return {
                result: false
              };
            }

            // Takes an operator object (an object with $ keys) and returns a branched
            // matcher for it.
            function operatorBranchedMatcher(valueSelector, matcher, isRoot) {
              // Each valueSelector works separately on the various branches.  So one
              // operator can match one branch and another can match another branch.  This
              // is OK.
              const operatorMatchers = Object.keys(valueSelector).map(operator => {
                const operand = valueSelector[operator];
                const simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';
                const simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);
                const simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(x => x === Object(x));

                if (!(simpleRange || simpleInclusion || simpleEquality)) {
                  matcher._isSimple = false;
                }

                if (hasOwn.call(VALUE_OPERATORS, operator)) {
                  return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);
                }

                if (hasOwn.call(ELEMENT_OPERATORS, operator)) {
                  const options = ELEMENT_OPERATORS[operator];
                  return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);
                }

                throw new Error("Unrecognized operator: ".concat(operator));
              });
              return andBranchedMatchers(operatorMatchers);
            } // paths - Array: list of mongo style paths
            // newLeafFn - Function: of form function(path) should return a scalar value to
            //                       put into list created for that path
            // conflictFn - Function: of form function(node, path, fullPath) is called
            //                        when building a tree path for 'fullPath' node on
            //                        'path' was already a leaf with a value. Must return a
            //                        conflict resolution.
            // initial tree - Optional Object: starting tree.
            // @returns - Object: tree represented as a set of nested objects


            function pathsToTree(paths, newLeafFn, conflictFn) {
              let root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              paths.forEach(path => {
                const pathArray = path.split('.');
                let tree = root; // use .every just for iteration with break

                const success = pathArray.slice(0, -1).every((key, i) => {
                  if (!hasOwn.call(tree, key)) {
                    tree[key] = {};
                  } else if (tree[key] !== Object(tree[key])) {
                    tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path); // break out of loop if we are failing for this path

                    if (tree[key] !== Object(tree[key])) {
                      return false;
                    }
                  }

                  tree = tree[key];
                  return true;
                });

                if (success) {
                  const lastKey = pathArray[pathArray.length - 1];

                  if (hasOwn.call(tree, lastKey)) {
                    tree[lastKey] = conflictFn(tree[lastKey], path, path);
                  } else {
                    tree[lastKey] = newLeafFn(path);
                  }
                }
              });
              return root;
            }

            // Makes sure we get 2 elements array and assume the first one to be x and
            // the second one to y no matter what user passes.
            // In case user passes { lon: x, lat: y } returns [x, y]
            function pointToArray(point) {
              return Array.isArray(point) ? point.slice() : [point.x, point.y];
            } // Creating a document from an upsert is quite tricky.
            // E.g. this selector: {"$or": [{"b.foo": {"$all": ["bar"]}}]}, should result
            // in: {"b.foo": "bar"}
            // But this selector: {"$or": [{"b": {"foo": {"$all": ["bar"]}}}]} should throw
            // an error
            // Some rules (found mainly with trial & error, so there might be more):
            // - handle all childs of $and (or implicit $and)
            // - handle $or nodes with exactly 1 child
            // - ignore $or nodes with more than 1 child
            // - ignore $nor and $not nodes
            // - throw when a value can not be set unambiguously
            // - every value for $all should be dealt with as separate $eq-s
            // - threat all children of $all as $eq setters (=> set if $all.length === 1,
            //   otherwise throw error)
            // - you can not mix '$'-prefixed keys and non-'$'-prefixed keys
            // - you can only have dotted keys on a root-level
            // - you can not have '$'-prefixed keys more than one-level deep in an object
            // Handles one key/value pair to put in the selector document


            function populateDocumentWithKeyValue(document, key, value) {
              if (value && Object.getPrototypeOf(value) === Object.prototype) {
                populateDocumentWithObject(document, key, value);
              } else if (!(value instanceof RegExp)) {
                insertIntoDocument(document, key, value);
              }
            } // Handles a key, value pair to put in the selector document
            // if the value is an object


            function populateDocumentWithObject(document, key, value) {
              const keys = Object.keys(value);
              const unprefixedKeys = keys.filter(op => op[0] !== '$');

              if (unprefixedKeys.length > 0 || !keys.length) {
                // Literal (possibly empty) object ( or empty object )
                // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields
                if (keys.length !== unprefixedKeys.length) {
                  throw new Error("unknown operator: ".concat(unprefixedKeys[0]));
                }

                validateObject(value, key);
                insertIntoDocument(document, key, value);
              } else {
                Object.keys(value).forEach(op => {
                  const object = value[op];

                  if (op === '$eq') {
                    populateDocumentWithKeyValue(document, key, object);
                  } else if (op === '$all') {
                    // every value for $all should be dealt with as separate $eq-s
                    object.forEach(element => populateDocumentWithKeyValue(document, key, element));
                  }
                });
              }
            } // Fills a document with certain fields from an upsert selector


            function populateDocumentWithQueryFields(query) {
              let document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (Object.getPrototypeOf(query) === Object.prototype) {
                // handle implicit $and
                Object.keys(query).forEach(key => {
                  const value = query[key];

                  if (key === '$and') {
                    // handle explicit $and
                    value.forEach(element => populateDocumentWithQueryFields(element, document));
                  } else if (key === '$or') {
                    // handle $or nodes with exactly 1 child
                    if (value.length === 1) {
                      populateDocumentWithQueryFields(value[0], document);
                    }
                  } else if (key[0] !== '$') {
                    // Ignore other '$'-prefixed logical selectors
                    populateDocumentWithKeyValue(document, key, value);
                  }
                });
              } else {
                // Handle meteor-specific shortcut for selecting _id
                if (LocalCollection._selectorIsId(query)) {
                  insertIntoDocument(document, '_id', query);
                }
              }

              return document;
            }

            function projectionDetails(fields) {
              // Find the non-_id keys (_id is handled specially because it is included
              // unless explicitly excluded). Sort the keys, so that our code to detect
              // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.
              let fieldsKeys = Object.keys(fields).sort(); // If _id is the only field in the projection, do not remove it, since it is
              // required to determine if this is an exclusion or exclusion. Also keep an
              // inclusive _id, since inclusive _id follows the normal rules about mixing
              // inclusive and exclusive fields. If _id is not the only field in the
              // projection and is exclusive, remove it so it can be handled later by a
              // special case, since exclusive _id is always allowed.

              if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {
                fieldsKeys = fieldsKeys.filter(key => key !== '_id');
              }

              let including = null; // Unknown

              fieldsKeys.forEach(keyPath => {
                const rule = !!fields[keyPath];

                if (including === null) {
                  including = rule;
                } // This error message is copied from MongoDB shell


                if (including !== rule) {
                  throw MinimongoError('You cannot currently mix including and excluding fields.');
                }
              });
              const projectionRulesTree = pathsToTree(fieldsKeys, path => including, (node, path, fullPath) => {
                // Check passed projection fields' keys: If you have two rules such as
                // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If
                // that happens, there is a probability you are doing something wrong,
                // framework should notify you about such mistake earlier on cursor
                // compilation step than later during runtime.  Note, that real mongo
                // doesn't do anything about it and the later rule appears in projection
                // project, more priority it takes.
                //
                // Example, assume following in mongo shell:
                // > db.coll.insert({ a: { b: 23, c: 44 } })
                // > db.coll.find({}, { 'a': 1, 'a.b': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23}}
                // > db.coll.find({}, { 'a.b': 1, 'a': 1 })
                // {"_id": ObjectId("520bfe456024608e8ef24af3"), "a": {"b": 23, "c": 44}}
                //
                // Note, how second time the return set of keys is different.
                const currentPath = fullPath;
                const anotherPath = path;
                throw MinimongoError("both ".concat(currentPath, " and ").concat(anotherPath, " found in fields option, ") + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');
              });
              return {
                including,
                tree: projectionRulesTree
              };
            }

            function regexpElementMatcher(regexp) {
              return value => {
                if (value instanceof RegExp) {
                  return value.toString() === regexp.toString();
                } // Regexps only work against strings.


                if (typeof value !== 'string') {
                  return false;
                } // Reset regexp's state to avoid inconsistent matching for objects with the
                // same value on consecutive calls of regexp.test. This happens only if the
                // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for
                // which we should *not* change the lastIndex but MongoDB doesn't support
                // either of these flags.


                regexp.lastIndex = 0;
                return regexp.test(value);
              };
            }

            // Validates the key in a path.
            // Objects that are nested more then 1 level cannot have dotted fields
            // or fields starting with '$'
            function validateKeyInPath(key, path) {
              if (key.includes('.')) {
                throw new Error("The dotted field '".concat(key, "' in '").concat(path, ".").concat(key, " is not valid for storage."));
              }

              if (key[0] === '$') {
                throw new Error("The dollar ($) prefixed field  '".concat(path, ".").concat(key, " is not valid for storage."));
              }
            } // Recursively validates an object that is nested more than one level deep


            function validateObject(object, path) {
              if (object && Object.getPrototypeOf(object) === Object.prototype) {
                Object.keys(object).forEach(key => {
                  validateKeyInPath(key, path);
                  validateObject(object[key], path + '.' + key);
                });
              }
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "cursor.js": function (_require4, _exports4, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/cursor.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              default: () => Cursor
            });
            let LocalCollection;
            _module3.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let hasOwn;
            _module3.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              }

            }, 1);

            class Cursor {
              // don't call this ctor directly.  use LocalCollection.find().
              constructor(collection, selector) {
                let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                this.collection = collection;
                this.sorter = null;
                this.matcher = new Minimongo.Matcher(selector);

                if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                  // stash for fast _id and { _id }
                  this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;
                } else {
                  this._selectorId = undefined;

                  if (this.matcher.hasGeoQuery() || options.sort) {
                    this.sorter = new Minimongo.Sorter(options.sort || []);
                  }
                }

                this.skip = options.skip || 0;
                this.limit = options.limit;
                this.fields = options.fields;
                this._projectionFn = LocalCollection._compileProjection(this.fields || {});
                this._transform = LocalCollection.wrapTransform(options.transform); // by default, queries register w/ Tracker when it is available.

                if (typeof Tracker !== 'undefined') {
                  this.reactive = options.reactive === undefined ? true : options.reactive;
                }
              }
              /**
               * @summary Returns the number of documents that match a query.
               * @memberOf Mongo.Cursor
               * @method  count
               * @param {boolean} [applySkipLimit=true] If set to `false`, the value
               *                                         returned will reflect the total
               *                                         number of matching documents,
               *                                         ignoring any value supplied for
               *                                         limit
               * @instance
               * @locus Anywhere
               * @returns {Number}
               */

              count() {
                let applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                if (this.reactive) {
                  // allow the observe to be unordered
                  this._depend({
                    added: true,
                    removed: true
                  }, true);
                }

                return this._getRawObjects({
                  ordered: true,
                  applySkipLimit
                }).length;
              }
              /**
               * @summary Return all matching documents as an Array.
               * @memberOf Mongo.Cursor
               * @method  fetch
               * @instance
               * @locus Anywhere
               * @returns {Object[]}
               */

              fetch() {
                const result = [];
                this.forEach(doc => {
                  result.push(doc);
                });
                return result;
              }

              [Symbol.iterator]() {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                let index = 0;

                const objects = this._getRawObjects({
                  ordered: true
                });

                return {
                  next: () => {
                    if (index < objects.length) {
                      // This doubles as a clone operation.
                      let element = this._projectionFn(objects[index++]);

                      if (this._transform) element = this._transform(element);
                      return {
                        value: element
                      };
                    }

                    return {
                      done: true
                    };
                  }
                };
              }
              /**
               * @callback IterationCallback
               * @param {Object} doc
               * @param {Number} index
               */

              /**
               * @summary Call `callback` once for each matching document, sequentially and
               *          synchronously.
               * @locus Anywhere
               * @method  forEach
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              forEach(callback, thisArg) {
                if (this.reactive) {
                  this._depend({
                    addedBefore: true,
                    removed: true,
                    changed: true,
                    movedBefore: true
                  });
                }

                this._getRawObjects({
                  ordered: true
                }).forEach((element, i) => {
                  // This doubles as a clone operation.
                  element = this._projectionFn(element);

                  if (this._transform) {
                    element = this._transform(element);
                  }

                  callback.call(thisArg, element, i, this);
                });
              }

              getTransform() {
                return this._transform;
              }
              /**
               * @summary Map callback over all matching documents.  Returns an Array.
               * @locus Anywhere
               * @method map
               * @instance
               * @memberOf Mongo.Cursor
               * @param {IterationCallback} callback Function to call. It will be called
               *                                     with three arguments: the document, a
               *                                     0-based index, and <em>cursor</em>
               *                                     itself.
               * @param {Any} [thisArg] An object which will be the value of `this` inside
               *                        `callback`.
               */

              map(callback, thisArg) {
                const result = [];
                this.forEach((doc, i) => {
                  result.push(callback.call(thisArg, doc, i, this));
                });
                return result;
              } // options to contain:
              //  * callbacks for observe():
              //    - addedAt (document, atIndex)
              //    - added (document)
              //    - changedAt (newDocument, oldDocument, atIndex)
              //    - changed (newDocument, oldDocument)
              //    - removedAt (document, atIndex)
              //    - removed (document)
              //    - movedTo (document, oldIndex, newIndex)
              //
              // attributes available on returned query handle:
              //  * stop(): end updates
              //  * collection: the collection this query is querying
              //
              // iff x is a returned query handle, (x instanceof
              // LocalCollection.ObserveHandle) is true
              //
              // initial results delivered through added callback
              // XXX maybe callbacks should take a list of objects, to expose transactions?
              // XXX maybe support field limiting (to limit what you're notified on)

              /**
               * @summary Watch a query.  Receive callbacks as the result set changes.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observe(options) {
                return LocalCollection._observeFromObserveChanges(this, options);
              }
              /**
               * @summary Watch a query. Receive callbacks as the result set changes. Only
               *          the differences between the old and new documents are passed to
               *          the callbacks.
               * @locus Anywhere
               * @memberOf Mongo.Cursor
               * @instance
               * @param {Object} callbacks Functions to call to deliver the result set as it
               *                           changes
               */

              observeChanges(options) {
                const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options); // there are several places that assume you aren't combining skip/limit with
                // unordered observe.  eg, update's EJSON.clone, and the "there are several"
                // comment in _modifyAndNotify
                // XXX allow skip/limit with unordered observe


                if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {
                  throw new Error("Must use an ordered observe with skip or limit (i.e. 'addedBefore' " + "for observeChanges or 'addedAt' for observe, instead of 'added').");
                }

                if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {
                  throw Error('You may not observe a cursor with {fields: {_id: 0}}');
                }

                const distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();
                const query = {
                  cursor: this,
                  dirty: false,
                  distances,
                  matcher: this.matcher,
                  // not fast pathed
                  ordered,
                  projectionFn: this._projectionFn,
                  resultsSnapshot: null,
                  sorter: ordered && this.sorter
                };
                let qid; // Non-reactive queries call added[Before] and then never call anything
                // else.

                if (this.reactive) {
                  qid = this.collection.next_qid++;
                  this.collection.queries[qid] = query;
                }

                query.results = this._getRawObjects({
                  ordered,
                  distances: query.distances
                });

                if (this.collection.paused) {
                  query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();
                } // wrap callbacks we were passed. callbacks only fire when not paused and
                // are never undefined
                // Filters out blacklisted fields according to cursor's projection.
                // XXX wrong place for this?
                // furthermore, callbacks enqueue until the operation we're working on is
                // done.


                const wrapCallback = fn => {
                  if (!fn) {
                    return () => {};
                  }

                  const self = this;
                  return function ()
                  /* args*/
                  {
                    if (self.collection.paused) {
                      return;
                    }

                    const args = arguments;

                    self.collection._observeQueue.queueTask(() => {
                      fn.apply(this, args);
                    });
                  };
                };

                query.added = wrapCallback(options.added);
                query.changed = wrapCallback(options.changed);
                query.removed = wrapCallback(options.removed);

                if (ordered) {
                  query.addedBefore = wrapCallback(options.addedBefore);
                  query.movedBefore = wrapCallback(options.movedBefore);
                }

                if (!options._suppress_initial && !this.collection.paused) {
                  query.results.forEach(doc => {
                    const fields = EJSON.clone(doc);
                    delete fields._id;

                    if (ordered) {
                      query.addedBefore(doc._id, this._projectionFn(fields), null);
                    }

                    query.added(doc._id, this._projectionFn(fields));
                  });
                }

                const handle = Object.assign(new LocalCollection.ObserveHandle(), {
                  collection: this.collection,
                  stop: () => {
                    if (this.reactive) {
                      delete this.collection.queries[qid];
                    }
                  }
                });

                if (this.reactive && Tracker.active) {
                  // XXX in many cases, the same observe will be recreated when
                  // the current autorun is rerun.  we could save work by
                  // letting it linger across rerun and potentially get
                  // repurposed if the same observe is performed, using logic
                  // similar to that of Meteor.subscribe.
                  Tracker.onInvalidate(() => {
                    handle.stop();
                  });
                } // run the observe callbacks resulting from the initial contents
                // before we leave the observe.


                this.collection._observeQueue.drain();

                return handle;
              } // Since we don't actually have a "nextObject" interface, there's really no
              // reason to have a "rewind" interface.  All it did was make multiple calls
              // to fetch/map/forEach return nothing the second time.
              // XXX COMPAT WITH 0.8.1


              rewind() {} // XXX Maybe we need a version of observe that just calls a callback if
              // anything changed.


              _depend(changers, _allow_unordered) {
                if (Tracker.active) {
                  const dependency = new Tracker.Dependency();
                  const notify = dependency.changed.bind(dependency);
                  dependency.depend();
                  const options = {
                    _allow_unordered,
                    _suppress_initial: true
                  };
                  ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(fn => {
                    if (changers[fn]) {
                      options[fn] = notify;
                    }
                  }); // observeChanges will stop() when this computation is invalidated

                  this.observeChanges(options);
                }
              }

              _getCollectionName() {
                return this.collection.name;
              } // Returns a collection of matching objects, but doesn't deep copy them.
              //
              // If ordered is set, returns a sorted array, respecting sorter, skip, and
              // limit properties of the query provided that options.applySkipLimit is
              // not set to false (#1201). If sorter is falsey, no sort -- you get the
              // natural order.
              //
              // If ordered is not set, returns an object mapping from ID to doc (sorter,
              // skip and limit should not be set).
              //
              // If ordered is set and this cursor is a $near geoquery, then this function
              // will use an _IdMap to track each distance from the $near argument point in
              // order to use it as a sort key. If an _IdMap is passed in the 'distances'
              // argument, this function will clear it and use it for this purpose
              // (otherwise it will just create its own _IdMap). The observeChanges
              // implementation uses this to remember the distances after this function
              // returns.


              _getRawObjects() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                // By default this method will respect skip and limit because .fetch(),
                // .forEach() etc... expect this behaviour. It can be forced to ignore
                // skip and limit by setting applySkipLimit to false (.count() does this,
                // for example)
                const applySkipLimit = options.applySkipLimit !== false; // XXX use OrderedDict instead of array, and make IdMap and OrderedDict
                // compatible

                const results = options.ordered ? [] : new LocalCollection._IdMap(); // fast path for single ID value

                if (this._selectorId !== undefined) {
                  // If you have non-zero skip and ask for a single id, you get nothing.
                  // This is so it matches the behavior of the '{_id: foo}' path.
                  if (applySkipLimit && this.skip) {
                    return results;
                  }

                  const selectedDoc = this.collection._docs.get(this._selectorId);

                  if (selectedDoc) {
                    if (options.ordered) {
                      results.push(selectedDoc);
                    } else {
                      results.set(this._selectorId, selectedDoc);
                    }
                  }

                  return results;
                } // slow path for arbitrary selector, sort, skip, limit
                // in the observeChanges case, distances is actually part of the "query"
                // (ie, live results set) object.  in other cases, distances is only used
                // inside this function.


                let distances;

                if (this.matcher.hasGeoQuery() && options.ordered) {
                  if (options.distances) {
                    distances = options.distances;
                    distances.clear();
                  } else {
                    distances = new LocalCollection._IdMap();
                  }
                }

                this.collection._docs.forEach((doc, id) => {
                  const matchResult = this.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (options.ordered) {
                      results.push(doc);

                      if (distances && matchResult.distance !== undefined) {
                        distances.set(id, matchResult.distance);
                      }
                    } else {
                      results.set(id, doc);
                    }
                  } // Override to ensure all docs are matched if ignoring skip & limit


                  if (!applySkipLimit) {
                    return true;
                  } // Fast path for limited unsorted queries.
                  // XXX 'length' check here seems wrong for ordered


                  return !this.limit || this.skip || this.sorter || results.length !== this.limit;
                });

                if (!options.ordered) {
                  return results;
                }

                if (this.sorter) {
                  results.sort(this.sorter.getComparator({
                    distances
                  }));
                } // Return the full set of results if there is no skip or limit or if we're
                // ignoring them


                if (!applySkipLimit || !this.limit && !this.skip) {
                  return results;
                }

                return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);
              }

              _publishCursor(subscription) {
                // XXX minimongo should not depend on mongo-livedata!
                if (!Package.mongo) {
                  throw new Error('Can\'t publish from Minimongo without the `mongo` package.');
                }

                if (!this.collection.name) {
                  throw new Error('Can\'t publish a cursor from a collection without a name.');
                }

                return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "local_collection.js": function (_require5, _exports5, _module4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/local_collection.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module4.export({
              default: () => LocalCollection
            });
            let Cursor;
            _module4.link("./cursor.js", {
              default(v) {
                Cursor = v;
              }

            }, 0);
            let ObserveHandle;
            _module4.link("./observe_handle.js", {
              default(v) {
                ObserveHandle = v;
              }

            }, 1);
            let hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;
            _module4.link("./common.js", {
              hasOwn(v) {
                hasOwn = v;
              },

              isIndexable(v) {
                isIndexable = v;
              },

              isNumericKey(v) {
                isNumericKey = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              populateDocumentWithQueryFields(v) {
                populateDocumentWithQueryFields = v;
              },

              projectionDetails(v) {
                projectionDetails = v;
              }

            }, 2);

            class LocalCollection {
              constructor(name) {
                this.name = name; // _id -> document (also containing id)

                this._docs = new LocalCollection._IdMap();
                this._observeQueue = new Meteor._SynchronousQueue();
                this.next_qid = 1; // live query id generator
                // qid -> live query object. keys:
                //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.
                //  results: array (ordered) or object (unordered) of current results
                //    (aliased with this._docs!)
                //  resultsSnapshot: snapshot of results. null if not paused.
                //  cursor: Cursor object for the query.
                //  selector, sorter, (callbacks): functions

                this.queries = Object.create(null); // null if not saving originals; an IdMap from id to original document value
                // if saving originals. See comments before saveOriginals().

                this._savedOriginals = null; // True when observers are paused and we should not send callbacks.

                this.paused = false;
              } // options may include sort, skip, limit, reactive
              // sort may be any of these forms:
              //     {a: 1, b: -1}
              //     [["a", "asc"], ["b", "desc"]]
              //     ["a", ["b", "desc"]]
              //   (in the first form you're beholden to key enumeration order in
              //   your javascript VM)
              //
              // reactive: if given, and false, don't register with Tracker (default
              // is true)
              //
              // XXX possibly should support retrieving a subset of fields? and
              // have it be a hint (ignored on the client, when not copying the
              // doc?)
              //
              // XXX sort does not yet support subkeys ('a.b') .. fix that!
              // XXX add one more sort form: "key"
              // XXX tests


              find(selector, options) {
                // default syntax for everything is to omit the selector argument.
                // but if selector is explicitly passed in as false or undefined, we
                // want a selector that matches nothing.
                if (arguments.length === 0) {
                  selector = {};
                }

                return new LocalCollection.Cursor(this, selector, options);
              }

              findOne(selector) {
                let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (arguments.length === 0) {
                  selector = {};
                } // NOTE: by setting limit 1 here, we end up using very inefficient
                // code that recomputes the whole query on each update. The upside is
                // that when you reactively depend on a findOne you only get
                // invalidated when the found object changes, not any object in the
                // collection. Most findOne will be by id, which has a fast path, so
                // this might not be a big deal. In most cases, invalidation causes
                // the called to re-query anyway, so this should be a net performance
                // improvement.


                options.limit = 1;
                return this.find(selector, options).fetch()[0];
              } // XXX possibly enforce that 'undefined' does not appear (we assume
              // this in our handling of null and $exists)


              insert(doc, callback) {
                doc = EJSON.clone(doc);
                assertHasValidFieldNames(doc); // if you really want to use ObjectIDs, set this global.
                // Mongo.Collection specifies its own ids and does not use this code.

                if (!hasOwn.call(doc, '_id')) {
                  doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();
                }

                const id = doc._id;

                if (this._docs.has(id)) {
                  throw MinimongoError("Duplicate _id '".concat(id, "'"));
                }

                this._saveOriginal(id, undefined);

                this._docs.set(id, doc);

                const queriesToRecompute = []; // trigger live queries that match

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const matchResult = query.matcher.documentMatches(doc);

                  if (matchResult.result) {
                    if (query.distances && matchResult.distance !== undefined) {
                      query.distances.set(id, matchResult.distance);
                    }

                    if (query.cursor.skip || query.cursor.limit) {
                      queriesToRecompute.push(qid);
                    } else {
                      LocalCollection._insertInResults(query, doc);
                    }
                  }
                });
                queriesToRecompute.forEach(qid => {
                  if (this.queries[qid]) {
                    this._recomputeResults(this.queries[qid]);
                  }
                });

                this._observeQueue.drain(); // Defer because the caller likely doesn't expect the callback to be run
                // immediately.


                if (callback) {
                  Meteor.defer(() => {
                    callback(null, id);
                  });
                }

                return id;
              } // Pause the observers. No callbacks from observers will fire until
              // 'resumeObservers' is called.


              pauseObservers() {
                // No-op if already paused.
                if (this.paused) {
                  return;
                } // Set the 'paused' flag such that new observer messages don't fire.


                this.paused = true; // Take a snapshot of the query results for each query.

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];
                  query.resultsSnapshot = EJSON.clone(query.results);
                });
              }

              remove(selector, callback) {
                // Easy special case: if we're not calling observeChanges callbacks and
                // we're not saving originals and we got asked to remove everything, then
                // just empty everything directly.
                if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {
                  const result = this._docs.size();

                  this._docs.clear();

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.ordered) {
                      query.results = [];
                    } else {
                      query.results.clear();
                    }
                  });

                  if (callback) {
                    Meteor.defer(() => {
                      callback(null, result);
                    });
                  }

                  return result;
                }

                const matcher = new Minimongo.Matcher(selector);
                const remove = [];

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  if (matcher.documentMatches(doc).result) {
                    remove.push(id);
                  }
                });

                const queriesToRecompute = [];
                const queryRemove = [];

                for (let i = 0; i < remove.length; i++) {
                  const removeId = remove[i];

                  const removeDoc = this._docs.get(removeId);

                  Object.keys(this.queries).forEach(qid => {
                    const query = this.queries[qid];

                    if (query.dirty) {
                      return;
                    }

                    if (query.matcher.documentMatches(removeDoc).result) {
                      if (query.cursor.skip || query.cursor.limit) {
                        queriesToRecompute.push(qid);
                      } else {
                        queryRemove.push({
                          qid,
                          doc: removeDoc
                        });
                      }
                    }
                  });

                  this._saveOriginal(removeId, removeDoc);

                  this._docs.remove(removeId);
                } // run live query callbacks _after_ we've removed the documents.


                queryRemove.forEach(remove => {
                  const query = this.queries[remove.qid];

                  if (query) {
                    query.distances && query.distances.remove(remove.doc._id);

                    LocalCollection._removeFromResults(query, remove.doc);
                  }
                });
                queriesToRecompute.forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query);
                  }
                });

                this._observeQueue.drain();

                const result = remove.length;

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // Resume the observers. Observers immediately receive change
              // notifications to bring them to the current state of the
              // database. Note that this is not just replaying all the changes that
              // happened during the pause, it is a smarter 'coalesced' diff.


              resumeObservers() {
                // No-op if not paused.
                if (!this.paused) {
                  return;
                } // Unset the 'paused' flag. Make sure to do this first, otherwise
                // observer methods won't actually fire when we trigger them.


                this.paused = false;
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    query.dirty = false; // re-compute results will perform `LocalCollection._diffQueryChanges`
                    // automatically.

                    this._recomputeResults(query, query.resultsSnapshot);
                  } else {
                    // Diff the current results against the snapshot and send to observers.
                    // pass the query object for its observer callbacks.
                    LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {
                      projectionFn: query.projectionFn
                    });
                  }

                  query.resultsSnapshot = null;
                });

                this._observeQueue.drain();
              }

              retrieveOriginals() {
                if (!this._savedOriginals) {
                  throw new Error('Called retrieveOriginals without saveOriginals');
                }

                const originals = this._savedOriginals;
                this._savedOriginals = null;
                return originals;
              } // To track what documents are affected by a piece of code, call
              // saveOriginals() before it and retrieveOriginals() after it.
              // retrieveOriginals returns an object whose keys are the ids of the documents
              // that were affected since the call to saveOriginals(), and the values are
              // equal to the document's contents at the time of saveOriginals. (In the case
              // of an inserted document, undefined is the value.) You must alternate
              // between calls to saveOriginals() and retrieveOriginals().


              saveOriginals() {
                if (this._savedOriginals) {
                  throw new Error('Called saveOriginals twice without retrieveOriginals');
                }

                this._savedOriginals = new LocalCollection._IdMap();
              } // XXX atomicity: if multi is true, and one modification fails, do
              // we rollback the whole operation, or what?


              update(selector, mod, options, callback) {
                if (!callback && options instanceof Function) {
                  callback = options;
                  options = null;
                }

                if (!options) {
                  options = {};
                }

                const matcher = new Minimongo.Matcher(selector, true); // Save the original results of any query that we might need to
                // _recomputeResults on, because _modifyAndNotify will mutate the objects in
                // it. (We don't need to save the original results of paused queries because
                // they already have a resultsSnapshot and we won't be diffing in
                // _recomputeResults.)

                const qidToOriginalResults = {}; // We should only clone each document once, even if it appears in multiple
                // queries

                const docMap = new LocalCollection._IdMap();

                const idsMatched = LocalCollection._idsMatchedBySelector(selector);

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if ((query.cursor.skip || query.cursor.limit) && !this.paused) {
                    // Catch the case of a reactive `count()` on a cursor with skip
                    // or limit, which registers an unordered observe. This is a
                    // pretty rare case, so we just clone the entire result set with
                    // no optimizations for documents that appear in these result
                    // sets and other queries.
                    if (query.results instanceof LocalCollection._IdMap) {
                      qidToOriginalResults[qid] = query.results.clone();
                      return;
                    }

                    if (!(query.results instanceof Array)) {
                      throw new Error('Assertion failed: query.results not an array');
                    } // Clones a document to be stored in `qidToOriginalResults`
                    // because it may be modified before the new and old result sets
                    // are diffed. But if we know exactly which document IDs we're
                    // going to modify, then we only need to clone those.


                    const memoizedCloneIfNeeded = doc => {
                      if (docMap.has(doc._id)) {
                        return docMap.get(doc._id);
                      }

                      const docToMemoize = idsMatched && !idsMatched.some(id => EJSON.equals(id, doc._id)) ? doc : EJSON.clone(doc);
                      docMap.set(doc._id, docToMemoize);
                      return docToMemoize;
                    };

                    qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);
                  }
                });
                const recomputeQids = {};
                let updateCount = 0;

                this._eachPossiblyMatchingDoc(selector, (doc, id) => {
                  const queryResult = matcher.documentMatches(doc);

                  if (queryResult.result) {
                    // XXX Should we save the original even if mod ends up being a no-op?
                    this._saveOriginal(id, doc);

                    this._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);

                    ++updateCount;

                    if (!options.multi) {
                      return false; // break
                    }
                  }

                  return true;
                });

                Object.keys(recomputeQids).forEach(qid => {
                  const query = this.queries[qid];

                  if (query) {
                    this._recomputeResults(query, qidToOriginalResults[qid]);
                  }
                });

                this._observeQueue.drain(); // If we are doing an upsert, and we didn't modify any documents yet, then
                // it's time to do an insert. Figure out what document we are inserting, and
                // generate an id for it.


                let insertedId;

                if (updateCount === 0 && options.upsert) {
                  const doc = LocalCollection._createUpsertDocument(selector, mod);

                  if (!doc._id && options.insertedId) {
                    doc._id = options.insertedId;
                  }

                  insertedId = this.insert(doc);
                  updateCount = 1;
                } // Return the number of affected documents, or in the upsert case, an object
                // containing the number of affected docs and the id of the doc that was
                // inserted, if any.


                let result;

                if (options._returnObject) {
                  result = {
                    numberAffected: updateCount
                  };

                  if (insertedId !== undefined) {
                    result.insertedId = insertedId;
                  }
                } else {
                  result = updateCount;
                }

                if (callback) {
                  Meteor.defer(() => {
                    callback(null, result);
                  });
                }

                return result;
              } // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is
              // equivalent to LocalCollection.update(sel, mod, {upsert: true,
              // _returnObject: true}).


              upsert(selector, mod, options, callback) {
                if (!callback && typeof options === 'function') {
                  callback = options;
                  options = {};
                }

                return this.update(selector, mod, Object.assign({}, options, {
                  upsert: true,
                  _returnObject: true
                }), callback);
              } // Iterates over a subset of documents that could match selector; calls
              // fn(doc, id) on each of them.  Specifically, if selector specifies
              // specific _id's, it only looks at those.  doc is *not* cloned: it is the
              // same object that is in _docs.


              _eachPossiblyMatchingDoc(selector, fn) {
                const specificIds = LocalCollection._idsMatchedBySelector(selector);

                if (specificIds) {
                  specificIds.some(id => {
                    const doc = this._docs.get(id);

                    if (doc) {
                      return fn(doc, id) === false;
                    }
                  });
                } else {
                  this._docs.forEach(fn);
                }
              }

              _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {
                const matched_before = {};
                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  if (query.ordered) {
                    matched_before[qid] = query.matcher.documentMatches(doc).result;
                  } else {
                    // Because we don't support skip or limit (yet) in unordered queries, we
                    // can just do a direct lookup.
                    matched_before[qid] = query.results.has(doc._id);
                  }
                });
                const old_doc = EJSON.clone(doc);

                LocalCollection._modify(doc, mod, {
                  arrayIndices
                });

                Object.keys(this.queries).forEach(qid => {
                  const query = this.queries[qid];

                  if (query.dirty) {
                    return;
                  }

                  const afterMatch = query.matcher.documentMatches(doc);
                  const after = afterMatch.result;
                  const before = matched_before[qid];

                  if (after && query.distances && afterMatch.distance !== undefined) {
                    query.distances.set(doc._id, afterMatch.distance);
                  }

                  if (query.cursor.skip || query.cursor.limit) {
                    // We need to recompute any query where the doc may have been in the
                    // cursor's window either before or after the update. (Note that if skip
                    // or limit is set, "before" and "after" being true do not necessarily
                    // mean that the document is in the cursor's output after skip/limit is
                    // applied... but if they are false, then the document definitely is NOT
                    // in the output. So it's safe to skip recompute if neither before or
                    // after are true.)
                    if (before || after) {
                      recomputeQids[qid] = true;
                    }
                  } else if (before && !after) {
                    LocalCollection._removeFromResults(query, doc);
                  } else if (!before && after) {
                    LocalCollection._insertInResults(query, doc);
                  } else if (before && after) {
                    LocalCollection._updateInResults(query, doc, old_doc);
                  }
                });
              } // Recomputes the results of a query and runs observe callbacks for the
              // difference between the previous results and the current results (unless
              // paused). Used for skip/limit queries.
              //
              // When this is used by insert or remove, it can just use query.results for
              // the old results (and there's no need to pass in oldResults), because these
              // operations don't mutate the documents in the collection. Update needs to
              // pass in an oldResults which was deep-copied before the modifier was
              // applied.
              //
              // oldResults is guaranteed to be ignored if the query is not paused.


              _recomputeResults(query, oldResults) {
                if (this.paused) {
                  // There's no reason to recompute the results now as we're still paused.
                  // By flagging the query as "dirty", the recompute will be performed
                  // when resumeObservers is called.
                  query.dirty = true;
                  return;
                }

                if (!this.paused && !oldResults) {
                  oldResults = query.results;
                }

                if (query.distances) {
                  query.distances.clear();
                }

                query.results = query.cursor._getRawObjects({
                  distances: query.distances,
                  ordered: query.ordered
                });

                if (!this.paused) {
                  LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {
                    projectionFn: query.projectionFn
                  });
                }
              }

              _saveOriginal(id, doc) {
                // Are we even trying to save originals?
                if (!this._savedOriginals) {
                  return;
                } // Have we previously mutated the original (and so 'doc' is not actually
                // original)?  (Note the 'has' check rather than truth: we store undefined
                // here for inserted docs!)


                if (this._savedOriginals.has(id)) {
                  return;
                }

                this._savedOriginals.set(id, EJSON.clone(doc));
              }

            }

            LocalCollection.Cursor = Cursor;
            LocalCollection.ObserveHandle = ObserveHandle; // XXX maybe move these into another ObserveHelpers package or something
            // _CachingChangeObserver is an object which receives observeChanges callbacks
            // and keeps a cache of the current cursor state up to date in this.docs. Users
            // of this class should read the docs field but not modify it. You should pass
            // the "applyChange" field as the callbacks to the underlying observeChanges
            // call. Optionally, you can specify your own observeChanges callbacks which are
            // invoked immediately before the docs field is updated; this object is made
            // available as `this` to those callbacks.

            LocalCollection._CachingChangeObserver = class _CachingChangeObserver {
              constructor() {
                let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                const orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);

                if (hasOwn.call(options, 'ordered')) {
                  this.ordered = options.ordered;

                  if (options.callbacks && options.ordered !== orderedFromCallbacks) {
                    throw Error('ordered option doesn\'t match callbacks');
                  }
                } else if (options.callbacks) {
                  this.ordered = orderedFromCallbacks;
                } else {
                  throw Error('must provide ordered or callbacks');
                }

                const callbacks = options.callbacks || {};

                if (this.ordered) {
                  this.docs = new OrderedDict(MongoID.idStringify);
                  this.applyChange = {
                    addedBefore: (id, fields, before) => {
                      const doc = EJSON.clone(fields);
                      doc._id = id;

                      if (callbacks.addedBefore) {
                        callbacks.addedBefore.call(this, id, fields, before);
                      } // This line triggers if we provide added with movedBefore.


                      if (callbacks.added) {
                        callbacks.added.call(this, id, fields);
                      } // XXX could `before` be a falsy ID?  Technically
                      // idStringify seems to allow for them -- though
                      // OrderedDict won't call stringify on a falsy arg.


                      this.docs.putBefore(id, doc, before || null);
                    },
                    movedBefore: (id, before) => {
                      const doc = this.docs.get(id);

                      if (callbacks.movedBefore) {
                        callbacks.movedBefore.call(this, id, before);
                      }

                      this.docs.moveBefore(id, before || null);
                    }
                  };
                } else {
                  this.docs = new LocalCollection._IdMap();
                  this.applyChange = {
                    added: (id, fields) => {
                      const doc = EJSON.clone(fields);

                      if (callbacks.added) {
                        callbacks.added.call(this, id, fields);
                      }

                      doc._id = id;
                      this.docs.set(id, doc);
                    }
                  };
                } // The methods in _IdMap and OrderedDict used by these callbacks are
                // identical.


                this.applyChange.changed = (id, fields) => {
                  const doc = this.docs.get(id);

                  if (!doc) {
                    throw new Error("Unknown id for changed: ".concat(id));
                  }

                  if (callbacks.changed) {
                    callbacks.changed.call(this, id, EJSON.clone(fields));
                  }

                  DiffSequence.applyChanges(doc, fields);
                };

                this.applyChange.removed = id => {
                  if (callbacks.removed) {
                    callbacks.removed.call(this, id);
                  }

                  this.docs.remove(id);
                };
              }

            };
            LocalCollection._IdMap = class _IdMap extends IdMap {
              constructor() {
                super(MongoID.idStringify, MongoID.idParse);
              }

            }; // Wrap a transform function to return objects that have the _id field
            // of the untransformed document. This ensures that subsystems such as
            // the observe-sequence package that call `observe` can keep track of
            // the documents identities.
            //
            // - Require that it returns objects
            // - If the return value has an _id field, verify that it matches the
            //   original _id field
            // - If the return value doesn't have an _id field, add it back.

            LocalCollection.wrapTransform = transform => {
              if (!transform) {
                return null;
              } // No need to doubly-wrap transforms.


              if (transform.__wrappedTransform__) {
                return transform;
              }

              const wrapped = doc => {
                if (!hasOwn.call(doc, '_id')) {
                  // XXX do we ever have a transform on the oplog's collection? because that
                  // collection has no _id.
                  throw new Error('can only transform documents with _id');
                }

                const id = doc._id; // XXX consider making tracker a weak dependency and checking
                // Package.tracker here

                const transformed = Tracker.nonreactive(() => transform(doc));

                if (!LocalCollection._isPlainObject(transformed)) {
                  throw new Error('transform must return object');
                }

                if (hasOwn.call(transformed, '_id')) {
                  if (!EJSON.equals(transformed._id, id)) {
                    throw new Error('transformed document can\'t have different _id');
                  }
                } else {
                  transformed._id = id;
                }

                return transformed;
              };

              wrapped.__wrappedTransform__ = true;
              return wrapped;
            }; // XXX the sorted-query logic below is laughably inefficient. we'll
            // need to come up with a better datastructure for this.
            //
            // XXX the logic for observing with a skip or a limit is even more
            // laughably inefficient. we recompute the whole results every time!
            // This binary search puts a value between any equal values, and the first
            // lesser value.


            LocalCollection._binarySearch = (cmp, array, value) => {
              let first = 0;
              let range = array.length;

              while (range > 0) {
                const halfRange = Math.floor(range / 2);

                if (cmp(value, array[first + halfRange]) >= 0) {
                  first += halfRange + 1;
                  range -= halfRange + 1;
                } else {
                  range = halfRange;
                }
              }

              return first;
            };

            LocalCollection._checkSupportedProjection = fields => {
              if (fields !== Object(fields) || Array.isArray(fields)) {
                throw MinimongoError('fields option must be an object');
              }

              Object.keys(fields).forEach(keyPath => {
                if (keyPath.split('.').includes('$')) {
                  throw MinimongoError('Minimongo doesn\'t support $ operator in projections yet.');
                }

                const value = fields[keyPath];

                if (typeof value === 'object' && ['$elemMatch', '$meta', '$slice'].some(key => hasOwn.call(value, key))) {
                  throw MinimongoError('Minimongo doesn\'t support operators in projections yet.');
                }

                if (![1, 0, true, false].includes(value)) {
                  throw MinimongoError('Projection values should be one of 1, 0, true, or false');
                }
              });
            }; // Knows how to compile a fields projection to a predicate function.
            // @returns - Function: a closure that filters out an object according to the
            //            fields projection rules:
            //            @param obj - Object: MongoDB-styled document
            //            @returns - Object: a document with the fields filtered out
            //                       according to projection rules. Doesn't retain subfields
            //                       of passed argument.


            LocalCollection._compileProjection = fields => {
              LocalCollection._checkSupportedProjection(fields);

              const _idProjection = fields._id === undefined ? true : fields._id;

              const details = projectionDetails(fields); // returns transformed doc according to ruleTree

              const transform = (doc, ruleTree) => {
                // Special case for "sets"
                if (Array.isArray(doc)) {
                  return doc.map(subdoc => transform(subdoc, ruleTree));
                }

                const result = details.including ? {} : EJSON.clone(doc);
                Object.keys(ruleTree).forEach(key => {
                  if (!hasOwn.call(doc, key)) {
                    return;
                  }

                  const rule = ruleTree[key];

                  if (rule === Object(rule)) {
                    // For sub-objects/subsets we branch
                    if (doc[key] === Object(doc[key])) {
                      result[key] = transform(doc[key], rule);
                    }
                  } else if (details.including) {
                    // Otherwise we don't even touch this subfield
                    result[key] = EJSON.clone(doc[key]);
                  } else {
                    delete result[key];
                  }
                });
                return result;
              };

              return doc => {
                const result = transform(doc, details.tree);

                if (_idProjection && hasOwn.call(doc, '_id')) {
                  result._id = doc._id;
                }

                if (!_idProjection && hasOwn.call(result, '_id')) {
                  delete result._id;
                }

                return result;
              };
            }; // Calculates the document to insert in case we're doing an upsert and the
            // selector does not match any elements


            LocalCollection._createUpsertDocument = (selector, modifier) => {
              const selectorDocument = populateDocumentWithQueryFields(selector);

              const isModify = LocalCollection._isModificationMod(modifier);

              const newDoc = {};

              if (selectorDocument._id) {
                newDoc._id = selectorDocument._id;
                delete selectorDocument._id;
              } // This double _modify call is made to help with nested properties (see issue
              // #8631). We do this even if it's a replacement for validation purposes (e.g.
              // ambiguous id's)


              LocalCollection._modify(newDoc, {
                $set: selectorDocument
              });

              LocalCollection._modify(newDoc, modifier, {
                isInsert: true
              });

              if (isModify) {
                return newDoc;
              } // Replacement can take _id from query document


              const replacement = Object.assign({}, modifier);

              if (newDoc._id) {
                replacement._id = newDoc._id;
              }

              return replacement;
            };

            LocalCollection._diffObjects = (left, right, callbacks) => {
              return DiffSequence.diffObjects(left, right, callbacks);
            }; // ordered: bool.
            // old_results and new_results: collections of documents.
            //    if ordered, they are arrays.
            //    if unordered, they are IdMaps


            LocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) => DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);

            LocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);

            LocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) => DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);

            LocalCollection._findInOrderedResults = (query, doc) => {
              if (!query.ordered) {
                throw new Error('Can\'t call _findInOrderedResults on unordered query');
              }

              for (let i = 0; i < query.results.length; i++) {
                if (query.results[i] === doc) {
                  return i;
                }
              }

              throw Error('object missing from query');
            }; // If this is a selector which explicitly constrains the match by ID to a finite
            // number of documents, returns a list of their IDs.  Otherwise returns
            // null. Note that the selector may have other restrictions so it may not even
            // match those document!  We care about $in and $and since those are generated
            // access-controlled update and remove.


            LocalCollection._idsMatchedBySelector = selector => {
              // Is the selector just an ID?
              if (LocalCollection._selectorIsId(selector)) {
                return [selector];
              }

              if (!selector) {
                return null;
              } // Do we have an _id clause?


              if (hasOwn.call(selector, '_id')) {
                // Is the _id clause just an ID?
                if (LocalCollection._selectorIsId(selector._id)) {
                  return [selector._id];
                } // Is the _id clause {_id: {$in: ["x", "y", "z"]}}?


                if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {
                  return selector._id.$in;
                }

                return null;
              } // If this is a top-level $and, and any of the clauses constrain their
              // documents, then the whole selector is constrained by any one clause's
              // constraint. (Well, by their intersection, but that seems unlikely.)


              if (Array.isArray(selector.$and)) {
                for (let i = 0; i < selector.$and.length; ++i) {
                  const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);

                  if (subIds) {
                    return subIds;
                  }
                }
              }

              return null;
            };

            LocalCollection._insertInResults = (query, doc) => {
              const fields = EJSON.clone(doc);
              delete fields._id;

              if (query.ordered) {
                if (!query.sorter) {
                  query.addedBefore(doc._id, query.projectionFn(fields), null);
                  query.results.push(doc);
                } else {
                  const i = LocalCollection._insertInSortedList(query.sorter.getComparator({
                    distances: query.distances
                  }), query.results, doc);

                  let next = query.results[i + 1];

                  if (next) {
                    next = next._id;
                  } else {
                    next = null;
                  }

                  query.addedBefore(doc._id, query.projectionFn(fields), next);
                }

                query.added(doc._id, query.projectionFn(fields));
              } else {
                query.added(doc._id, query.projectionFn(fields));
                query.results.set(doc._id, doc);
              }
            };

            LocalCollection._insertInSortedList = (cmp, array, value) => {
              if (array.length === 0) {
                array.push(value);
                return 0;
              }

              const i = LocalCollection._binarySearch(cmp, array, value);

              array.splice(i, 0, value);
              return i;
            };

            LocalCollection._isModificationMod = mod => {
              let isModify = false;
              let isReplace = false;
              Object.keys(mod).forEach(key => {
                if (key.substr(0, 1) === '$') {
                  isModify = true;
                } else {
                  isReplace = true;
                }
              });

              if (isModify && isReplace) {
                throw new Error('Update parameter cannot have both modifier and non-modifier fields.');
              }

              return isModify;
            }; // XXX maybe this should be EJSON.isObject, though EJSON doesn't know about
            // RegExp
            // XXX note that _type(undefined) === 3!!!!


            LocalCollection._isPlainObject = x => {
              return x && LocalCollection._f._type(x) === 3;
            }; // XXX need a strategy for passing the binding of $ into this
            // function, from the compiled selector
            //
            // maybe just {key.up.to.just.before.dollarsign: array_index}
            //
            // XXX atomicity: if one modification fails, do we roll back the whole
            // change?
            //
            // options:
            //   - isInsert is set when _modify is being called to compute the document to
            //     insert as part of an upsert operation. We use this primarily to figure
            //     out when to set the fields in $setOnInsert, if present.


            LocalCollection._modify = function (doc, modifier) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

              if (!LocalCollection._isPlainObject(modifier)) {
                throw MinimongoError('Modifier must be an object');
              } // Make sure the caller can't mutate our data structures.


              modifier = EJSON.clone(modifier);
              const isModifier = isOperatorObject(modifier);
              const newDoc = isModifier ? EJSON.clone(doc) : modifier;

              if (isModifier) {
                // apply modifiers to the doc.
                Object.keys(modifier).forEach(operator => {
                  // Treat $setOnInsert as $set if this is an insert.
                  const setOnInsert = options.isInsert && operator === '$setOnInsert';
                  const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];
                  const operand = modifier[operator];

                  if (!modFunc) {
                    throw MinimongoError("Invalid modifier specified ".concat(operator));
                  }

                  Object.keys(operand).forEach(keypath => {
                    const arg = operand[keypath];

                    if (keypath === '') {
                      throw MinimongoError('An empty update path is not valid.');
                    }

                    const keyparts = keypath.split('.');

                    if (!keyparts.every(Boolean)) {
                      throw MinimongoError("The update path '".concat(keypath, "' contains an empty field name, ") + 'which is not allowed.');
                    }

                    const target = findModTarget(newDoc, keyparts, {
                      arrayIndices: options.arrayIndices,
                      forbidArray: operator === '$rename',
                      noCreate: NO_CREATE_MODIFIERS[operator]
                    });
                    modFunc(target, keyparts.pop(), arg, keypath, newDoc);
                  });
                });

                if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {
                  throw MinimongoError("After applying the update to the document {_id: \"".concat(doc._id, "\", ...},") + ' the (immutable) field \'_id\' was found to have been altered to ' + "_id: \"".concat(newDoc._id, "\""));
                }
              } else {
                if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {
                  throw MinimongoError("The _id field cannot be changed from {_id: \"".concat(doc._id, "\"} to ") + "{_id: \"".concat(modifier._id, "\"}"));
                } // replace the whole document


                assertHasValidFieldNames(modifier);
              } // move new document into place.


              Object.keys(doc).forEach(key => {
                // Note: this used to be for (var key in doc) however, this does not
                // work right in Opera. Deleting from a doc while iterating over it
                // would sometimes cause opera to skip some keys.
                if (key !== '_id') {
                  delete doc[key];
                }
              });
              Object.keys(newDoc).forEach(key => {
                doc[key] = newDoc[key];
              });
            };

            LocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {
              const transform = cursor.getTransform() || (doc => doc);

              let suppressed = !!observeCallbacks._suppress_initial;
              let observeChangesCallbacks;

              if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {
                // The "_no_indices" option sets all index arguments to -1 and skips the
                // linear scans required to generate them.  This lets observers that don't
                // need absolute indices benefit from the other features of this API --
                // relative order, transforms, and applyChanges -- without the speed hit.
                const indices = !observeCallbacks._no_indices;
                observeChangesCallbacks = {
                  addedBefore(id, fields, before) {
                    if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {
                      return;
                    }

                    const doc = transform(Object.assign(fields, {
                      _id: id
                    }));

                    if (observeCallbacks.addedAt) {
                      observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);
                    } else {
                      observeCallbacks.added(doc);
                    }
                  },

                  changed(id, fields) {
                    if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {
                      return;
                    }

                    let doc = EJSON.clone(this.docs.get(id));

                    if (!doc) {
                      throw new Error("Unknown id for changed: ".concat(id));
                    }

                    const oldDoc = transform(EJSON.clone(doc));
                    DiffSequence.applyChanges(doc, fields);

                    if (observeCallbacks.changedAt) {
                      observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.changed(transform(doc), oldDoc);
                    }
                  },

                  movedBefore(id, before) {
                    if (!observeCallbacks.movedTo) {
                      return;
                    }

                    const from = indices ? this.docs.indexOf(id) : -1;
                    let to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1; // When not moving backwards, adjust for the fact that removing the
                    // document slides everything back one slot.

                    if (to > from) {
                      --to;
                    }

                    observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);
                  },

                  removed(id) {
                    if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {
                      return;
                    } // technically maybe there should be an EJSON.clone here, but it's about
                    // to be removed from this.docs!


                    const doc = transform(this.docs.get(id));

                    if (observeCallbacks.removedAt) {
                      observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);
                    } else {
                      observeCallbacks.removed(doc);
                    }
                  }

                };
              } else {
                observeChangesCallbacks = {
                  added(id, fields) {
                    if (!suppressed && observeCallbacks.added) {
                      observeCallbacks.added(transform(Object.assign(fields, {
                        _id: id
                      })));
                    }
                  },

                  changed(id, fields) {
                    if (observeCallbacks.changed) {
                      const oldDoc = this.docs.get(id);
                      const doc = EJSON.clone(oldDoc);
                      DiffSequence.applyChanges(doc, fields);
                      observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));
                    }
                  },

                  removed(id) {
                    if (observeCallbacks.removed) {
                      observeCallbacks.removed(transform(this.docs.get(id)));
                    }
                  }

                };
              }

              const changeObserver = new LocalCollection._CachingChangeObserver({
                callbacks: observeChangesCallbacks
              });
              const handle = cursor.observeChanges(changeObserver.applyChange);
              suppressed = false;
              return handle;
            };

            LocalCollection._observeCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedAt) {
                throw new Error('Please specify only one of added() and addedAt()');
              }

              if (callbacks.changed && callbacks.changedAt) {
                throw new Error('Please specify only one of changed() and changedAt()');
              }

              if (callbacks.removed && callbacks.removedAt) {
                throw new Error('Please specify only one of removed() and removedAt()');
              }

              return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);
            };

            LocalCollection._observeChangesCallbacksAreOrdered = callbacks => {
              if (callbacks.added && callbacks.addedBefore) {
                throw new Error('Please specify only one of added() and addedBefore()');
              }

              return !!(callbacks.addedBefore || callbacks.movedBefore);
            };

            LocalCollection._removeFromResults = (query, doc) => {
              if (query.ordered) {
                const i = LocalCollection._findInOrderedResults(query, doc);

                query.removed(doc._id);
                query.results.splice(i, 1);
              } else {
                const id = doc._id; // in case callback mutates doc

                query.removed(doc._id);
                query.results.remove(id);
              }
            }; // Is this selector just shorthand for lookup by _id?


            LocalCollection._selectorIsId = selector => typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID; // Is the selector just lookup by _id (shorthand or not)?


            LocalCollection._selectorIsIdPerhapsAsObject = selector => LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;

            LocalCollection._updateInResults = (query, doc, old_doc) => {
              if (!EJSON.equals(doc._id, old_doc._id)) {
                throw new Error('Can\'t change a doc\'s _id while updating');
              }

              const projectionFn = query.projectionFn;
              const changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));

              if (!query.ordered) {
                if (Object.keys(changedFields).length) {
                  query.changed(doc._id, changedFields);
                  query.results.set(doc._id, doc);
                }

                return;
              }

              const old_idx = LocalCollection._findInOrderedResults(query, doc);

              if (Object.keys(changedFields).length) {
                query.changed(doc._id, changedFields);
              }

              if (!query.sorter) {
                return;
              } // just take it out and put it back in again, and see if the index changes


              query.results.splice(old_idx, 1);

              const new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({
                distances: query.distances
              }), query.results, doc);

              if (old_idx !== new_idx) {
                let next = query.results[new_idx + 1];

                if (next) {
                  next = next._id;
                } else {
                  next = null;
                }

                query.movedBefore && query.movedBefore(doc._id, next);
              }
            };

            const MODIFIERS = {
              $currentDate(target, field, arg) {
                if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {
                  if (arg.$type !== 'date') {
                    throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {
                      field
                    });
                  }
                } else if (arg !== true) {
                  throw MinimongoError('Invalid $currentDate modifier', {
                    field
                  });
                }

                target[field] = new Date();
              },

              $min(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $min allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $min modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] > arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $max(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $max allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $max modifier to non-number', {
                      field
                    });
                  }

                  if (target[field] < arg) {
                    target[field] = arg;
                  }
                } else {
                  target[field] = arg;
                }
              },

              $inc(target, field, arg) {
                if (typeof arg !== 'number') {
                  throw MinimongoError('Modifier $inc allowed for numbers only', {
                    field
                  });
                }

                if (field in target) {
                  if (typeof target[field] !== 'number') {
                    throw MinimongoError('Cannot apply $inc modifier to non-number', {
                      field
                    });
                  }

                  target[field] += arg;
                } else {
                  target[field] = arg;
                }
              },

              $set(target, field, arg) {
                if (target !== Object(target)) {
                  // not an array or an object
                  const error = MinimongoError('Cannot set property on non-object field', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                if (target === null) {
                  const error = MinimongoError('Cannot set property on null', {
                    field
                  });
                  error.setPropertyError = true;
                  throw error;
                }

                assertHasValidFieldNames(arg);
                target[field] = arg;
              },

              $setOnInsert(target, field, arg) {// converted to `$set` in `_modify`
              },

              $unset(target, field, arg) {
                if (target !== undefined) {
                  if (target instanceof Array) {
                    if (field in target) {
                      target[field] = null;
                    }
                  } else {
                    delete target[field];
                  }
                }
              },

              $push(target, field, arg) {
                if (target[field] === undefined) {
                  target[field] = [];
                }

                if (!(target[field] instanceof Array)) {
                  throw MinimongoError('Cannot apply $push modifier to non-array', {
                    field
                  });
                }

                if (!(arg && arg.$each)) {
                  // Simple mode: not $each
                  assertHasValidFieldNames(arg);
                  target[field].push(arg);
                  return;
                } // Fancy mode: $each (and maybe $slice and $sort and $position)


                const toPush = arg.$each;

                if (!(toPush instanceof Array)) {
                  throw MinimongoError('$each must be an array', {
                    field
                  });
                }

                assertHasValidFieldNames(toPush); // Parse $position

                let position = undefined;

                if ('$position' in arg) {
                  if (typeof arg.$position !== 'number') {
                    throw MinimongoError('$position must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  if (arg.$position < 0) {
                    throw MinimongoError('$position in $push must be zero or positive', {
                      field
                    });
                  }

                  position = arg.$position;
                } // Parse $slice.


                let slice = undefined;

                if ('$slice' in arg) {
                  if (typeof arg.$slice !== 'number') {
                    throw MinimongoError('$slice must be a numeric value', {
                      field
                    });
                  } // XXX should check to make sure integer


                  slice = arg.$slice;
                } // Parse $sort.


                let sortFunction = undefined;

                if (arg.$sort) {
                  if (slice === undefined) {
                    throw MinimongoError('$sort requires $slice to be present', {
                      field
                    });
                  } // XXX this allows us to use a $sort whose value is an array, but that's
                  // actually an extension of the Node driver, so it won't work
                  // server-side. Could be confusing!
                  // XXX is it correct that we don't do geo-stuff here?


                  sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();
                  toPush.forEach(element => {
                    if (LocalCollection._f._type(element) !== 3) {
                      throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {
                        field
                      });
                    }
                  });
                } // Actually push.


                if (position === undefined) {
                  toPush.forEach(element => {
                    target[field].push(element);
                  });
                } else {
                  const spliceArguments = [position, 0];
                  toPush.forEach(element => {
                    spliceArguments.push(element);
                  });
                  target[field].splice(...spliceArguments);
                } // Actually sort.


                if (sortFunction) {
                  target[field].sort(sortFunction);
                } // Actually slice.


                if (slice !== undefined) {
                  if (slice === 0) {
                    target[field] = []; // differs from Array.slice!
                  } else if (slice < 0) {
                    target[field] = target[field].slice(slice);
                  } else {
                    target[field] = target[field].slice(0, slice);
                  }
                }
              },

              $pushAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');
                }

                assertHasValidFieldNames(arg);
                const toPush = target[field];

                if (toPush === undefined) {
                  target[field] = arg;
                } else if (!(toPush instanceof Array)) {
                  throw MinimongoError('Cannot apply $pushAll modifier to non-array', {
                    field
                  });
                } else {
                  toPush.push(...arg);
                }
              },

              $addToSet(target, field, arg) {
                let isEach = false;

                if (typeof arg === 'object') {
                  // check if first key is '$each'
                  const keys = Object.keys(arg);

                  if (keys[0] === '$each') {
                    isEach = true;
                  }
                }

                const values = isEach ? arg.$each : [arg];
                assertHasValidFieldNames(values);
                const toAdd = target[field];

                if (toAdd === undefined) {
                  target[field] = values;
                } else if (!(toAdd instanceof Array)) {
                  throw MinimongoError('Cannot apply $addToSet modifier to non-array', {
                    field
                  });
                } else {
                  values.forEach(value => {
                    if (toAdd.some(element => LocalCollection._f._equal(value, element))) {
                      return;
                    }

                    toAdd.push(value);
                  });
                }
              },

              $pop(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPop = target[field];

                if (toPop === undefined) {
                  return;
                }

                if (!(toPop instanceof Array)) {
                  throw MinimongoError('Cannot apply $pop modifier to non-array', {
                    field
                  });
                }

                if (typeof arg === 'number' && arg < 0) {
                  toPop.splice(0, 1);
                } else {
                  toPop.pop();
                }
              },

              $pull(target, field, arg) {
                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                let out;

                if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {
                  // XXX would be much nicer to compile this once, rather than
                  // for each document we modify.. but usually we're not
                  // modifying that many documents, so we'll let it slide for
                  // now
                  // XXX Minimongo.Matcher isn't up for the job, because we need
                  // to permit stuff like {$pull: {a: {$gt: 4}}}.. something
                  // like {$gt: 4} is not normally a complete selector.
                  // same issue as $elemMatch possibly?
                  const matcher = new Minimongo.Matcher(arg);
                  out = toPull.filter(element => !matcher.documentMatches(element).result);
                } else {
                  out = toPull.filter(element => !LocalCollection._f._equal(element, arg));
                }

                target[field] = out;
              },

              $pullAll(target, field, arg) {
                if (!(typeof arg === 'object' && arg instanceof Array)) {
                  throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const toPull = target[field];

                if (toPull === undefined) {
                  return;
                }

                if (!(toPull instanceof Array)) {
                  throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {
                    field
                  });
                }

                target[field] = toPull.filter(object => !arg.some(element => LocalCollection._f._equal(object, element)));
              },

              $rename(target, field, arg, keypath, doc) {
                // no idea why mongo has this restriction..
                if (keypath === arg) {
                  throw MinimongoError('$rename source must differ from target', {
                    field
                  });
                }

                if (target === null) {
                  throw MinimongoError('$rename source field invalid', {
                    field
                  });
                }

                if (typeof arg !== 'string') {
                  throw MinimongoError('$rename target must be a string', {
                    field
                  });
                }

                if (arg.includes('\0')) {
                  // Null bytes are not allowed in Mongo field names
                  // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names
                  throw MinimongoError('The \'to\' field for $rename cannot contain an embedded null byte', {
                    field
                  });
                }

                if (target === undefined) {
                  return;
                }

                const object = target[field];
                delete target[field];
                const keyparts = arg.split('.');
                const target2 = findModTarget(doc, keyparts, {
                  forbidArray: true
                });

                if (target2 === null) {
                  throw MinimongoError('$rename target field invalid', {
                    field
                  });
                }

                target2[keyparts.pop()] = object;
              },

              $bit(target, field, arg) {
                // XXX mongo only supports $bit on integers, and we only support
                // native javascript numbers (doubles) so far, so we can't support $bit
                throw MinimongoError('$bit is not supported', {
                  field
                });
              },

              $v() {// As discussed in https://github.com/meteor/meteor/issues/9623,
                // the `$v` operator is not needed by Meteor, but problems can occur if
                // it's not at least callable (as of Mongo >= 3.6). It's defined here as
                // a no-op to work around these problems.
              }

            };
            const NO_CREATE_MODIFIERS = {
              $pop: true,
              $pull: true,
              $pullAll: true,
              $rename: true,
              $unset: true
            }; // Make sure field names do not contain Mongo restricted
            // characters ('.', '$', '\0').
            // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names

            const invalidCharMsg = {
              $: 'start with \'$\'',
              '.': 'contain \'.\'',
              '\0': 'contain null bytes'
            }; // checks if all field names in an object are valid

            function assertHasValidFieldNames(doc) {
              if (doc && typeof doc === 'object') {
                JSON.stringify(doc, (key, value) => {
                  assertIsValidFieldName(key);
                  return value;
                });
              }
            }

            function assertIsValidFieldName(key) {
              let match;

              if (typeof key === 'string' && (match = key.match(/^\$|\.|\0/))) {
                throw MinimongoError("Key ".concat(key, " must not ").concat(invalidCharMsg[match[0]]));
              }
            } // for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],
            // and then you would operate on the 'e' property of the returned
            // object.
            //
            // if options.noCreate is falsey, creates intermediate levels of
            // structure as necessary, like mkdir -p (and raises an exception if
            // that would mean giving a non-numeric property to an array.) if
            // options.noCreate is true, return undefined instead.
            //
            // may modify the last element of keyparts to signal to the caller that it needs
            // to use a different value to index into the returned object (for example,
            // ['a', '01'] -> ['a', 1]).
            //
            // if forbidArray is true, return null if the keypath goes through an array.
            //
            // if options.arrayIndices is set, use its first element for the (first) '$' in
            // the path.


            function findModTarget(doc, keyparts) {
              let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              let usedArrayIndex = false;

              for (let i = 0; i < keyparts.length; i++) {
                const last = i === keyparts.length - 1;
                let keypart = keyparts[i];

                if (!isIndexable(doc)) {
                  if (options.noCreate) {
                    return undefined;
                  }

                  const error = MinimongoError("cannot use the part '".concat(keypart, "' to traverse ").concat(doc));
                  error.setPropertyError = true;
                  throw error;
                }

                if (doc instanceof Array) {
                  if (options.forbidArray) {
                    return null;
                  }

                  if (keypart === '$') {
                    if (usedArrayIndex) {
                      throw MinimongoError('Too many positional (i.e. \'$\') elements');
                    }

                    if (!options.arrayIndices || !options.arrayIndices.length) {
                      throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');
                    }

                    keypart = options.arrayIndices[0];
                    usedArrayIndex = true;
                  } else if (isNumericKey(keypart)) {
                    keypart = parseInt(keypart);
                  } else {
                    if (options.noCreate) {
                      return undefined;
                    }

                    throw MinimongoError("can't append to array using string field name [".concat(keypart, "]"));
                  }

                  if (last) {
                    keyparts[i] = keypart; // handle 'a.01'
                  }

                  if (options.noCreate && keypart >= doc.length) {
                    return undefined;
                  }

                  while (doc.length < keypart) {
                    doc.push(null);
                  }

                  if (!last) {
                    if (doc.length === keypart) {
                      doc.push({});
                    } else if (typeof doc[keypart] !== 'object') {
                      throw MinimongoError("can't modify field '".concat(keyparts[i + 1], "' of list value ") + JSON.stringify(doc[keypart]));
                    }
                  }
                } else {
                  assertIsValidFieldName(keypart);

                  if (!(keypart in doc)) {
                    if (options.noCreate) {
                      return undefined;
                    }

                    if (!last) {
                      doc[keypart] = {};
                    }
                  }
                }

                if (last) {
                  return doc;
                }

                doc = doc[keypart];
              } // notreached
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "matcher.js": function (_require6, _exports6, _module5) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/matcher.js                                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module5.export({
              default: () => Matcher
            });
            let LocalCollection;
            _module5.link("./local_collection.js", {
              default(v) {
                LocalCollection = v;
              }

            }, 0);
            let compileDocumentSelector, hasOwn, nothingMatcher;
            _module5.link("./common.js", {
              compileDocumentSelector(v) {
                compileDocumentSelector = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              nothingMatcher(v) {
                nothingMatcher = v;
              }

            }, 1);

            class Matcher {
              constructor(selector, isUpdate) {
                // A set (object mapping string -> *) of all of the document paths looked
                // at by the selector. Also includes the empty string if it may look at any
                // path (eg, $where).
                this._paths = {}; // Set to true if compilation finds a $near.

                this._hasGeoQuery = false; // Set to true if compilation finds a $where.

                this._hasWhere = false; // Set to false if compilation finds anything other than a simple equality
                // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used
                // with scalars as operands.

                this._isSimple = true; // Set to a dummy document which always matches this Matcher. Or set to null
                // if such document is too hard to find.

                this._matchingDocument = undefined; // A clone of the original selector. It may just be a function if the user
                // passed in a function; otherwise is definitely an object (eg, IDs are
                // translated into {_id: ID} first. Used by canBecomeTrueByModifier and
                // Sorter._useWithMatcher.

                this._selector = null;
                this._docMatcher = this._compileSelector(selector); // Set to true if selection is done for an update operation
                // Default is false
                // Used for $near array update (issue #3599)

                this._isUpdate = isUpdate;
              }

              documentMatches(doc) {
                if (doc !== Object(doc)) {
                  throw Error('documentMatches needs a document');
                }

                return this._docMatcher(doc);
              }

              hasGeoQuery() {
                return this._hasGeoQuery;
              }

              hasWhere() {
                return this._hasWhere;
              }

              isSimple() {
                return this._isSimple;
              } // Given a selector, return a function that takes one argument, a
              // document. It returns a result object.


              _compileSelector(selector) {
                // you can pass a literal function instead of a selector
                if (selector instanceof Function) {
                  this._isSimple = false;
                  this._selector = selector;

                  this._recordPathUsed('');

                  return doc => ({
                    result: !!selector.call(doc)
                  });
                } // shorthand -- scalar _id


                if (LocalCollection._selectorIsId(selector)) {
                  this._selector = {
                    _id: selector
                  };

                  this._recordPathUsed('_id');

                  return doc => ({
                    result: EJSON.equals(doc._id, selector)
                  });
                } // protect against dangerous selectors.  falsey and {_id: falsey} are both
                // likely programmer error, and not what you want, particularly for
                // destructive operations.


                if (!selector || hasOwn.call(selector, '_id') && !selector._id) {
                  this._isSimple = false;
                  return nothingMatcher;
                } // Top level can't be an array or true or binary.


                if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {
                  throw new Error("Invalid selector: ".concat(selector));
                }

                this._selector = EJSON.clone(selector);
                return compileDocumentSelector(selector, this, {
                  isRoot: true
                });
              } // Returns a list of key paths the given selector is looking for. It includes
              // the empty string if there is a $where.


              _getPaths() {
                return Object.keys(this._paths);
              }

              _recordPathUsed(path) {
                this._paths[path] = true;
              }

            }

            // helpers used by compiled selector code
            LocalCollection._f = {
              // XXX for _all and _in, consider building 'inquery' at compile time..
              _type(v) {
                if (typeof v === 'number') {
                  return 1;
                }

                if (typeof v === 'string') {
                  return 2;
                }

                if (typeof v === 'boolean') {
                  return 8;
                }

                if (Array.isArray(v)) {
                  return 4;
                }

                if (v === null) {
                  return 10;
                } // note that typeof(/x/) === "object"


                if (v instanceof RegExp) {
                  return 11;
                }

                if (typeof v === 'function') {
                  return 13;
                }

                if (v instanceof Date) {
                  return 9;
                }

                if (EJSON.isBinary(v)) {
                  return 5;
                }

                if (v instanceof MongoID.ObjectID) {
                  return 7;
                } // object


                return 3; // XXX support some/all of these:
                // 14, symbol
                // 15, javascript code with scope
                // 16, 18: 32-bit/64-bit integer
                // 17, timestamp
                // 255, minkey
                // 127, maxkey
              },

              // deep equality test: use for literal document and array matches
              _equal(a, b) {
                return EJSON.equals(a, b, {
                  keyOrderSensitive: true
                });
              },

              // maps a type code to a value that can be used to sort values of different
              // types
              _typeorder(t) {
                // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types
                // XXX what is the correct sort position for Javascript code?
                // ('100' in the matrix below)
                // XXX minkey/maxkey
                return [-1, // (not a type)
                1, // number
                2, // string
                3, // object
                4, // array
                5, // binary
                -1, // deprecated
                6, // ObjectID
                7, // bool
                8, // Date
                0, // null
                9, // RegExp
                -1, // deprecated
                100, // JS code
                2, // deprecated (symbol)
                100, // JS code
                1, // 32-bit int
                8, // Mongo timestamp
                1 // 64-bit int
                ][t];
              },

              // compare two values of unknown type according to BSON ordering
              // semantics. (as an extension, consider 'undefined' to be less than
              // any other value.) return negative if a is less, positive if b is
              // less, or 0 if equal
              _cmp(a, b) {
                if (a === undefined) {
                  return b === undefined ? 0 : -1;
                }

                if (b === undefined) {
                  return 1;
                }

                let ta = LocalCollection._f._type(a);

                let tb = LocalCollection._f._type(b);

                const oa = LocalCollection._f._typeorder(ta);

                const ob = LocalCollection._f._typeorder(tb);

                if (oa !== ob) {
                  return oa < ob ? -1 : 1;
                } // XXX need to implement this if we implement Symbol or integers, or
                // Timestamp


                if (ta !== tb) {
                  throw Error('Missing type coercion logic in _cmp');
                }

                if (ta === 7) {
                  // ObjectID
                  // Convert to string.
                  ta = tb = 2;
                  a = a.toHexString();
                  b = b.toHexString();
                }

                if (ta === 9) {
                  // Date
                  // Convert to millis.
                  ta = tb = 1;
                  a = a.getTime();
                  b = b.getTime();
                }

                if (ta === 1) // double
                  return a - b;
                if (tb === 2) // string
                  return a < b ? -1 : a === b ? 0 : 1;

                if (ta === 3) {
                  // Object
                  // this could be much more efficient in the expected case ...
                  const toArray = object => {
                    const result = [];
                    Object.keys(object).forEach(key => {
                      result.push(key, object[key]);
                    });
                    return result;
                  };

                  return LocalCollection._f._cmp(toArray(a), toArray(b));
                }

                if (ta === 4) {
                  // Array
                  for (let i = 0;; i++) {
                    if (i === a.length) {
                      return i === b.length ? 0 : -1;
                    }

                    if (i === b.length) {
                      return 1;
                    }

                    const s = LocalCollection._f._cmp(a[i], b[i]);

                    if (s !== 0) {
                      return s;
                    }
                  }
                }

                if (ta === 5) {
                  // binary
                  // Surprisingly, a small binary blob is always less than a large one in
                  // Mongo.
                  if (a.length !== b.length) {
                    return a.length - b.length;
                  }

                  for (let i = 0; i < a.length; i++) {
                    if (a[i] < b[i]) {
                      return -1;
                    }

                    if (a[i] > b[i]) {
                      return 1;
                    }
                  }

                  return 0;
                }

                if (ta === 8) {
                  // boolean
                  if (a) {
                    return b ? 0 : 1;
                  }

                  return b ? -1 : 0;
                }

                if (ta === 10) // null
                  return 0;
                if (ta === 11) // regexp
                  throw Error('Sorting not supported on regular expression'); // XXX
                // 13: javascript code
                // 14: symbol
                // 15: javascript code with scope
                // 16: 32-bit integer
                // 17: timestamp
                // 18: 64-bit integer
                // 255: minkey
                // 127: maxkey

                if (ta === 13) // javascript code
                  throw Error('Sorting not supported on Javascript code'); // XXX

                throw Error('Unknown type to sort');
              }

            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "minimongo_common.js": function (_require7, _exports7, _module6) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/minimongo_common.js                                                                              //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            let LocalCollection_;
            _module6.link("./local_collection.js", {
              default(v) {
                LocalCollection_ = v;
              }

            }, 0);
            let Matcher;
            _module6.link("./matcher.js", {
              default(v) {
                Matcher = v;
              }

            }, 1);
            let Sorter;
            _module6.link("./sorter.js", {
              default(v) {
                Sorter = v;
              }

            }, 2);
            LocalCollection = LocalCollection_;
            Minimongo = {
              LocalCollection: LocalCollection_,
              Matcher,
              Sorter
            };
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "observe_handle.js": function (_require8, _exports8, _module7) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/observe_handle.js                                                                                //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module7.export({
              default: () => ObserveHandle
            });

            class ObserveHandle {}
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sorter.js": function (_require9, _exports9, _module8) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/minimongo/sorter.js                                                                                        //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module8.export({
              default: () => Sorter
            });
            let ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;
            _module8.link("./common.js", {
              ELEMENT_OPERATORS(v) {
                ELEMENT_OPERATORS = v;
              },

              equalityElementMatcher(v) {
                equalityElementMatcher = v;
              },

              expandArraysInBranches(v) {
                expandArraysInBranches = v;
              },

              hasOwn(v) {
                hasOwn = v;
              },

              isOperatorObject(v) {
                isOperatorObject = v;
              },

              makeLookupFunction(v) {
                makeLookupFunction = v;
              },

              regexpElementMatcher(v) {
                regexpElementMatcher = v;
              }

            }, 0);

            class Sorter {
              constructor(spec) {
                this._sortSpecParts = [];
                this._sortFunction = null;

                const addSpecPart = (path, ascending) => {
                  if (!path) {
                    throw Error('sort keys must be non-empty');
                  }

                  if (path.charAt(0) === '$') {
                    throw Error("unsupported sort key: ".concat(path));
                  }

                  this._sortSpecParts.push({
                    ascending,
                    lookup: makeLookupFunction(path, {
                      forSort: true
                    }),
                    path
                  });
                };

                if (spec instanceof Array) {
                  spec.forEach(element => {
                    if (typeof element === 'string') {
                      addSpecPart(element, true);
                    } else {
                      addSpecPart(element[0], element[1] !== 'desc');
                    }
                  });
                } else if (typeof spec === 'object') {
                  Object.keys(spec).forEach(key => {
                    addSpecPart(key, spec[key] >= 0);
                  });
                } else if (typeof spec === 'function') {
                  this._sortFunction = spec;
                } else {
                  throw Error("Bad sort specification: ".concat(JSON.stringify(spec)));
                } // If a function is specified for sorting, we skip the rest.


                if (this._sortFunction) {
                  return;
                } // To implement affectedByModifier, we piggy-back on top of Matcher's
                // affectedByModifier code; we create a selector that is affected by the
                // same modifiers as this sort order. This is only implemented on the
                // server.


                if (this.affectedByModifier) {
                  const selector = {};

                  this._sortSpecParts.forEach(spec => {
                    selector[spec.path] = 1;
                  });

                  this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);
                }

                this._keyComparator = composeComparators(this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i)));
              }

              getComparator(options) {
                // If sort is specified or have no distances, just use the comparator from
                // the source specification (which defaults to "everything is equal".
                // issue #3599
                // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation
                // sort effectively overrides $near
                if (this._sortSpecParts.length || !options || !options.distances) {
                  return this._getBaseComparator();
                }

                const distances = options.distances; // Return a comparator which compares using $near distances.

                return (a, b) => {
                  if (!distances.has(a._id)) {
                    throw Error("Missing distance for ".concat(a._id));
                  }

                  if (!distances.has(b._id)) {
                    throw Error("Missing distance for ".concat(b._id));
                  }

                  return distances.get(a._id) - distances.get(b._id);
                };
              } // Takes in two keys: arrays whose lengths match the number of spec
              // parts. Returns negative, 0, or positive based on using the sort spec to
              // compare fields.


              _compareKeys(key1, key2) {
                if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {
                  throw Error('Key has wrong length');
                }

                return this._keyComparator(key1, key2);
              } // Iterates over each possible "key" from doc (ie, over each branch), calling
              // 'cb' with the key.


              _generateKeysFromDoc(doc, cb) {
                if (this._sortSpecParts.length === 0) {
                  throw new Error('can\'t generate keys without a spec');
                }

                const pathFromIndices = indices => "".concat(indices.join(','), ",");

                let knownPaths = null; // maps index -> ({'' -> value} or {path -> value})

                const valuesByIndexAndPath = this._sortSpecParts.map(spec => {
                  // Expand any leaf arrays that we find, and ignore those arrays
                  // themselves.  (We never sort based on an array itself.)
                  let branches = expandArraysInBranches(spec.lookup(doc), true); // If there are no values for a key (eg, key goes to an empty array),
                  // pretend we found one undefined value.

                  if (!branches.length) {
                    branches = [{
                      value: void 0
                    }];
                  }

                  const element = Object.create(null);
                  let usedPaths = false;
                  branches.forEach(branch => {
                    if (!branch.arrayIndices) {
                      // If there are no array indices for a branch, then it must be the
                      // only branch, because the only thing that produces multiple branches
                      // is the use of arrays.
                      if (branches.length > 1) {
                        throw Error('multiple branches but no array used?');
                      }

                      element[''] = branch.value;
                      return;
                    }

                    usedPaths = true;
                    const path = pathFromIndices(branch.arrayIndices);

                    if (hasOwn.call(element, path)) {
                      throw Error("duplicate path: ".concat(path));
                    }

                    element[path] = branch.value; // If two sort fields both go into arrays, they have to go into the
                    // exact same arrays and we have to find the same paths.  This is
                    // roughly the same condition that makes MongoDB throw this strange
                    // error message.  eg, the main thing is that if sort spec is {a: 1,
                    // b:1} then a and b cannot both be arrays.
                    //
                    // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'
                    // and 'a.x.y' are both arrays, but we don't allow this for now.
                    // #NestedArraySort
                    // XXX achieve full compatibility here

                    if (knownPaths && !hasOwn.call(knownPaths, path)) {
                      throw Error('cannot index parallel arrays');
                    }
                  });

                  if (knownPaths) {
                    // Similarly to above, paths must match everywhere, unless this is a
                    // non-array field.
                    if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {
                      throw Error('cannot index parallel arrays!');
                    }
                  } else if (usedPaths) {
                    knownPaths = {};
                    Object.keys(element).forEach(path => {
                      knownPaths[path] = true;
                    });
                  }

                  return element;
                });

                if (!knownPaths) {
                  // Easy case: no use of arrays.
                  const soleKey = valuesByIndexAndPath.map(values => {
                    if (!hasOwn.call(values, '')) {
                      throw Error('no value in sole key case?');
                    }

                    return values[''];
                  });
                  cb(soleKey);
                  return;
                }

                Object.keys(knownPaths).forEach(path => {
                  const key = valuesByIndexAndPath.map(values => {
                    if (hasOwn.call(values, '')) {
                      return values[''];
                    }

                    if (!hasOwn.call(values, path)) {
                      throw Error('missing path?');
                    }

                    return values[path];
                  });
                  cb(key);
                });
              } // Returns a comparator that represents the sort specification (but not
              // including a possible geoquery distance tie-breaker).


              _getBaseComparator() {
                if (this._sortFunction) {
                  return this._sortFunction;
                } // If we're only sorting on geoquery distance and no specs, just say
                // everything is equal.


                if (!this._sortSpecParts.length) {
                  return (doc1, doc2) => 0;
                }

                return (doc1, doc2) => {
                  const key1 = this._getMinKeyFromDoc(doc1);

                  const key2 = this._getMinKeyFromDoc(doc2);

                  return this._compareKeys(key1, key2);
                };
              } // Finds the minimum key from the doc, according to the sort specs.  (We say
              // "minimum" here but this is with respect to the sort spec, so "descending"
              // sort fields mean we're finding the max for that field.)
              //
              // Note that this is NOT "find the minimum value of the first field, the
              // minimum value of the second field, etc"... it's "choose the
              // lexicographically minimum value of the key vector, allowing only keys which
              // you can find along the same paths".  ie, for a doc {a: [{x: 0, y: 5}, {x:
              // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and
              // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.


              _getMinKeyFromDoc(doc) {
                let minKey = null;

                this._generateKeysFromDoc(doc, key => {
                  if (minKey === null) {
                    minKey = key;
                    return;
                  }

                  if (this._compareKeys(key, minKey) < 0) {
                    minKey = key;
                  }
                });

                return minKey;
              }

              _getPaths() {
                return this._sortSpecParts.map(part => part.path);
              } // Given an index 'i', returns a comparator that compares two key arrays based
              // on field 'i'.


              _keyFieldComparator(i) {
                const invert = !this._sortSpecParts[i].ascending;
                return (key1, key2) => {
                  const compare = LocalCollection._f._cmp(key1[i], key2[i]);

                  return invert ? -compare : compare;
                };
              }

            }

            // Given an array of comparators
            // (functions (a,b)->(negative or positive or zero)), returns a single
            // comparator which uses each comparator in order and returns the first
            // non-zero value.
            function composeComparators(comparatorArray) {
              return (a, b) => {
                for (let i = 0; i < comparatorArray.length; ++i) {
                  const compare = comparatorArray[i](a, b);

                  if (compare !== 0) {
                    return compare;
                  }
                }

                return 0;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports3 = _require3("/node_modules/meteor/minimongo/minimongo_client.js");

  /* Exports */
  Package._define("minimongo", _exports3, {
    LocalCollection: LocalCollection,
    Minimongo: Minimongo,
    MinimongoTest: MinimongoTest,
    MinimongoError: MinimongoError
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var EJSON = Package.ejson.EJSON;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var check, Match;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "check": { "match.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/match.js                                                                                       //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              check: () => check,
              Match: () => Match
            });
            let isPlainObject;
            _module.link("./isPlainObject", {
              isPlainObject(v) {
                isPlainObject = v;
              }

            }, 0);
            // Things we explicitly do NOT support:
            //    - heterogenous arrays
            const currentArgumentChecker = new Meteor.EnvironmentVariable();
            const hasOwn = Object.prototype.hasOwnProperty;
            /**
             * @summary Check that a value matches a [pattern](#matchpatterns).
             * If the value does not match the pattern, throw a `Match.Error`.
             *
             * Particularly useful to assert that arguments to a function have the right
             * types and structure.
             * @locus Anywhere
             * @param {Any} value The value to check
             * @param {MatchPattern} pattern The pattern to match `value` against
             */

            function check(value, pattern) {
              // Record that check got called, if somebody cared.
              //
              // We use getOrNullIfOutsideFiber so that it's OK to call check()
              // from non-Fiber server contexts; the downside is that if you forget to
              // bindEnvironment on some random callback in your method/publisher,
              // it might not find the argumentChecker and you'll get an error about
              // not checking an argument that it looks like you're checking (instead
              // of just getting a "Node code must run in a Fiber" error).
              const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();

              if (argChecker) {
                argChecker.checking(value);
              }

              const result = testSubtree(value, pattern);

              if (result) {
                const err = new Match.Error(result.message);

                if (result.path) {
                  err.message += " in field ".concat(result.path);
                  err.path = result.path;
                }

                throw err;
              }
            }

            ;
            /**
             * @namespace Match
             * @summary The namespace for all Match types and methods.
             */

            const Match = {
              Optional: function (pattern) {
                return new Optional(pattern);
              },
              Maybe: function (pattern) {
                return new Maybe(pattern);
              },
              OneOf: function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return new OneOf(args);
              },
              Any: ['__any__'],
              Where: function (condition) {
                return new Where(condition);
              },
              ObjectIncluding: function (pattern) {
                return new ObjectIncluding(pattern);
              },
              ObjectWithValues: function (pattern) {
                return new ObjectWithValues(pattern);
              },
              // Matches only signed 32-bit integers
              Integer: ['__integer__'],
              // XXX matchers should know how to describe themselves for errors
              Error: Meteor.makeErrorType('Match.Error', function (msg) {
                this.message = "Match error: ".concat(msg); // The path of the value that failed to match. Initially empty, this gets
                // populated by catching and rethrowing the exception as it goes back up the
                // stack.
                // E.g.: "vals[3].entity.created"

                this.path = ''; // If this gets sent over DDP, don't give full internal details but at least
                // provide something better than 500 Internal server error.

                this.sanitizedError = new Meteor.Error(400, 'Match failed');
              }),

              // Tests to see if value matches pattern. Unlike check, it merely returns true
              // or false (unless an error other than Match.Error was thrown). It does not
              // interact with _failIfArgumentsAreNotAllChecked.
              // XXX maybe also implement a Match.match which returns more information about
              //     failures but without using exception handling or doing what check()
              //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion

              /**
               * @summary Returns true if the value matches the pattern.
               * @locus Anywhere
               * @param {Any} value The value to check
               * @param {MatchPattern} pattern The pattern to match `value` against
               */
              test(value, pattern) {
                return !testSubtree(value, pattern);
              },

              // Runs `f.apply(context, args)`. If check() is not called on every element of
              // `args` (either directly or in the first level of an array), throws an error
              // (using `description` in the message).
              _failIfArgumentsAreNotAllChecked(f, context, args, description) {
                const argChecker = new ArgumentChecker(args, description);
                const result = currentArgumentChecker.withValue(argChecker, () => f.apply(context, args)); // If f didn't itself throw, make sure it checked all of its arguments.

                argChecker.throwUnlessAllArgumentsHaveBeenChecked();
                return result;
              }

            };

            class Optional {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class Maybe {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class OneOf {
              constructor(choices) {
                if (!choices || choices.length === 0) {
                  throw new Error('Must provide at least one choice to Match.OneOf');
                }

                this.choices = choices;
              }

            }

            class Where {
              constructor(condition) {
                this.condition = condition;
              }

            }

            class ObjectIncluding {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            class ObjectWithValues {
              constructor(pattern) {
                this.pattern = pattern;
              }

            }

            const stringForErrorMessage = function (value) {
              let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (value === null) {
                return 'null';
              }

              if (options.onlyShowType) {
                return typeof value;
              } // Your average non-object things.  Saves from doing the try/catch below for.


              if (typeof value !== 'object') {
                return EJSON.stringify(value);
              }

              try {
                // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)
                // If the native stringify is going to choke, EJSON.stringify is going to choke too.
                JSON.stringify(value);
              } catch (stringifyError) {
                if (stringifyError.name === 'TypeError') {
                  return typeof value;
                }
              }

              return EJSON.stringify(value);
            };

            const typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'], // While we don't allow undefined/function in EJSON, this is good for optional
            // arguments with OneOf.
            [Function, 'function'], [undefined, 'undefined']]; // Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.

            const testSubtree = (value, pattern) => {
              // Match anything!
              if (pattern === Match.Any) {
                return false;
              } // Basic atomic types.
              // Do not match boxed objects (e.g. String, Boolean)


              for (let i = 0; i < typeofChecks.length; ++i) {
                if (pattern === typeofChecks[i][0]) {
                  if (typeof value === typeofChecks[i][1]) {
                    return false;
                  }

                  return {
                    message: "Expected ".concat(typeofChecks[i][1], ", got ").concat(stringForErrorMessage(value, {
                      onlyShowType: true
                    })),
                    path: ''
                  };
                }
              }

              if (pattern === null) {
                if (value === null) {
                  return false;
                }

                return {
                  message: "Expected null, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.


              if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {
                if (value === pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern, ", got ").concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // Match.Integer is special type encoded with array


              if (pattern === Match.Integer) {
                // There is no consistent and reliable way to check if variable is a 64-bit
                // integer. One of the popular solutions is to get reminder of division by 1
                // but this method fails on really large floats with big precision.
                // E.g.: 1.348192308491824e+23 % 1 === 0 in V8
                // Bitwise operators work consistantly but always cast variable to 32-bit
                // signed integer according to JavaScript specs.
                if (typeof value === 'number' && (value | 0) === value) {
                  return false;
                }

                return {
                  message: "Expected Integer, got ".concat(stringForErrorMessage(value)),
                  path: ''
                };
              } // 'Object' is shorthand for Match.ObjectIncluding({});


              if (pattern === Object) {
                pattern = Match.ObjectIncluding({});
              } // Array (checked AFTER Any, which is implemented as an Array).


              if (pattern instanceof Array) {
                if (pattern.length !== 1) {
                  return {
                    message: "Bad pattern: arrays must have one type element ".concat(stringForErrorMessage(pattern)),
                    path: ''
                  };
                }

                if (!Array.isArray(value) && !isArguments(value)) {
                  return {
                    message: "Expected array, got ".concat(stringForErrorMessage(value)),
                    path: ''
                  };
                }

                for (let i = 0, length = value.length; i < length; i++) {
                  const result = testSubtree(value[i], pattern[0]);

                  if (result) {
                    result.path = _prependPath(i, result.path);
                    return result;
                  }
                }

                return false;
              } // Arbitrary validation checks. The condition can return false or throw a
              // Match.Error (ie, it can internally use check()) to fail.


              if (pattern instanceof Where) {
                let result;

                try {
                  result = pattern.condition(value);
                } catch (err) {
                  if (!(err instanceof Match.Error)) {
                    throw err;
                  }

                  return {
                    message: err.message,
                    path: err.path
                  };
                }

                if (result) {
                  return false;
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.Where validation',
                  path: ''
                };
              }

              if (pattern instanceof Maybe) {
                pattern = Match.OneOf(undefined, null, pattern.pattern);
              } else if (pattern instanceof Optional) {
                pattern = Match.OneOf(undefined, pattern.pattern);
              }

              if (pattern instanceof OneOf) {
                for (let i = 0; i < pattern.choices.length; ++i) {
                  const result = testSubtree(value, pattern.choices[i]);

                  if (!result) {
                    // No error? Yay, return.
                    return false;
                  } // Match errors just mean try another choice.
                } // XXX this error is terrible


                return {
                  message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',
                  path: ''
                };
              } // A function that isn't something we special-case is assumed to be a
              // constructor.


              if (pattern instanceof Function) {
                if (value instanceof pattern) {
                  return false;
                }

                return {
                  message: "Expected ".concat(pattern.name || 'particular constructor'),
                  path: ''
                };
              }

              let unknownKeysAllowed = false;
              let unknownKeyPattern;

              if (pattern instanceof ObjectIncluding) {
                unknownKeysAllowed = true;
                pattern = pattern.pattern;
              }

              if (pattern instanceof ObjectWithValues) {
                unknownKeysAllowed = true;
                unknownKeyPattern = [pattern.pattern];
                pattern = {}; // no required keys
              }

              if (typeof pattern !== 'object') {
                return {
                  message: 'Bad pattern: unknown pattern type',
                  path: ''
                };
              } // An object, with required and optional keys. Note that this does NOT do
              // structural matches against objects of special types that happen to match
              // the pattern: this really needs to be a plain old {Object}!


              if (typeof value !== 'object') {
                return {
                  message: "Expected object, got ".concat(typeof value),
                  path: ''
                };
              }

              if (value === null) {
                return {
                  message: "Expected object, got null",
                  path: ''
                };
              }

              if (!isPlainObject(value)) {
                return {
                  message: "Expected plain object",
                  path: ''
                };
              }

              const requiredPatterns = Object.create(null);
              const optionalPatterns = Object.create(null);
              Object.keys(pattern).forEach(key => {
                const subPattern = pattern[key];

                if (subPattern instanceof Optional || subPattern instanceof Maybe) {
                  optionalPatterns[key] = subPattern.pattern;
                } else {
                  requiredPatterns[key] = subPattern;
                }
              });

              for (let key in Object(value)) {
                const subValue = value[key];

                if (hasOwn.call(requiredPatterns, key)) {
                  const result = testSubtree(subValue, requiredPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }

                  delete requiredPatterns[key];
                } else if (hasOwn.call(optionalPatterns, key)) {
                  const result = testSubtree(subValue, optionalPatterns[key]);

                  if (result) {
                    result.path = _prependPath(key, result.path);
                    return result;
                  }
                } else {
                  if (!unknownKeysAllowed) {
                    return {
                      message: 'Unknown key',
                      path: key
                    };
                  }

                  if (unknownKeyPattern) {
                    const result = testSubtree(subValue, unknownKeyPattern[0]);

                    if (result) {
                      result.path = _prependPath(key, result.path);
                      return result;
                    }
                  }
                }
              }

              const keys = Object.keys(requiredPatterns);

              if (keys.length) {
                return {
                  message: "Missing key '".concat(keys[0], "'"),
                  path: ''
                };
              }
            };

            class ArgumentChecker {
              constructor(args, description) {
                // Make a SHALLOW copy of the arguments. (We'll be doing identity checks
                // against its contents.)
                this.args = [...args]; // Since the common case will be to check arguments in order, and we splice
                // out arguments when we check them, make it so we splice out from the end
                // rather than the beginning.

                this.args.reverse();
                this.description = description;
              }

              checking(value) {
                if (this._checkingOneValue(value)) {
                  return;
                } // Allow check(arguments, [String]) or check(arguments.slice(1), [String])
                // or check([foo, bar], [String]) to count... but only if value wasn't
                // itself an argument.


                if (Array.isArray(value) || isArguments(value)) {
                  Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));
                }
              }

              _checkingOneValue(value) {
                for (let i = 0; i < this.args.length; ++i) {
                  // Is this value one of the arguments? (This can have a false positive if
                  // the argument is an interned primitive, but it's still a good enough
                  // check.)
                  // (NaN is not === to itself, so we have to check specially.)
                  if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {
                    this.args.splice(i, 1);
                    return true;
                  }
                }

                return false;
              }

              throwUnlessAllArgumentsHaveBeenChecked() {
                if (this.args.length > 0) throw new Error("Did not check() all arguments during ".concat(this.description));
              }

            }

            const _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof']; // Assumes the base of path is already escaped properly
            // returns key + base

            const _prependPath = (key, base) => {
              if (typeof key === 'number' || key.match(/^[0-9]+$/)) {
                key = "[".concat(key, "]");
              } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {
                key = JSON.stringify([key]);
              }

              if (base && base[0] !== '[') {
                return "".concat(key, ".").concat(base);
              }

              return key + base;
            };

            const isObject = value => typeof value === 'object' && value !== null;

            const baseIsArguments = item => isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';

            const isArguments = baseIsArguments(function () {
              return arguments;
            }()) ? baseIsArguments : value => isObject(value) && typeof value.callee === 'function';
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "isPlainObject.js": function (_require3, _exports3, _module2) {

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                               //
            // packages/check/isPlainObject.js                                                                               //
            //                                                                                                               //
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module2.export({
              isPlainObject: () => isPlainObject
            });
            // Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.
            const class2type = {};
            const toString = class2type.toString;
            const hasOwn = Object.prototype.hasOwnProperty;
            const fnToString = hasOwn.toString;
            const ObjectFunctionString = fnToString.call(Object);
            const getProto = Object.getPrototypeOf;

            const isPlainObject = obj => {
              let proto;
              let Ctor; // Detect obvious negatives
              // Use toString instead of jQuery.type to catch host objects

              if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
              }

              proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

              if (!proto) {
                return true;
              } // Objects with prototype are plain iff they were constructed by a global Object function


              Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
              return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/check/match.js");

  /* Exports */
  Package._define("check", _exports2, {
    check: check,
    Match: Match
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Retry;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "retry": { "retry.js": function (_require, _exports, _module) {

            //////////////////////////////////////////////////////////////////////////////////
            //                                                                              //
            // packages/retry/retry.js                                                      //
            //                                                                              //
            //////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Retry: () => Retry
            });

            class Retry {
              constructor() {
                let {
                  baseTimeout = 1000,
                  exponent = 2.2,
                  // The default is high-ish to ensure a server can recover from a
                  // failure caused by load.
                  maxTimeout = 5 * 60 * 1000,
                  minTimeout = 10,
                  minCount = 2,
                  fuzz = 0.5
                } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                this.baseTimeout = baseTimeout;
                this.exponent = exponent;
                this.maxTimeout = maxTimeout;
                this.minTimeout = minTimeout;
                this.minCount = minCount;
                this.fuzz = fuzz;
                this.retryTimer = null;
              } // Reset a pending retry, if any.


              clear() {
                if (this.retryTimer) {
                  clearTimeout(this.retryTimer);
                }

                this.retryTimer = null;
              } // Calculate how long to wait in milliseconds to retry, based on the
              // `count` of which retry this is.


              _timeout(count) {
                if (count < this.minCount) {
                  return this.minTimeout;
                } // fuzz the timeout randomly, to avoid reconnect storms when a
                // server goes down.


                var timeout = Math.min(this.maxTimeout, this.baseTimeout * Math.pow(this.exponent, count)) * (Random.fraction() * this.fuzz + (1 - this.fuzz / 2));
                return timeout;
              } // Call `fn` after a delay, based on the `count` of which retry this is.


              retryLater(count, fn) {
                var timeout = this._timeout(count);

                if (this.retryTimer) clearTimeout(this.retryTimer);
                this.retryTimer = Meteor.setTimeout(fn, timeout);
                return timeout;
              }

            }
            //////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/retry/retry.js");

  /* Exports */
  Package._define("retry", _exports2, {
    Retry: Retry
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, Hook;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "callback-hook": { "hook.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                 //
            // packages/callback-hook/hook.js                                                                  //
            //                                                                                                 //
            /////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Hook: () => Hook
            });
            // XXX This pattern is under development. Do not add more callsites
            // using this package for now. See:
            // https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f
            //
            // Encapsulates the pattern of registering callbacks on a hook.
            //
            // The `each` method of the hook calls its iterator function argument
            // with each registered callback.  This allows the hook to
            // conditionally decide not to call the callback (if, for example, the
            // observed object has been closed or terminated).
            //
            // By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be
            // called with the Meteor environment of the calling code that
            // registered the callback. Override by passing { bindEnvironment: false }
            // to the constructor.
            //
            // Registering a callback returns an object with a single `stop`
            // method which unregisters the callback.
            //
            // The code is careful to allow a callback to be safely unregistered
            // while the callbacks are being iterated over.
            //
            // If the hook is configured with the `exceptionHandler` option, the
            // handler will be called if a called callback throws an exception.
            // By default (if the exception handler doesn't itself throw an
            // exception, or if the iterator function doesn't return a falsy value
            // to terminate the calling of callbacks), the remaining callbacks
            // will still be called.
            //
            // Alternatively, the `debugPrintExceptions` option can be specified
            // as string describing the callback.  On an exception the string and
            // the exception will be printed to the console log with
            // `Meteor._debug`, and the exception otherwise ignored.
            //
            // If an exception handler isn't specified, exceptions thrown in the
            // callback will propagate up to the iterator function, and will
            // terminate calling the remaining callbacks if not caught.
            const hasOwn = Object.prototype.hasOwnProperty;

            class Hook {
              constructor(options) {
                options = options || {};
                this.nextCallbackId = 0;
                this.callbacks = Object.create(null); // Whether to wrap callbacks with Meteor.bindEnvironment

                this.bindEnvironment = true;

                if (options.bindEnvironment === false) {
                  this.bindEnvironment = false;
                }

                if (options.exceptionHandler) {
                  this.exceptionHandler = options.exceptionHandler;
                } else if (options.debugPrintExceptions) {
                  if (typeof options.debugPrintExceptions !== "string") {
                    throw new Error("Hook option debugPrintExceptions should be a string");
                  }

                  this.exceptionHandler = options.debugPrintExceptions;
                }
              }

              register(callback) {
                var exceptionHandler = this.exceptionHandler || function (exception) {
                  // Note: this relies on the undocumented fact that if bindEnvironment's
                  // onException throws, and you are invoking the callback either in the
                  // browser or from within a Fiber in Node, the exception is propagated.
                  throw exception;
                };

                if (this.bindEnvironment) {
                  callback = Meteor.bindEnvironment(callback, exceptionHandler);
                } else {
                  callback = dontBindEnvironment(callback, exceptionHandler);
                }

                var id = this.nextCallbackId++;
                this.callbacks[id] = callback;
                return {
                  stop: () => {
                    delete this.callbacks[id];
                  }
                };
              } // For each registered callback, call the passed iterator function
              // with the callback.
              //
              // The iterator function can choose whether or not to call the
              // callback.  (For example, it might not call the callback if the
              // observed object has been closed or terminated).
              //
              // The iteration is stopped if the iterator function returns a falsy
              // value or throws an exception.
              //


              each(iterator) {
                // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't
                // run them to completion (and exceptions thrown from onException are not
                // propagated), so we need to be in a Fiber.
                Meteor._nodeCodeMustBeInFiber();

                var ids = Object.keys(this.callbacks);

                for (var i = 0; i < ids.length; ++i) {
                  var id = ids[i]; // check to see if the callback was removed during iteration

                  if (hasOwn.call(this.callbacks, id)) {
                    var callback = this.callbacks[id];

                    if (!iterator(callback)) {
                      break;
                    }
                  }
                }
              }

            }

            // Copied from Meteor.bindEnvironment and removed all the env stuff.
            function dontBindEnvironment(func, onException, _this) {
              if (!onException || typeof onException === 'string') {
                var description = onException || "callback of async function";

                onException = function (error) {
                  Meteor._debug("Exception in " + description + ":", error && error.stack || error);
                };
              }

              return function () {
                try {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  var ret = func.apply(_this, args);
                } catch (e) {
                  onException(e);
                }

                return ret;
              };
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/callback-hook/hook.js");

  /* Exports */
  Package._define("callback-hook", _exports2, {
    Hook: Hook
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var DDPCommon;

  var _require = meteorInstall({ "node_modules": { "meteor": { "ddp-common": { "namespace.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/namespace.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            /**
             * @namespace DDPCommon
             * @summary Namespace for DDPCommon-related methods/classes. Shared between 
             * `ddp-client` and `ddp-server`, where the ddp-client is the implementation
             * of a ddp client for both client AND server; and the ddp server is the
             * implementation of the livedata server and stream server. Common 
             * functionality shared between both can be shared under this namespace
             */
            DDPCommon = {};
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "heartbeat.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/heartbeat.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Heartbeat options:
            //   heartbeatInterval: interval to send pings, in milliseconds.
            //   heartbeatTimeout: timeout to close the connection if a reply isn't
            //     received, in milliseconds.
            //   sendPing: function to call to send a ping on the connection.
            //   onTimeout: function to call to close the connection.
            DDPCommon.Heartbeat = class Heartbeat {
              constructor(options) {
                this.heartbeatInterval = options.heartbeatInterval;
                this.heartbeatTimeout = options.heartbeatTimeout;
                this._sendPing = options.sendPing;
                this._onTimeout = options.onTimeout;
                this._seenPacket = false;
                this._heartbeatIntervalHandle = null;
                this._heartbeatTimeoutHandle = null;
              }

              stop() {
                this._clearHeartbeatIntervalTimer();

                this._clearHeartbeatTimeoutTimer();
              }

              start() {
                this.stop();

                this._startHeartbeatIntervalTimer();
              }

              _startHeartbeatIntervalTimer() {
                this._heartbeatIntervalHandle = Meteor.setInterval(() => this._heartbeatIntervalFired(), this.heartbeatInterval);
              }

              _startHeartbeatTimeoutTimer() {
                this._heartbeatTimeoutHandle = Meteor.setTimeout(() => this._heartbeatTimeoutFired(), this.heartbeatTimeout);
              }

              _clearHeartbeatIntervalTimer() {
                if (this._heartbeatIntervalHandle) {
                  Meteor.clearInterval(this._heartbeatIntervalHandle);
                  this._heartbeatIntervalHandle = null;
                }
              }

              _clearHeartbeatTimeoutTimer() {
                if (this._heartbeatTimeoutHandle) {
                  Meteor.clearTimeout(this._heartbeatTimeoutHandle);
                  this._heartbeatTimeoutHandle = null;
                }
              } // The heartbeat interval timer is fired when we should send a ping.


              _heartbeatIntervalFired() {
                // don't send ping if we've seen a packet since we last checked,
                // *or* if we have already sent a ping and are awaiting a timeout.
                // That shouldn't happen, but it's possible if
                // `this.heartbeatInterval` is smaller than
                // `this.heartbeatTimeout`.
                if (!this._seenPacket && !this._heartbeatTimeoutHandle) {
                  this._sendPing(); // Set up timeout, in case a pong doesn't arrive in time.


                  this._startHeartbeatTimeoutTimer();
                }

                this._seenPacket = false;
              } // The heartbeat timeout timer is fired when we sent a ping, but we
              // timed out waiting for the pong.


              _heartbeatTimeoutFired() {
                this._heartbeatTimeoutHandle = null;

                this._onTimeout();
              }

              messageReceived() {
                // Tell periodic checkin that we have seen a packet, and thus it
                // does not need to send a ping this cycle.
                this._seenPacket = true; // If we were waiting for a pong, we got it.

                if (this._heartbeatTimeoutHandle) {
                  this._clearHeartbeatTimeoutTimer();
                }
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "utils.js": function (_require2, _exports, _module) {

            _module.export({
              hasOwn: () => hasOwn,
              slice: () => slice,
              keys: () => keys,
              isEmpty: () => isEmpty,
              last: () => last
            });
            const hasOwn = Object.prototype.hasOwnProperty;
            const slice = Array.prototype.slice;

            function keys(obj) {
              return Object.keys(Object(obj));
            }

            function isEmpty(obj) {
              if (obj == null) {
                return true;
              }

              if (Array.isArray(obj) || typeof obj === "string") {
                return obj.length === 0;
              }

              for (const key in obj) {
                if (hasOwn.call(obj, key)) {
                  return false;
                }
              }

              return true;
            }

            function last(array, n, guard) {
              if (array == null) {
                return;
              }

              if (n == null || guard) {
                return array[array.length - 1];
              }

              return slice.call(array, Math.max(array.length - n, 0));
            }

            DDPCommon.SUPPORTED_DDP_VERSIONS = ['1', 'pre2', 'pre1'];

            DDPCommon.parseDDP = function (stringMessage) {
              try {
                var msg = JSON.parse(stringMessage);
              } catch (e) {
                Meteor._debug("Discarding message with invalid JSON", stringMessage);

                return null;
              } // DDP messages must be objects.


              if (msg === null || typeof msg !== 'object') {
                Meteor._debug("Discarding non-object DDP message", stringMessage);

                return null;
              } // massage msg to get it into "abstract ddp" rather than "wire ddp" format.
              // switch between "cleared" rep of unsetting fields and "undefined"
              // rep of same


              if (hasOwn.call(msg, 'cleared')) {
                if (!hasOwn.call(msg, 'fields')) {
                  msg.fields = {};
                }

                msg.cleared.forEach(clearKey => {
                  msg.fields[clearKey] = undefined;
                });
                delete msg.cleared;
              }

              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(msg, field)) {
                  msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);
                }
              });
              return msg;
            };

            DDPCommon.stringifyDDP = function (msg) {
              const copy = EJSON.clone(msg); // swizzle 'changed' messages from 'fields undefined' rep to 'fields
              // and cleared' rep

              if (hasOwn.call(msg, 'fields')) {
                const cleared = [];
                Object.keys(msg.fields).forEach(key => {
                  const value = msg.fields[key];

                  if (typeof value === "undefined") {
                    cleared.push(key);
                    delete copy.fields[key];
                  }
                });

                if (!isEmpty(cleared)) {
                  copy.cleared = cleared;
                }

                if (isEmpty(copy.fields)) {
                  delete copy.fields;
                }
              } // adjust types to basic


              ['fields', 'params', 'result'].forEach(field => {
                if (hasOwn.call(copy, field)) {
                  copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);
                }
              });

              if (msg.id && typeof msg.id !== 'string') {
                throw new Error("Message id is not a string");
              }

              return JSON.stringify(copy);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "method_invocation.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/method_invocation.js                                                                           //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // Instance name is this because it is usually referred to as this inside a
            // method definition

            /**
             * @summary The state for a single invocation of a method, referenced by this
             * inside a method definition.
             * @param {Object} options
             * @instanceName this
             * @showInstanceName true
             */
            DDPCommon.MethodInvocation = class MethodInvocation {
              constructor(options) {
                // true if we're running not the actual method, but a stub (that is,
                // if we're on a client (which may be a browser, or in the future a
                // server connecting to another server) and presently running a
                // simulation of a server-side method for latency compensation
                // purposes). not currently true except in a client such as a browser,
                // since there's usually no point in running stubs unless you have a
                // zero-latency connection to the user.

                /**
                 * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.
                 * @locus Anywhere
                 * @name  isSimulation
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 * @type {Boolean}
                 */
                this.isSimulation = options.isSimulation; // call this function to allow other method invocations (from the
                // same client) to continue running without waiting for this one to
                // complete.

                this._unblock = options.unblock || function () {};

                this._calledUnblock = false; // current user id

                /**
                 * @summary The id of the user that made this method call, or `null` if no user was logged in.
                 * @locus Anywhere
                 * @name  userId
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.userId = options.userId; // sets current user id in all appropriate server contexts and
                // reruns subscriptions

                this._setUserId = options.setUserId || function () {}; // On the server, the connection this method call came in on.

                /**
                 * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.
                 * @locus Server
                 * @name  connection
                 * @memberOf DDPCommon.MethodInvocation
                 * @instance
                 */

                this.connection = options.connection; // The seed for randomStream value generation

                this.randomSeed = options.randomSeed; // This is set by RandomStream.get; and holds the random stream state

                this.randomStream = null;
              }
              /**
               * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               */

              unblock() {
                this._calledUnblock = true;

                this._unblock();
              }
              /**
               * @summary Set the logged in user.
               * @locus Server
               * @memberOf DDPCommon.MethodInvocation
               * @instance
               * @param {String | null} userId The value that should be returned by `userId` on this connection.
               */

              setUserId(userId) {
                if (this._calledUnblock) {
                  throw new Error("Can't call setUserId in a method after calling unblock");
                }

                this.userId = userId;

                this._setUserId(userId);
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "random_stream.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/ddp-common/random_stream.js                                                                               //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // RandomStream allows for generation of pseudo-random values, from a seed.
            //
            // We use this for consistent 'random' numbers across the client and server.
            // We want to generate probably-unique IDs on the client, and we ideally want
            // the server to generate the same IDs when it executes the method.
            //
            // For generated values to be the same, we must seed ourselves the same way,
            // and we must keep track of the current state of our pseudo-random generators.
            // We call this state the scope. By default, we use the current DDP method
            // invocation as our scope.  DDP now allows the client to specify a randomSeed.
            // If a randomSeed is provided it will be used to seed our random sequences.
            // In this way, client and server method calls will generate the same values.
            //
            // We expose multiple named streams; each stream is independent
            // and is seeded differently (but predictably from the name).
            // By using multiple streams, we support reordering of requests,
            // as long as they occur on different streams.
            //
            // @param options {Optional Object}
            //   seed: Array or value - Seed value(s) for the generator.
            //                          If an array, will be used as-is
            //                          If a value, will be converted to a single-value array
            //                          If omitted, a random array will be used as the seed.
            DDPCommon.RandomStream = class RandomStream {
              constructor(options) {
                this.seed = [].concat(options.seed || randomToken());
                this.sequences = Object.create(null);
              } // Get a random sequence with the specified name, creating it if does not exist.
              // New sequences are seeded with the seed concatenated with the name.
              // By passing a seed into Random.create, we use the Alea generator.


              _sequence(name) {
                var self = this;
                var sequence = self.sequences[name] || null;

                if (sequence === null) {
                  var sequenceSeed = self.seed.concat(name);

                  for (var i = 0; i < sequenceSeed.length; i++) {
                    if (typeof sequenceSeed[i] === "function") {
                      sequenceSeed[i] = sequenceSeed[i]();
                    }
                  }

                  self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);
                }

                return sequence;
              }

            }; // Returns a random string of sufficient length for a random seed.
            // This is a placeholder function; a similar function is planned
            // for Random itself; when that is added we should remove this function,
            // and call Random's randomToken instead.

            function randomToken() {
              return Random.hexString(20);
            }

            ; // Returns the random stream with the specified name, in the specified
            // scope. If a scope is passed, then we use that to seed a (not
            // cryptographically secure) PRNG using the fast Alea algorithm.  If
            // scope is null (or otherwise falsey) then we use a generated seed.
            //
            // However, scope will normally be the current DDP method invocation,
            // so we'll use the stream with the specified name, and we should get
            // consistent values on the client and server sides of a method call.

            DDPCommon.RandomStream.get = function (scope, name) {
              if (!name) {
                name = "default";
              }

              if (!scope) {
                // There was no scope passed in; the sequence won't actually be
                // reproducible. but make it fast (and not cryptographically
                // secure) anyways, so that the behavior is similar to what you'd
                // get by passing in a scope.
                return Random.insecure;
              }

              var randomStream = scope.randomStream;

              if (!randomStream) {
                scope.randomStream = randomStream = new DDPCommon.RandomStream({
                  seed: scope.randomSeed
                });
              }

              return randomStream._sequence(name);
            }; // Creates a randomSeed for passing to a method call.
            // Note that we take enclosing as an argument,
            // though we expect it to be DDP._CurrentMethodInvocation.get()
            // However, we often evaluate makeRpcSeed lazily, and thus the relevant
            // invocation may not be the one currently in scope.
            // If enclosing is null, we'll use Random and values won't be repeatable.


            DDPCommon.makeRpcSeed = function (enclosing, methodName) {
              var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);
              return stream.hexString(20);
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/ddp-common/namespace.js");
  _require("/node_modules/meteor/ddp-common/heartbeat.js");
  _require("/node_modules/meteor/ddp-common/utils.js");
  _require("/node_modules/meteor/ddp-common/method_invocation.js");
  _require("/node_modules/meteor/ddp-common/random_stream.js");

  /* Exports */
  Package._define("ddp-common", {
    DDPCommon: DDPCommon
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Reload;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "reload": { "reload.js": function (_require, _exports, _module) {

            ///////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                           //
            // packages/reload/reload.js                                                                 //
            //                                                                                           //
            ///////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Reload: () => Reload
            });
            const Reload = {};
            var KEY_NAME = 'Meteor_Reload';
            var old_data = {}; // read in old data at startup.

            var old_json; // This logic for sessionStorage detection is based on browserstate/history.js

            var safeSessionStorage = null;

            try {
              // This throws a SecurityError on Chrome if cookies & localStorage are
              // explicitly disabled
              //
              // On Firefox with dom.storage.enabled set to false, sessionStorage is null
              //
              // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely
              // on the throw if sessionStorage == null; the alternative is browser
              // detection, but this seems better.
              safeSessionStorage = window.sessionStorage; // Check we can actually use it

              if (safeSessionStorage) {
                safeSessionStorage.setItem('__dummy__', '1');
                safeSessionStorage.removeItem('__dummy__');
              } else {
                // Be consistently null, for safety
                safeSessionStorage = null;
              }
            } catch (e) {
              // Expected on chrome with strict security, or if sessionStorage not supported
              safeSessionStorage = null;
            } // Exported for test.


            Reload._getData = function () {
              return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);
            };

            if (safeSessionStorage) {
              old_json = Reload._getData();
              safeSessionStorage.removeItem(KEY_NAME);
            } else {// Unsupported browser (IE 6,7) or locked down security settings.
              // No session resumption.
              // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");
            }

            if (!old_json) old_json = '{}';
            var old_parsed = {};

            try {
              old_parsed = JSON.parse(old_json);

              if (typeof old_parsed !== "object") {
                Meteor._debug("Got bad data on reload. Ignoring.");

                old_parsed = {};
              }
            } catch (err) {
              Meteor._debug("Got invalid JSON on reload. Ignoring.");
            }

            if (old_parsed.reload && typeof old_parsed.data === "object") {
              // Meteor._debug("Restoring reload data.");
              old_data = old_parsed.data;
            }

            var providers = []; ////////// External API //////////
            // Packages that support migration should register themselves by calling
            // this function. When it's time to migrate, callback will be called
            // with one argument, the "retry function," and an optional 'option'
            // argument (containing a key 'immediateMigration'). If the package
            // is ready to migrate, it should return [true, data], where data is
            // its migration data, an arbitrary JSON value (or [true] if it has
            // no migration data this time). If the package needs more time
            // before it is ready to migrate, it should return false. Then, once
            // it is ready to migrating again, it should call the retry
            // function. The retry function will return immediately, but will
            // schedule the migration to be retried, meaning that every package
            // will be polled once again for its migration data. If they are all
            // ready this time, then the migration will happen. name must be set if there
            // is migration data. If 'immediateMigration' is set in the options
            // argument, then it doesn't matter whether the package is ready to
            // migrate or not; the reload will happen immediately without waiting
            // (used for OAuth redirect login).
            //

            Reload._onMigrate = function (name, callback) {
              if (!callback) {
                // name not provided, so first arg is callback.
                callback = name;
                name = undefined;
              }

              providers.push({
                name: name,
                callback: callback
              });
            }; // Called by packages when they start up.
            // Returns the object that was saved, or undefined if none saved.
            //


            Reload._migrationData = function (name) {
              return old_data[name];
            }; // Options are the same as for `Reload._migrate`.


            var pollProviders = function (tryReload, options) {
              tryReload = tryReload || function () {};

              options = options || {};
              var migrationData = {};
              var remaining = providers.slice(0);
              var allReady = true;

              while (remaining.length) {
                var p = remaining.shift();
                var status = p.callback(tryReload, options);
                if (!status[0]) allReady = false;
                if (status.length > 1 && p.name) migrationData[p.name] = status[1];
              }

              ;
              if (allReady || options.immediateMigration) return migrationData;else return null;
            }; // Options are:
            //  - immediateMigration: true if the page will be reloaded immediately
            //    regardless of whether packages report that they are ready or not.


            Reload._migrate = function (tryReload, options) {
              // Make sure each package is ready to go, and collect their
              // migration data
              var migrationData = pollProviders(tryReload, options);
              if (migrationData === null) return false; // not ready yet..

              try {
                // Persist the migration data
                var json = JSON.stringify({
                  data: migrationData,
                  reload: true
                });
              } catch (err) {
                Meteor._debug("Couldn't serialize data for migration", migrationData);

                throw err;
              }

              if (safeSessionStorage) {
                try {
                  safeSessionStorage.setItem(KEY_NAME, json);
                } catch (err) {
                  // We should have already checked this, but just log - don't throw
                  Meteor._debug("Couldn't save data for migration to sessionStorage", err);
                }
              } else {
                Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
              }

              return true;
            }; // Allows tests to isolate the list of providers.


            Reload._withFreshProvidersForTest = function (f) {
              var originalProviders = providers.slice(0);
              providers = [];

              try {
                f();
              } finally {
                providers = originalProviders;
              }
            }; // Migrating reload: reload this page (presumably to pick up a new
            // version of the code or assets), but save the program state and
            // migrate it over. This function returns immediately. The reload
            // will happen at some point in the future once all of the packages
            // are ready to migrate.
            //


            var reloading = false;

            Reload._reload = function (options) {
              options = options || {};
              if (reloading) return;
              reloading = true;

              function tryReload() {
                setTimeout(reload, 1);
              }

              function reload() {
                if (Reload._migrate(tryReload, options)) {
                  // We'd like to make the browser reload the page using location.replace()
                  // instead of location.reload(), because this avoids validating assets
                  // with the server if we still have a valid cached copy. This doesn't work
                  // when the location contains a hash however, because that wouldn't reload
                  // the page and just scroll to the hash location instead.
                  if (window.location.hash || window.location.href.endsWith("#")) {
                    window.location.reload();
                  } else {
                    window.location.replace(window.location.href);
                  }
                }
              }

              tryReload();
            };
            ///////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/reload/reload.js");

  /* Exports */
  Package._define("reload", _exports2, {
    Reload: Reload
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Retry = Package.retry.Retry;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, SockJS;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "socket-stream-client": { "browser.js": function (_require, _exports, _module) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/browser.js                                                                            //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = _require("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(_require("@babel/runtime/helpers/objectSpread"));

            _module.export({
              ClientStream: () => ClientStream
            });
            let toSockjsUrl, toWebsocketUrl;
            _module.link("./urls.js", {
              toSockjsUrl(v) {
                toSockjsUrl = v;
              },

              toWebsocketUrl(v) {
                toWebsocketUrl = v;
              }

            }, 0);
            let StreamClientCommon;
            _module.link("./common.js", {
              StreamClientCommon(v) {
                StreamClientCommon = v;
              }

            }, 1);
            _module.link("./sockjs-0.3.4.js");

            class ClientStream extends StreamClientCommon {
              // @param url {String} URL to Meteor app
              //   "http://subdomain.meteor.com/" or "/" or
              //   "ddp+sockjs://foo-**.meteor.com/sockjs"
              constructor(url, options) {
                super(options);

                this._initCommon(this.options); //// Constants
                // how long between hearing heartbeat from the server until we declare
                // the connection dead. heartbeats come every 45s (stream_server.js)
                //
                // NOTE: this is a older timeout mechanism. We now send heartbeats at
                // the DDP level (https://github.com/meteor/meteor/pull/1865), and
                // expect those timeouts to kill a non-responsive connection before
                // this timeout fires. This is kept around for compatibility (when
                // talking to a server that doesn't support DDP heartbeats) and can be
                // removed later.


                this.HEARTBEAT_TIMEOUT = 100 * 1000;
                this.rawUrl = url;
                this.socket = null;
                this.lastError = null;
                this.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.
                // (IE8 does not support addEventListener)

                if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener('online', this._online.bind(this), false
                /* useCapture. make FF3.6 happy. */
                ); //// Kickoff!

                this._launchConnection();
              } // data is a utf8 string. Data sent while not connected is dropped on
              // the floor, and it is up the user of this API to retransmit lost
              // messages on 'reset'


              send(data) {
                if (this.currentStatus.connected) {
                  this.socket.send(data);
                }
              } // Changes where this connection points


              _changeUrl(url) {
                this.rawUrl = url;
              }

              _connected() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.currentStatus.connected) {
                  // already connected. do nothing. this probably shouldn't happen.
                  return;
                } // update status


                this.currentStatus.status = 'connected';
                this.currentStatus.connected = true;
                this.currentStatus.retryCount = 0;
                this.statusChanged(); // fire resets. This must come after status change so that clients
                // can call send from within a reset callback.

                this.forEachCallback('reset', callback => {
                  callback();
                });
              }

              _cleanup(maybeError) {
                this._clearConnectionAndHeartbeatTimers();

                if (this.socket) {
                  this.socket.onmessage = this.socket.onclose = this.socket.onerror = this.socket.onheartbeat = () => {};

                  this.socket.close();
                  this.socket = null;
                }

                this.forEachCallback('disconnect', callback => {
                  callback(maybeError);
                });
              }

              _clearConnectionAndHeartbeatTimers() {
                if (this.connectionTimer) {
                  clearTimeout(this.connectionTimer);
                  this.connectionTimer = null;
                }

                if (this.heartbeatTimer) {
                  clearTimeout(this.heartbeatTimer);
                  this.heartbeatTimer = null;
                }
              }

              _heartbeat_timeout() {
                console.log('Connection timeout. No sockjs heartbeat received.');

                this._lostConnection(new this.ConnectionError("Heartbeat timed out"));
              }

              _heartbeat_received() {
                // If we've already permanently shut down this stream, the timeout is
                // already cleared, and we don't need to set it again.
                if (this._forcedToDisconnect) return;
                if (this.heartbeatTimer) clearTimeout(this.heartbeatTimer);
                this.heartbeatTimer = setTimeout(this._heartbeat_timeout.bind(this), this.HEARTBEAT_TIMEOUT);
              }

              _sockjsProtocolsWhitelist() {
                // only allow polling protocols. no streaming.  streaming
                // makes safari spin.
                var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain
                // proxies. this seems to be resolved with iOS 6. eg
                // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.
                //
                // iOS <4 doesn't support websockets at all so sockjs will just
                // immediately fall back to http

                var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);
                if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);
                return protocolsWhitelist;
              }

              _launchConnection() {
                this._cleanup(); // cleanup the old socket, if there was one.


                var options = (0, _objectSpread2.default)({
                  protocols_whitelist: this._sockjsProtocolsWhitelist()
                }, this.options._sockjsOptions);
                const hasSockJS = typeof SockJS === "function";
                this.socket = hasSockJS // Convert raw URL to SockJS URL each time we open a connection, so
                // that we can connect to random hostnames and get around browser
                // per-host connection limits.
                ? new SockJS(toSockjsUrl(this.rawUrl), undefined, options) : new WebSocket(toWebsocketUrl(this.rawUrl));

                this.socket.onopen = data => {
                  this.lastError = null;

                  this._connected();
                };

                this.socket.onmessage = data => {
                  this.lastError = null;

                  this._heartbeat_received();

                  if (this.currentStatus.connected) {
                    this.forEachCallback('message', callback => {
                      callback(data.data);
                    });
                  }
                };

                this.socket.onclose = () => {
                  Promise.resolve( // If the socket is closing because there was an error, and we
                  // didn't load SockJS before, try loading it dynamically before
                  // retrying the connection.
                  this.lastError && !hasSockJS && _module.dynamicImport("./sockjs-0.3.4.js")).done(() => {
                    this._lostConnection();
                  });
                };

                this.socket.onerror = error => {
                  const {
                    lastError
                  } = this;
                  this.lastError = error;
                  if (lastError) return;
                  console.log('stream error', error, new Date().toDateString());
                };

                this.socket.onheartbeat = () => {
                  this.lastError = null;

                  this._heartbeat_received();
                };

                if (this.connectionTimer) clearTimeout(this.connectionTimer);
                this.connectionTimer = setTimeout(() => {
                  this._lostConnection(new this.ConnectionError("DDP connection timed out"));
                }, this.CONNECT_TIMEOUT);
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "common.js": function (_require3, _exports2, _module2) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/common.js                                                                             //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = _require3("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(_require3("@babel/runtime/helpers/objectSpread"));

            _module2.export({
              StreamClientCommon: () => StreamClientCommon
            });
            let Retry;
            _module2.link("meteor/retry", {
              Retry(v) {
                Retry = v;
              }

            }, 0);
            const forcedReconnectError = new Error("forced reconnect");

            class StreamClientCommon {
              constructor(options) {
                this.options = (0, _objectSpread2.default)({
                  retry: true
                }, options || null);
                this.ConnectionError = options && options.ConnectionError || Error;
              } // Register for callbacks.


              on(name, callback) {
                if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error('unknown event type: ' + name);
                if (!this.eventCallbacks[name]) this.eventCallbacks[name] = [];
                this.eventCallbacks[name].push(callback);
              }

              forEachCallback(name, cb) {
                if (!this.eventCallbacks[name] || !this.eventCallbacks[name].length) {
                  return;
                }

                this.eventCallbacks[name].forEach(cb);
              }

              _initCommon(options) {
                options = options || Object.create(null); //// Constants
                // how long to wait until we declare the connection attempt
                // failed.

                this.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;
                this.eventCallbacks = Object.create(null); // name -> [callback]

                this._forcedToDisconnect = false; //// Reactive status

                this.currentStatus = {
                  status: 'connecting',
                  connected: false,
                  retryCount: 0
                };

                if (Package.tracker) {
                  this.statusListeners = new Package.tracker.Tracker.Dependency();
                }

                this.statusChanged = () => {
                  if (this.statusListeners) {
                    this.statusListeners.changed();
                  }
                }; //// Retry logic


                this._retry = new Retry();
                this.connectionTimer = null;
              } // Trigger a reconnect.


              reconnect(options) {
                options = options || Object.create(null);

                if (options.url) {
                  this._changeUrl(options.url);
                }

                if (options._sockjsOptions) {
                  this.options._sockjsOptions = options._sockjsOptions;
                }

                if (this.currentStatus.connected) {
                  if (options._force || options.url) {
                    this._lostConnection(forcedReconnectError);
                  }

                  return;
                } // if we're mid-connection, stop it.


                if (this.currentStatus.status === 'connecting') {
                  // Pretend it's a clean close.
                  this._lostConnection();
                }

                this._retry.clear();

                this.currentStatus.retryCount -= 1; // don't count manual retries

                this._retryNow();
              }

              disconnect(options) {
                options = options || Object.create(null); // Failed is permanent. If we're failed, don't let people go back
                // online by calling 'disconnect' then 'reconnect'.

                if (this._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream
                // is forced to disconnect, it can never reconnect. This is for
                // error cases such as ddp version mismatch, where trying again
                // won't fix the problem.

                if (options._permanent) {
                  this._forcedToDisconnect = true;
                }

                this._cleanup();

                this._retry.clear();

                this.currentStatus = {
                  status: options._permanent ? 'failed' : 'offline',
                  connected: false,
                  retryCount: 0
                };
                if (options._permanent && options._error) this.currentStatus.reason = options._error;
                this.statusChanged();
              } // maybeError is set unless it's a clean protocol-level close.


              _lostConnection(maybeError) {
                this._cleanup(maybeError);

                this._retryLater(maybeError); // sets status. no need to do it here.
              } // fired when we detect that we've gone online. try to reconnect
              // immediately.


              _online() {
                // if we've requested to be offline by disconnecting, don't reconnect.
                if (this.currentStatus.status != 'offline') this.reconnect();
              }

              _retryLater(maybeError) {
                var timeout = 0;

                if (this.options.retry || maybeError === forcedReconnectError) {
                  timeout = this._retry.retryLater(this.currentStatus.retryCount, this._retryNow.bind(this));
                  this.currentStatus.status = 'waiting';
                  this.currentStatus.retryTime = new Date().getTime() + timeout;
                } else {
                  this.currentStatus.status = 'failed';
                  delete this.currentStatus.retryTime;
                }

                this.currentStatus.connected = false;
                this.statusChanged();
              }

              _retryNow() {
                if (this._forcedToDisconnect) return;
                this.currentStatus.retryCount += 1;
                this.currentStatus.status = 'connecting';
                this.currentStatus.connected = false;
                delete this.currentStatus.retryTime;
                this.statusChanged();

                this._launchConnection();
              } // Get current status. Reactive.


              status() {
                if (this.statusListeners) {
                  this.statusListeners.depend();
                }

                return this.currentStatus;
              }

            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "sockjs-0.3.4.js": function (_require4) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/sockjs-0.3.4.js                                                                       //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            // XXX METEOR changes in <METEOR>

            /* SockJS client, version 0.3.4, http://sockjs.org, MIT License
            
            Copyright (c) 2011-2012 VMware, Inc.
            
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
            
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */
            // <METEOR> Commented out JSO implementation (use json package instead).
            // JSON2 by Douglas Crockford (minified).
            // var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function f(a){return a<10?"0"+a:a}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()
            // </METEOR>
            //     [*] Including lib/index.js
            // Public object
            SockJS = function () {
              var _document = document;
              var _window = window;
              var utils = {}; //         [*] Including lib/reventtarget.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              /* Simplified implementation of DOM2 EventTarget.
               *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
               */

              var REventTarget = function () {};

              REventTarget.prototype.addEventListener = function (eventType, listener) {
                if (!this._listeners) {
                  this._listeners = {};
                }

                if (!(eventType in this._listeners)) {
                  this._listeners[eventType] = [];
                }

                var arr = this._listeners[eventType];

                if (utils.arrIndexOf(arr, listener) === -1) {
                  arr.push(listener);
                }

                return;
              };

              REventTarget.prototype.removeEventListener = function (eventType, listener) {
                if (!(this._listeners && eventType in this._listeners)) {
                  return;
                }

                var arr = this._listeners[eventType];
                var idx = utils.arrIndexOf(arr, listener);

                if (idx !== -1) {
                  if (arr.length > 1) {
                    this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
                  } else {
                    delete this._listeners[eventType];
                  }

                  return;
                }

                return;
              };

              REventTarget.prototype.dispatchEvent = function (event) {
                var t = event.type;
                var args = Array.prototype.slice.call(arguments, 0);

                if (this['on' + t]) {
                  this['on' + t].apply(this, args);
                }

                if (this._listeners && t in this._listeners) {
                  for (var i = 0; i < this._listeners[t].length; i++) {
                    this._listeners[t][i].apply(this, args);
                  }
                }
              }; //         [*] End of lib/reventtarget.js
              //         [*] Including lib/simpleevent.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SimpleEvent = function (type, obj) {
                this.type = type;

                if (typeof obj !== 'undefined') {
                  for (var k in obj) {
                    if (!obj.hasOwnProperty(k)) continue;
                    this[k] = obj[k];
                  }
                }
              };

              SimpleEvent.prototype.toString = function () {
                var r = [];

                for (var k in this) {
                  if (!this.hasOwnProperty(k)) continue;
                  var v = this[k];
                  if (typeof v === 'function') v = '[function]';
                  r.push(k + '=' + v);
                }

                return 'SimpleEvent(' + r.join(', ') + ')';
              }; //         [*] End of lib/simpleevent.js
              //         [*] Including lib/eventemitter.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventEmitter = function (events) {
                var that = this;
                that._events = events || [];
                that._listeners = {};
              };

              EventEmitter.prototype.emit = function (type) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;
                var args = Array.prototype.slice.call(arguments, 1);

                if (that['on' + type]) {
                  that['on' + type].apply(that, args);
                }

                if (type in that._listeners) {
                  for (var i = 0; i < that._listeners[type].length; i++) {
                    that._listeners[type][i].apply(that, args);
                  }
                }
              };

              EventEmitter.prototype.on = function (type, callback) {
                var that = this;

                that._verifyType(type);

                if (that._nuked) return;

                if (!(type in that._listeners)) {
                  that._listeners[type] = [];
                }

                that._listeners[type].push(callback);
              };

              EventEmitter.prototype._verifyType = function (type) {
                var that = this;

                if (utils.arrIndexOf(that._events, type) === -1) {
                  utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);
                }
              };

              EventEmitter.prototype.nuke = function () {
                var that = this;
                that._nuked = true;

                for (var i = 0; i < that._events.length; i++) {
                  delete that[that._events[i]];
                }

                that._listeners = {};
              }; //         [*] End of lib/eventemitter.js
              //         [*] Including lib/utils.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';

              utils.random_string = function (length, max) {
                max = max || random_string_chars.length;
                var i,
                    ret = [];

                for (i = 0; i < length; i++) {
                  ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));
                }

                return ret.join('');
              };

              utils.random_number = function (max) {
                return Math.floor(Math.random() * max);
              };

              utils.random_number_string = function (max) {
                var t = ('' + (max - 1)).length;
                var p = Array(t + 1).join('0');
                return (p + utils.random_number(max)).slice(-t);
              }; // Assuming that url looks like: http://asdasd:111/asd


              utils.getOrigin = function (url) {
                url += '/';
                var parts = url.split('/').slice(0, 3);
                return parts.join('/');
              };

              utils.isSameOriginUrl = function (url_a, url_b) {
                // location.origin would do, but it's not always available.
                if (!url_b) url_b = _window.location.href;
                return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/');
              }; // <METEOR>
              // https://github.com/sockjs/sockjs-client/issues/79


              utils.isSameOriginScheme = function (url_a, url_b) {
                if (!url_b) url_b = _window.location.href;
                return url_a.split(':')[0] === url_b.split(':')[0];
              }; // </METEOR>


              utils.getParentDomain = function (url) {
                // ipv4 ip address
                if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address

                if (/^\[/.test(url)) return url; // no dots

                if (!/[.]/.test(url)) return url;
                var parts = url.split('.').slice(1);
                return parts.join('.');
              };

              utils.objectExtend = function (dst, src) {
                for (var k in src) {
                  if (src.hasOwnProperty(k)) {
                    dst[k] = src[k];
                  }
                }

                return dst;
              };

              var WPrefix = '_jp';

              utils.polluteGlobalNamespace = function () {
                if (!(WPrefix in _window)) {
                  _window[WPrefix] = {};
                }
              };

              utils.closeFrame = function (code, reason) {
                return 'c' + JSON.stringify([code, reason]);
              };

              utils.userSetCode = function (code) {
                return code === 1000 || code >= 3000 && code <= 4999;
              }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
              // and RFC 2988.


              utils.countRTO = function (rtt) {
                var rto;

                if (rtt > 100) {
                  rto = 3 * rtt; // rto > 300msec
                } else {
                  rto = rtt + 200; // 200msec < rto <= 300msec
                }

                return rto;
              };

              utils.log = function () {
                if (_window.console && console.log && console.log.apply) {
                  console.log.apply(console, arguments);
                }
              };

              utils.bind = function (fun, that) {
                if (fun.bind) {
                  return fun.bind(that);
                } else {
                  return function () {
                    return fun.apply(that, arguments);
                  };
                }
              };

              utils.flatUrl = function (url) {
                return url.indexOf('?') === -1 && url.indexOf('#') === -1;
              }; // `relativeTo` is an optional absolute URL. If provided, `url` will be
              // interpreted relative to `relativeTo`. Defaults to `document.location`.
              // <METEOR>


              utils.amendUrl = function (url, relativeTo) {
                var baseUrl;

                if (relativeTo === undefined) {
                  baseUrl = _document.location;
                } else {
                  var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);

                  if (protocolMatch) {
                    var protocol = protocolMatch[0].toLowerCase();
                    var rest = relativeTo.substring(protocol.length);
                    var hostMatch = /[a-z0-9\.-]+(:[0-9]+)?/.exec(rest);
                    if (hostMatch) var host = hostMatch[0];
                  }

                  if (!protocol || !host) throw new Error("relativeTo must be an absolute url");
                  baseUrl = {
                    protocol: protocol,
                    host: host
                  };
                }

                if (!url) {
                  throw new Error('Wrong url for SockJS');
                }

                if (!utils.flatUrl(url)) {
                  throw new Error('Only basic urls are supported in SockJS');
                } //  '//abc' --> 'http://abc'


                if (url.indexOf('//') === 0) {
                  url = baseUrl.protocol + url;
                } // '/abc' --> 'http://localhost:1234/abc'


                if (url.indexOf('/') === 0) {
                  url = baseUrl.protocol + '//' + baseUrl.host + url;
                } // </METEOR>
                // strip trailing slashes


                url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers
                // http://localhost:80/ is not in the same origin as http://localhost/
                // Remove explicit :80 or :443 in such cases. See #74

                var parts = url.split("/");

                if (parts[0] === "http:" && /:80$/.test(parts[2]) || parts[0] === "https:" && /:443$/.test(parts[2])) {
                  parts[2] = parts[2].replace(/:(80|443)$/, "");
                }

                url = parts.join("/");
                return url;
              }; // IE doesn't support [].indexOf.


              utils.arrIndexOf = function (arr, obj) {
                for (var i = 0; i < arr.length; i++) {
                  if (arr[i] === obj) {
                    return i;
                  }
                }

                return -1;
              };

              utils.arrSkip = function (arr, obj) {
                var idx = utils.arrIndexOf(arr, obj);

                if (idx === -1) {
                  return arr.slice();
                } else {
                  var dst = arr.slice(0, idx);
                  return dst.concat(arr.slice(idx + 1));
                }
              }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df


              utils.isArray = Array.isArray || function (value) {
                return {}.toString.call(value).indexOf('Array') >= 0;
              };

              utils.delay = function (t, fun) {
                if (typeof t === 'function') {
                  fun = t;
                  t = 0;
                }

                return setTimeout(fun, t);
              }; // Chars worth escaping, as defined by Douglas Crockford:
              //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196


              var json_escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                  json_lookup = {
                "\0": "\\u0000",
                "\x01": "\\u0001",
                "\x02": "\\u0002",
                "\x03": "\\u0003",
                "\x04": "\\u0004",
                "\x05": "\\u0005",
                "\x06": "\\u0006",
                "\x07": "\\u0007",
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\x0B": "\\u000b",
                "\f": "\\f",
                "\r": "\\r",
                "\x0E": "\\u000e",
                "\x0F": "\\u000f",
                "\x10": "\\u0010",
                "\x11": "\\u0011",
                "\x12": "\\u0012",
                "\x13": "\\u0013",
                "\x14": "\\u0014",
                "\x15": "\\u0015",
                "\x16": "\\u0016",
                "\x17": "\\u0017",
                "\x18": "\\u0018",
                "\x19": "\\u0019",
                "\x1A": "\\u001a",
                "\x1B": "\\u001b",
                "\x1C": "\\u001c",
                "\x1D": "\\u001d",
                "\x1E": "\\u001e",
                "\x1F": "\\u001f",
                "\"": "\\\"",
                "\\": "\\\\",
                "\x7F": "\\u007f",
                "\x80": "\\u0080",
                "\x81": "\\u0081",
                "\x82": "\\u0082",
                "\x83": "\\u0083",
                "\x84": "\\u0084",
                "\x85": "\\u0085",
                "\x86": "\\u0086",
                "\x87": "\\u0087",
                "\x88": "\\u0088",
                "\x89": "\\u0089",
                "\x8A": "\\u008a",
                "\x8B": "\\u008b",
                "\x8C": "\\u008c",
                "\x8D": "\\u008d",
                "\x8E": "\\u008e",
                "\x8F": "\\u008f",
                "\x90": "\\u0090",
                "\x91": "\\u0091",
                "\x92": "\\u0092",
                "\x93": "\\u0093",
                "\x94": "\\u0094",
                "\x95": "\\u0095",
                "\x96": "\\u0096",
                "\x97": "\\u0097",
                "\x98": "\\u0098",
                "\x99": "\\u0099",
                "\x9A": "\\u009a",
                "\x9B": "\\u009b",
                "\x9C": "\\u009c",
                "\x9D": "\\u009d",
                "\x9E": "\\u009e",
                "\x9F": "\\u009f",
                "\xAD": "\\u00ad",
                "\u0600": "\\u0600",
                "\u0601": "\\u0601",
                "\u0602": "\\u0602",
                "\u0603": "\\u0603",
                "\u0604": "\\u0604",
                "\u070F": "\\u070f",
                "\u17B4": "\\u17b4",
                "\u17B5": "\\u17b5",
                "\u200C": "\\u200c",
                "\u200D": "\\u200d",
                "\u200E": "\\u200e",
                "\u200F": "\\u200f",
                "\u2028": "\\u2028",
                "\u2029": "\\u2029",
                "\u202A": "\\u202a",
                "\u202B": "\\u202b",
                "\u202C": "\\u202c",
                "\u202D": "\\u202d",
                "\u202E": "\\u202e",
                "\u202F": "\\u202f",
                "\u2060": "\\u2060",
                "\u2061": "\\u2061",
                "\u2062": "\\u2062",
                "\u2063": "\\u2063",
                "\u2064": "\\u2064",
                "\u2065": "\\u2065",
                "\u2066": "\\u2066",
                "\u2067": "\\u2067",
                "\u2068": "\\u2068",
                "\u2069": "\\u2069",
                "\u206A": "\\u206a",
                "\u206B": "\\u206b",
                "\u206C": "\\u206c",
                "\u206D": "\\u206d",
                "\u206E": "\\u206e",
                "\u206F": "\\u206f",
                "\uFEFF": "\\ufeff",
                "\uFFF0": "\\ufff0",
                "\uFFF1": "\\ufff1",
                "\uFFF2": "\\ufff2",
                "\uFFF3": "\\ufff3",
                "\uFFF4": "\\ufff4",
                "\uFFF5": "\\ufff5",
                "\uFFF6": "\\ufff6",
                "\uFFF7": "\\ufff7",
                "\uFFF8": "\\ufff8",
                "\uFFF9": "\\ufff9",
                "\uFFFA": "\\ufffa",
                "\uFFFB": "\\ufffb",
                "\uFFFC": "\\ufffc",
                "\uFFFD": "\\ufffd",
                "\uFFFE": "\\ufffe",
                "\uFFFF": "\\uffff"
              }; // Some extra characters that Chrome gets wrong, and substitutes with
              // something else on the wire.

              var extra_escapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
                  extra_lookup; // JSON Quote string. Use native implementation when possible.

              var JSONQuote = JSON && JSON.stringify || function (string) {
                json_escapable.lastIndex = 0;

                if (json_escapable.test(string)) {
                  string = string.replace(json_escapable, function (a) {
                    return json_lookup[a];
                  });
                }

                return '"' + string + '"';
              }; // This may be quite slow, so let's delay until user actually uses bad
              // characters.


              var unroll_lookup = function (escapable) {
                var i;
                var unrolled = {};
                var c = [];

                for (i = 0; i < 65536; i++) {
                  c.push(String.fromCharCode(i));
                }

                escapable.lastIndex = 0;
                c.join('').replace(escapable, function (a) {
                  unrolled[a] = "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                  return '';
                });
                escapable.lastIndex = 0;
                return unrolled;
              }; // Quote string, also taking care of unicode characters that browsers
              // often break. Especially, take care of unicode surrogates:
              //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


              utils.quote = function (string) {
                var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.

                extra_escapable.lastIndex = 0;

                if (!extra_escapable.test(quoted)) {
                  return quoted;
                }

                if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);
                return quoted.replace(extra_escapable, function (a) {
                  return extra_lookup[a];
                });
              };

              var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];

              utils.probeProtocols = function () {
                var probed = {};

                for (var i = 0; i < _all_protocols.length; i++) {
                  var protocol = _all_protocols[i]; // User can have a typo in protocol name.

                  probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled();
                }

                return probed;
              };

              utils.detectProtocols = function (probed, protocols_whitelist, info) {
                var pe = {},
                    protocols = [];
                if (!protocols_whitelist) protocols_whitelist = _all_protocols;

                for (var i = 0; i < protocols_whitelist.length; i++) {
                  var protocol = protocols_whitelist[i];
                  pe[protocol] = probed[protocol];
                }

                var maybe_push = function (protos) {
                  var proto = protos.shift();

                  if (pe[proto]) {
                    protocols.push(proto);
                  } else {
                    if (protos.length > 0) {
                      maybe_push(protos);
                    }
                  }
                }; // 1. Websocket


                if (info.websocket !== false) {
                  maybe_push(['websocket']);
                } // 2. Streaming


                if (pe['xhr-streaming'] && !info.null_origin) {
                  protocols.push('xhr-streaming');
                } else {
                  if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-streaming');
                  } else {
                    maybe_push(['iframe-eventsource', 'iframe-htmlfile']);
                  }
                } // 3. Polling


                if (pe['xhr-polling'] && !info.null_origin) {
                  protocols.push('xhr-polling');
                } else {
                  if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {
                    protocols.push('xdr-polling');
                  } else {
                    maybe_push(['iframe-xhr-polling', 'jsonp-polling']);
                  }
                }

                return protocols;
              }; //         [*] End of lib/utils.js
              //         [*] Including lib/dom.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // May be used by htmlfile jsonp and transports.


              var MPrefix = '_sockjs_global';

              utils.createHook = function () {
                var window_id = 'a' + utils.random_string(8);

                if (!(MPrefix in _window)) {
                  var map = {};

                  _window[MPrefix] = function (window_id) {
                    if (!(window_id in map)) {
                      map[window_id] = {
                        id: window_id,
                        del: function () {
                          delete map[window_id];
                        }
                      };
                    }

                    return map[window_id];
                  };
                }

                return _window[MPrefix](window_id);
              };

              utils.attachMessage = function (listener) {
                utils.attachEvent('message', listener);
              };

              utils.attachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.addEventListener(event, listener, false);
                } else {
                  // IE quirks.
                  // According to: http://stevesouders.com/misc/test-postmessage.php
                  // the message gets delivered only to 'document', not 'window'.
                  _document.attachEvent("on" + event, listener); // I get 'window' for ie8.


                  _window.attachEvent("on" + event, listener);
                }
              };

              utils.detachMessage = function (listener) {
                utils.detachEvent('message', listener);
              };

              utils.detachEvent = function (event, listener) {
                if (typeof _window.addEventListener !== 'undefined') {
                  _window.removeEventListener(event, listener, false);
                } else {
                  _document.detachEvent("on" + event, listener);

                  _window.detachEvent("on" + event, listener);
                }
              };

              var on_unload = {}; // Things registered after beforeunload are to be called immediately.

              var after_unload = false;

              var trigger_unload_callbacks = function () {
                for (var ref in on_unload) {
                  on_unload[ref]();
                  delete on_unload[ref];
                }

                ;
              };

              var unload_triggered = function () {
                if (after_unload) return;
                after_unload = true;
                trigger_unload_callbacks();
              }; // 'unload' alone is not reliable in opera within an iframe, but we
              // can't use `beforeunload` as IE fires it on javascript: links.


              utils.attachEvent('unload', unload_triggered);

              utils.unload_add = function (listener) {
                var ref = utils.random_string(8);
                on_unload[ref] = listener;

                if (after_unload) {
                  utils.delay(trigger_unload_callbacks);
                }

                return ref;
              };

              utils.unload_del = function (ref) {
                if (ref in on_unload) delete on_unload[ref];
              };

              utils.createIframe = function (iframe_url, error_callback) {
                var iframe = _document.createElement('iframe');

                var tref, unload_ref;

                var unattach = function () {
                  clearTimeout(tref); // Explorer had problems with that.

                  try {
                    iframe.onload = null;
                  } catch (x) {}

                  iframe.onerror = null;
                };

                var cleanup = function () {
                  if (iframe) {
                    unattach(); // This timeout makes chrome fire onbeforeunload event
                    // within iframe. Without the timeout it goes straight to
                    // onunload.

                    setTimeout(function () {
                      if (iframe) {
                        iframe.parentNode.removeChild(iframe);
                      }

                      iframe = null;
                    }, 0);
                    utils.unload_del(unload_ref);
                  }
                };

                var onerror = function (r) {
                  if (iframe) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                iframe.src = iframe_url;
                iframe.style.display = 'none';
                iframe.style.position = 'absolute';

                iframe.onerror = function () {
                  onerror('onerror');
                };

                iframe.onload = function () {
                  // `onload` is triggered before scripts on the iframe are
                  // executed. Give it few seconds to actually load stuff.
                  clearTimeout(tref);
                  tref = setTimeout(function () {
                    onerror('onload timeout');
                  }, 2000);
                };

                _document.body.appendChild(iframe);

                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              };

              utils.createHtmlfile = function (iframe_url, error_callback) {
                var doc = new ActiveXObject('htmlfile');
                var tref, unload_ref;
                var iframe;

                var unattach = function () {
                  clearTimeout(tref);
                };

                var cleanup = function () {
                  if (doc) {
                    unattach();
                    utils.unload_del(unload_ref);
                    iframe.parentNode.removeChild(iframe);
                    iframe = doc = null;
                    CollectGarbage();
                  }
                };

                var onerror = function (r) {
                  if (doc) {
                    cleanup();
                    error_callback(r);
                  }
                };

                var post = function (msg, origin) {
                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (iframe && iframe.contentWindow) {
                      iframe.contentWindow.postMessage(msg, origin);
                    }
                  } catch (x) {}

                  ;
                };

                doc.open();
                doc.write('<html><s' + 'cript>' + 'document.domain="' + document.domain + '";' + '</s' + 'cript></html>');
                doc.close();
                doc.parentWindow[WPrefix] = _window[WPrefix];
                var c = doc.createElement('div');
                doc.body.appendChild(c);
                iframe = doc.createElement('iframe');
                c.appendChild(iframe);
                iframe.src = iframe_url;
                tref = setTimeout(function () {
                  onerror('timeout');
                }, 15000);
                unload_ref = utils.unload_add(cleanup);
                return {
                  post: post,
                  cleanup: cleanup,
                  loaded: unattach
                };
              }; //         [*] End of lib/dom.js
              //         [*] Including lib/dom2.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AbstractXHRObject = function () {};

              AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);

              AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
                var that = this;

                try {
                  that.xhr = new XMLHttpRequest();
                } catch (x) {}

                ;

                if (!that.xhr) {
                  try {
                    that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');
                  } catch (x) {}

                  ;
                }

                if (_window.ActiveXObject || _window.XDomainRequest) {
                  // IE8 caches even POSTs
                  url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();
                } // Explorer tends to keep connection open, even after the
                // tab gets closed: http://bugs.jquery.com/ticket/5280


                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  that.xhr.open(method, url, true);
                } catch (e) {
                  // IE raises an exception on wrong port.
                  that.emit('finish', 0, '');

                  that._cleanup();

                  return;
                }

                ;

                if (!opts || !opts.no_credentials) {
                  // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
                  // "This never affects same-site requests."
                  that.xhr.withCredentials = 'true';
                }

                if (opts && opts.headers) {
                  for (var key in opts.headers) {
                    that.xhr.setRequestHeader(key, opts.headers[key]);
                  }
                }

                that.xhr.onreadystatechange = function () {
                  if (that.xhr) {
                    var x = that.xhr;

                    switch (x.readyState) {
                      case 3:
                        // IE doesn't like peeking into responseText or status
                        // on Microsoft.XMLHTTP and readystate=3
                        try {
                          var status = x.status;
                          var text = x.responseText;
                        } catch (x) {}

                        ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.

                        if (text && text.length > 0) {
                          that.emit('chunk', status, text);
                        }

                        break;

                      case 4:
                        var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

                        if (status === 1223) status = 204;
                        that.emit('finish', status, x.responseText);

                        that._cleanup(false);

                        break;
                    }
                  }
                };

                that.xhr.send(payload);
              };

              AbstractXHRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xhr) return;
                utils.unload_del(that.unload_ref); // IE needs this field to be a function

                that.xhr.onreadystatechange = function () {};

                if (abort) {
                  try {
                    that.xhr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xhr = null;
              };

              AbstractXHRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              };

              var XHRCorsObject = utils.XHRCorsObject = function () {
                var that = this,
                    args = arguments;
                utils.delay(function () {
                  that._start.apply(that, args);
                });
              };

              XHRCorsObject.prototype = new AbstractXHRObject();

              var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload, {
                    no_credentials: true
                  });
                });
              };

              XHRLocalObject.prototype = new AbstractXHRObject(); // References:
              //   http://ajaxian.com/archives/100-line-ajax-wrapper
              //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

              var XDRObject = utils.XDRObject = function (method, url, payload) {
                var that = this;
                utils.delay(function () {
                  that._start(method, url, payload);
                });
              };

              XDRObject.prototype = new EventEmitter(['chunk', 'finish']);

              XDRObject.prototype._start = function (method, url, payload) {
                var that = this;
                var xdr = new XDomainRequest(); // IE caches even POSTs

                url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();

                var onerror = xdr.ontimeout = xdr.onerror = function () {
                  that.emit('finish', 0, '');

                  that._cleanup(false);
                };

                xdr.onprogress = function () {
                  that.emit('chunk', 200, xdr.responseText);
                };

                xdr.onload = function () {
                  that.emit('finish', 200, xdr.responseText);

                  that._cleanup(false);
                };

                that.xdr = xdr;
                that.unload_ref = utils.unload_add(function () {
                  that._cleanup(true);
                });

                try {
                  // Fails with AccessDenied if port number is bogus
                  that.xdr.open(method, url);
                  that.xdr.send(payload);
                } catch (x) {
                  onerror();
                }
              };

              XDRObject.prototype._cleanup = function (abort) {
                var that = this;
                if (!that.xdr) return;
                utils.unload_del(that.unload_ref);
                that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null;

                if (abort) {
                  try {
                    that.xdr.abort();
                  } catch (x) {}

                  ;
                }

                that.unload_ref = that.xdr = null;
              };

              XDRObject.prototype.close = function () {
                var that = this;
                that.nuke();

                that._cleanup(true);
              }; // 1. Is natively via XHR
              // 2. Is natively via XDR
              // 3. Nope, but postMessage is there so it should work via the Iframe.
              // 4. Nope, sorry.


              utils.isXHRCorsCapable = function () {
                if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {
                  return 1;
                } // XDomainRequest doesn't work if page is served from file://


                if (_window.XDomainRequest && _document.domain) {
                  return 2;
                }

                if (IframeTransport.enabled()) {
                  return 3;
                }

                return 4;
              }; //         [*] End of lib/dom2.js
              //         [*] Including lib/sockjs.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var SockJS = function (url, dep_protocols_whitelist, options) {
                if (!(this instanceof SockJS)) {
                  // makes `new` optional
                  return new SockJS(url, dep_protocols_whitelist, options);
                }

                var that = this,
                    protocols_whitelist;
                that._options = {
                  devel: false,
                  debug: false,
                  protocols_whitelist: [],
                  info: undefined,
                  rtt: undefined
                };

                if (options) {
                  utils.objectExtend(that._options, options);
                }

                that._base_url = utils.amendUrl(url);
                that._server = that._options.server || utils.random_number_string(1000);

                if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {
                  protocols_whitelist = that._options.protocols_whitelist;
                } else {
                  // Deprecated API
                  if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {
                    protocols_whitelist = [dep_protocols_whitelist];
                  } else if (utils.isArray(dep_protocols_whitelist)) {
                    protocols_whitelist = dep_protocols_whitelist;
                  } else {
                    protocols_whitelist = null;
                  }

                  if (protocols_whitelist) {
                    that._debug('Deprecated API: Use "protocols_whitelist" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');
                  }
                }

                that._protocols = [];
                that.protocol = null;
                that.readyState = SockJS.CONNECTING;
                that._ir = createInfoReceiver(that._base_url);

                that._ir.onfinish = function (info, rtt) {
                  that._ir = null;

                  if (info) {
                    if (that._options.info) {
                      // Override if user supplies the option
                      info = utils.objectExtend(info, that._options.info);
                    }

                    if (that._options.rtt) {
                      rtt = that._options.rtt;
                    }

                    that._applyInfo(info, rtt, protocols_whitelist);

                    that._didClose();
                  } else {
                    that._didClose(1002, 'Can\'t connect to server', true);
                  }
                };
              }; // Inheritance


              SockJS.prototype = new REventTarget();
              SockJS.version = "0.3.4";
              SockJS.CONNECTING = 0;
              SockJS.OPEN = 1;
              SockJS.CLOSING = 2;
              SockJS.CLOSED = 3;

              SockJS.prototype._debug = function () {
                if (this._options.debug) utils.log.apply(utils, arguments);
              };

              SockJS.prototype._dispatchOpen = function () {
                var that = this;

                if (that.readyState === SockJS.CONNECTING) {
                  if (that._transport_tref) {
                    clearTimeout(that._transport_tref);
                    that._transport_tref = null;
                  }

                  that.readyState = SockJS.OPEN;
                  that.dispatchEvent(new SimpleEvent("open"));
                } else {
                  // The server might have been restarted, and lost track of our
                  // connection.
                  that._didClose(1006, "Server lost session");
                }
              };

              SockJS.prototype._dispatchMessage = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent("message", {
                  data: data
                }));
              };

              SockJS.prototype._dispatchHeartbeat = function (data) {
                var that = this;
                if (that.readyState !== SockJS.OPEN) return;
                that.dispatchEvent(new SimpleEvent('heartbeat', {}));
              };

              SockJS.prototype._didClose = function (code, reason, force) {
                var that = this;
                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');

                if (that._ir) {
                  that._ir.nuke();

                  that._ir = null;
                }

                if (that._transport) {
                  that._transport.doCleanup();

                  that._transport = null;
                }

                var close_event = new SimpleEvent("close", {
                  code: code,
                  reason: reason,
                  wasClean: utils.userSetCode(code)
                });

                if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {
                  if (that._try_next_protocol(close_event)) {
                    return;
                  }

                  close_event = new SimpleEvent("close", {
                    code: 2000,
                    reason: "All transports failed",
                    wasClean: false,
                    last_event: close_event
                  });
                }

                that.readyState = SockJS.CLOSED;
                utils.delay(function () {
                  that.dispatchEvent(close_event);
                });
              };

              SockJS.prototype._didMessage = function (data) {
                var that = this;
                var type = data.slice(0, 1);

                switch (type) {
                  case 'o':
                    that._dispatchOpen();

                    break;

                  case 'a':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    for (var i = 0; i < payload.length; i++) {
                      that._dispatchMessage(payload[i]);
                    }

                    break;

                  case 'm':
                    var payload = JSON.parse(data.slice(1) || 'null');

                    that._dispatchMessage(payload);

                    break;

                  case 'c':
                    var payload = JSON.parse(data.slice(1) || '[]');

                    that._didClose(payload[0], payload[1]);

                    break;

                  case 'h':
                    that._dispatchHeartbeat();

                    break;
                }
              };

              SockJS.prototype._try_next_protocol = function (close_event) {
                var that = this;

                if (that.protocol) {
                  that._debug('Closed transport:', that.protocol, '' + close_event);

                  that.protocol = null;
                }

                if (that._transport_tref) {
                  clearTimeout(that._transport_tref);
                  that._transport_tref = null;
                }

                while (1) {
                  var protocol = that.protocol = that._protocols.shift();

                  if (!protocol) {
                    return false;
                  } // Some protocols require access to `body`, what if were in
                  // the `head`?


                  if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {
                    that._protocols.unshift(protocol);

                    that.protocol = 'waiting-for-load';
                    utils.attachEvent('load', function () {
                      that._try_next_protocol();
                    });
                    return true;
                  }

                  if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {
                    that._debug('Skipping transport:', protocol);
                  } else {
                    var roundTrips = SockJS[protocol].roundTrips || 1;
                    var to = (that._options.rto || 0) * roundTrips || 5000;
                    that._transport_tref = utils.delay(to, function () {
                      if (that.readyState === SockJS.CONNECTING) {
                        // I can't understand how it is possible to run
                        // this timer, when the state is CLOSED, but
                        // apparently in IE everythin is possible.
                        that._didClose(2007, "Transport timeouted");
                      }
                    });
                    var connid = utils.random_string(8);
                    var trans_url = that._base_url + '/' + that._server + '/' + connid;

                    that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto);

                    that._transport = new SockJS[protocol](that, trans_url, that._base_url);
                    return true;
                  }
                }
              };

              SockJS.prototype.close = function (code, reason) {
                var that = this;
                if (code && !utils.userSetCode(code)) throw new Error("INVALID_ACCESS_ERR");

                if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {
                  return false;
                }

                that.readyState = SockJS.CLOSING;

                that._didClose(code || 1000, reason || "Normal closure");

                return true;
              };

              SockJS.prototype.send = function (data) {
                var that = this;
                if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR');

                if (that.readyState === SockJS.OPEN) {
                  that._transport.doSend(utils.quote('' + data));
                }

                return true;
              };

              SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {
                var that = this;
                that._options.info = info;
                that._options.rtt = rtt;
                that._options.rto = utils.countRTO(rtt);
                that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and
                // avoid browser per-domain connection limits.

                if (info.base_url) // <METEOR>
                  that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>

                var probed = utils.probeProtocols();
                that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>
                // https://github.com/sockjs/sockjs-client/issues/79
                // Hack to avoid XDR when using different protocols
                // We're on IE trying to do cross-protocol. jsonp only.

                if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {
                  that._protocols = ['jsonp-polling'];
                } // </METEOR>
              }; //         [*] End of lib/sockjs.js
              //         [*] Including lib/trans-websocket.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {
                var that = this;
                var url = trans_url + '/websocket';

                if (url.slice(0, 5) === 'https') {
                  url = 'wss' + url.slice(5);
                } else {
                  url = 'ws' + url.slice(4);
                }

                that.ri = ri;
                that.url = url;
                var Constructor = _window.WebSocket || _window.MozWebSocket;
                that.ws = new Constructor(that.url);

                that.ws.onmessage = function (e) {
                  that.ri._didMessage(e.data);
                }; // Firefox has an interesting bug. If a websocket connection is
                // created after onunload, it stays alive even when user
                // navigates away from the page. In such situation let's lie -
                // let's not open the ws connection at all. See:
                // https://github.com/sockjs/sockjs-client/issues/28
                // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


                that.unload_ref = utils.unload_add(function () {
                  that.ws.close();
                });

                that.ws.onclose = function () {
                  that.ri._didMessage(utils.closeFrame(1006, "WebSocket connection broken"));
                };
              };

              WebSocketTransport.prototype.doSend = function (data) {
                this.ws.send('[' + data + ']');
              };

              WebSocketTransport.prototype.doCleanup = function () {
                var that = this;
                var ws = that.ws;

                if (ws) {
                  ws.onmessage = ws.onclose = null;
                  ws.close();
                  utils.unload_del(that.unload_ref);
                  that.unload_ref = that.ri = that.ws = null;
                }
              };

              WebSocketTransport.enabled = function () {
                return !!(_window.WebSocket || _window.MozWebSocket);
              }; // In theory, ws should require 1 round trip. But in chrome, this is
              // not very stable over SSL. Most likely a ws connection requires a
              // separate SSL connection, in which case 2 round trips are an
              // absolute minumum.


              WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js
              //         [*] Including lib/trans-sender.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var BufferedSender = function () {};

              BufferedSender.prototype.send_constructor = function (sender) {
                var that = this;
                that.send_buffer = [];
                that.sender = sender;
              };

              BufferedSender.prototype.doSend = function (message) {
                var that = this;
                that.send_buffer.push(message);

                if (!that.send_stop) {
                  that.send_schedule();
                }
              }; // For polling transports in a situation when in the message callback,
              // new message is being send. If the sending connection was started
              // before receiving one, it is possible to saturate the network and
              // timeout due to the lack of receiving socket. To avoid that we delay
              // sending messages by some small time, in order to let receiving
              // connection be started beforehand. This is only a halfmeasure and
              // does not fix the big problem, but it does make the tests go more
              // stable on slow networks.


              BufferedSender.prototype.send_schedule_wait = function () {
                var that = this;
                var tref;

                that.send_stop = function () {
                  that.send_stop = null;
                  clearTimeout(tref);
                };

                tref = utils.delay(25, function () {
                  that.send_stop = null;
                  that.send_schedule();
                });
              };

              BufferedSender.prototype.send_schedule = function () {
                var that = this;

                if (that.send_buffer.length > 0) {
                  var payload = '[' + that.send_buffer.join(',') + ']';
                  that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {
                    that.send_stop = null;

                    if (success === false) {
                      that.ri._didClose(1006, 'Sending error ' + abort_reason);
                    } else {
                      that.send_schedule_wait();
                    }
                  });
                  that.send_buffer = [];
                }
              };

              BufferedSender.prototype.send_destructor = function () {
                var that = this;

                if (that._send_stop) {
                  that._send_stop();
                }

                that._send_stop = null;
              };

              var jsonPGenericSender = function (url, payload, callback) {
                var that = this;

                if (!('_send_form' in that)) {
                  var form = that._send_form = _document.createElement('form');

                  var area = that._send_area = _document.createElement('textarea');

                  area.name = 'd';
                  form.style.display = 'none';
                  form.style.position = 'absolute';
                  form.method = 'POST';
                  form.enctype = 'application/x-www-form-urlencoded';
                  form.acceptCharset = "UTF-8";
                  form.appendChild(area);

                  _document.body.appendChild(form);
                }

                var form = that._send_form;
                var area = that._send_area;
                var id = 'a' + utils.random_string(8);
                form.target = id;
                form.action = url + '/jsonp_send?i=' + id;
                var iframe;

                try {
                  // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
                  iframe = _document.createElement('<iframe name="' + id + '">');
                } catch (x) {
                  iframe = _document.createElement('iframe');
                  iframe.name = id;
                }

                iframe.id = id;
                form.appendChild(iframe);
                iframe.style.display = 'none';

                try {
                  area.value = payload;
                } catch (e) {
                  utils.log('Your browser is seriously broken. Go home! ' + e.message);
                }

                form.submit();

                var completed = function (e) {
                  if (!iframe.onerror) return;
                  iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
                  // immediately, thus this timeout.

                  utils.delay(500, function () {
                    iframe.parentNode.removeChild(iframe);
                    iframe = null;
                  });
                  area.value = ''; // It is not possible to detect if the iframe succeeded or
                  // failed to submit our form.

                  callback(true);
                };

                iframe.onerror = iframe.onload = completed;

                iframe.onreadystatechange = function (e) {
                  if (iframe.readyState == 'complete') completed();
                };

                return completed;
              };

              var createAjaxSender = function (AjaxObject) {
                return function (url, payload, callback) {
                  var xo = new AjaxObject('POST', url + '/xhr_send', payload);

                  xo.onfinish = function (status, text) {
                    callback(status === 200 || status === 204, 'http status ' + status);
                  };

                  return function (abort_reason) {
                    callback(false, abort_reason);
                  };
                };
              }; //         [*] End of lib/trans-sender.js
              //         [*] Including lib/trans-jsonp-receiver.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Parts derived from Socket.io:
              //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js
              // and jQuery-JSONP:
              //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js


              var jsonPGenericReceiver = function (url, callback) {
                var tref;

                var script = _document.createElement('script');

                var script2; // Opera synchronous load trick.

                var close_script = function (frame) {
                  if (script2) {
                    script2.parentNode.removeChild(script2);
                    script2 = null;
                  }

                  if (script) {
                    clearTimeout(tref); // Unfortunately, you can't really abort script loading of
                    // the script.

                    script.parentNode.removeChild(script);
                    script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
                    script = null;
                    callback(frame);
                    callback = null;
                  }
                }; // IE9 fires 'error' event after orsc or before, in random order.


                var loaded_okay = false;
                var error_timer = null;
                script.id = 'a' + utils.random_string(8);
                script.src = url;
                script.type = 'text/javascript';
                script.charset = 'UTF-8';

                script.onerror = function (e) {
                  if (!error_timer) {
                    // Delay firing close_script.
                    error_timer = setTimeout(function () {
                      if (!loaded_okay) {
                        close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onerror)"));
                      }
                    }, 1000);
                  }
                };

                script.onload = function (e) {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onload)"));
                };

                script.onreadystatechange = function (e) {
                  if (/loaded|closed/.test(script.readyState)) {
                    if (script && script.htmlFor && script.onclick) {
                      loaded_okay = true;

                      try {
                        // In IE, actually execute the script.
                        script.onclick();
                      } catch (x) {}
                    }

                    if (script) {
                      close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (onreadystatechange)"));
                    }
                  }
                }; // IE: event/htmlFor/onclick trick.
                // One can't rely on proper order for onreadystatechange. In order to
                // make sure, set a 'htmlFor' and 'event' properties, so that
                // script code will be installed as 'onclick' handler for the
                // script object. Later, onreadystatechange, manually execute this
                // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
                // set. For reference see:
                //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
                // Also, read on that about script ordering:
                //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


                if (typeof script.async === 'undefined' && _document.attachEvent) {
                  // According to mozilla docs, in recent browsers script.async defaults
                  // to 'true', so we may use it to detect a good browser:
                  // https://developer.mozilla.org/en/HTML/Element/script
                  if (!/opera/i.test(navigator.userAgent)) {
                    // Naively assume we're in IE
                    try {
                      script.htmlFor = script.id;
                      script.event = "onclick";
                    } catch (x) {}

                    script.async = true;
                  } else {
                    // Opera, second sync script hack
                    script2 = _document.createElement('script');
                    script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
                    script.async = script2.async = false;
                  }
                }

                if (typeof script.async !== 'undefined') {
                  script.async = true;
                } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


                tref = setTimeout(function () {
                  close_script(utils.closeFrame(1006, "JSONP script loaded abnormally (timeout)"));
                }, 35000);

                var head = _document.getElementsByTagName('head')[0];

                head.insertBefore(script, head.firstChild);

                if (script2) {
                  head.insertBefore(script2, head.firstChild);
                }

                return close_script;
              }; //         [*] End of lib/trans-jsonp-receiver.js
              //         [*] Including lib/trans-jsonp-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // The simplest and most robust transport, using the well-know cross
              // domain hack - JSONP. This transport is quite inefficient - one
              // mssage could use up to one http request. But at least it works almost
              // everywhere.
              // Known limitations:
              //   o you will get a spinning cursor
              //   o for Konqueror a dumb timer is needed to detect errors


              var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {
                utils.polluteGlobalNamespace();
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(jsonPGenericSender);

                that._schedule_recv();
              }; // Inheritnace


              JsonPTransport.prototype = new BufferedSender();

              JsonPTransport.prototype._schedule_recv = function () {
                var that = this;

                var callback = function (data) {
                  that._recv_stop = null;

                  if (data) {
                    // no data - heartbeat;
                    if (!that._is_closing) {
                      that.ri._didMessage(data);
                    }
                  } // The message can be a close message, and change is_closing state.


                  if (!that._is_closing) {
                    that._schedule_recv();
                  }
                };

                that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback);
              };

              JsonPTransport.enabled = function () {
                return true;
              };

              JsonPTransport.need_body = true;

              JsonPTransport.prototype.doCleanup = function () {
                var that = this;
                that._is_closing = true;

                if (that._recv_stop) {
                  that._recv_stop();
                }

                that.ri = that._recv_stop = null;
                that.send_destructor();
              }; // Abstract away code that handles global namespace pollution.


              var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {
                var id = 'a' + utils.random_string(6);
                var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the
                // script. We need to keep track of frake close frames.

                var aborting = 0; // Callback will be called exactly once.

                var callback = function (frame) {
                  switch (aborting) {
                    case 0:
                      // Normal behaviour - delete hook _and_ emit message.
                      delete _window[WPrefix][id];
                      user_callback(frame);
                      break;

                    case 1:
                      // Fake close frame - emit but don't delete hook.
                      user_callback(frame);
                      aborting = 2;
                      break;

                    case 2:
                      // Got frame after connection was closed, delete hook, don't emit.
                      delete _window[WPrefix][id];
                      break;
                  }
                };

                var close_script = constructReceiver(url_id, callback);
                _window[WPrefix][id] = close_script;

                var stop = function () {
                  if (_window[WPrefix][id]) {
                    aborting = 1;

                    _window[WPrefix][id](utils.closeFrame(1000, "JSONP user aborted read"));
                  }
                };

                return stop;
              }; //         [*] End of lib/trans-jsonp-polling.js
              //         [*] Including lib/trans-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var AjaxBasedTransport = function () {};

              AjaxBasedTransport.prototype = new BufferedSender();

              AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.trans_url = trans_url;
                that.send_constructor(createAjaxSender(AjaxObject));
                that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject);
              };

              AjaxBasedTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.poll) {
                  that.poll.abort();
                  that.poll = null;
                }
              }; // xhr-streaming


              var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);
              };

              XhrStreamingTransport.prototype = new AjaxBasedTransport();

              XhrStreamingTransport.enabled = function () {
                // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but
                // doesn't do streaming.
                return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);
              };

              XhrStreamingTransport.roundTrips = 2; // preflight, ajax
              // Safari gets confused when a streaming ajax request is started
              // before onload. This causes the load indicator to spin indefinetely.

              XhrStreamingTransport.need_body = true; // According to:
              //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
              //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
              // xdr-streaming

              var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);
              };

              XdrStreamingTransport.prototype = new AjaxBasedTransport();

              XdrStreamingTransport.enabled = function () {
                return !!_window.XDomainRequest;
              };

              XdrStreamingTransport.roundTrips = 2; // preflight, ajax
              // xhr-polling

              var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);
              };

              XhrPollingTransport.prototype = new AjaxBasedTransport();
              XhrPollingTransport.enabled = XhrStreamingTransport.enabled;
              XhrPollingTransport.roundTrips = 2; // preflight, ajax
              // xdr-polling

              var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);
              };

              XdrPollingTransport.prototype = new AjaxBasedTransport();
              XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
              XdrPollingTransport.roundTrips = 2; // preflight, ajax
              //         [*] End of lib/trans-xhr.js
              //         [*] Including lib/trans-iframe.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // Few cool transports do work only for same-origin. In order to make
              // them working cross-domain we shall use iframe, served form the
              // remote domain. New browsers, have capabilities to communicate with
              // cross domain iframe, using postMessage(). In IE it was implemented
              // from IE 8+, but of course, IE got some details wrong:
              //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
              //    http://stevesouders.com/misc/test-postmessage.php

              var IframeTransport = function () {};

              IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {
                var that = this;
                that.ri = ri;
                that.origin = utils.getOrigin(base_url);
                that.base_url = base_url;
                that.trans_url = trans_url;
                var iframe_url = base_url + '/iframe.html';

                if (that.ri._options.devel) {
                  iframe_url += '?t=' + +new Date();
                }

                that.window_id = utils.random_string(8);
                iframe_url += '#' + that.window_id;
                that.iframeObj = utils.createIframe(iframe_url, function (r) {
                  that.ri._didClose(1006, "Unable to load an iframe (" + r + ")");
                });
                that.onmessage_cb = utils.bind(that.onmessage, that);
                utils.attachMessage(that.onmessage_cb);
              };

              IframeTransport.prototype.doCleanup = function () {
                var that = this;

                if (that.iframeObj) {
                  utils.detachMessage(that.onmessage_cb);

                  try {
                    // When the iframe is not loaded, IE raises an exception
                    // on 'contentWindow'.
                    if (that.iframeObj.iframe.contentWindow) {
                      that.postMessage('c');
                    }
                  } catch (x) {}

                  that.iframeObj.cleanup();
                  that.iframeObj = null;
                  that.onmessage_cb = that.iframeObj = null;
                }
              };

              IframeTransport.prototype.onmessage = function (e) {
                var that = this;
                if (e.origin !== that.origin) return;
                var window_id = e.data.slice(0, 8);
                var type = e.data.slice(8, 9);
                var data = e.data.slice(9);
                if (window_id !== that.window_id) return;

                switch (type) {
                  case 's':
                    that.iframeObj.loaded();
                    that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));
                    break;

                  case 't':
                    that.ri._didMessage(data);

                    break;
                }
              };

              IframeTransport.prototype.postMessage = function (type, data) {
                var that = this;
                that.iframeObj.post(that.window_id + type + (data || ''), that.origin);
              };

              IframeTransport.prototype.doSend = function (message) {
                this.postMessage('m', message);
              };

              IframeTransport.enabled = function () {
                // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
                // huge delay, or not at all.
                var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;
                return (typeof _window.postMessage === 'function' || typeof _window.postMessage === 'object') && !konqueror;
              }; //         [*] End of lib/trans-iframe.js
              //         [*] Including lib/trans-iframe-within.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var curr_window_id;

              var postMessage = function (type, data) {
                if (parent !== _window) {
                  parent.postMessage(curr_window_id + type + (data || ''), '*');
                } else {
                  utils.log("Can't postMessage, no parent window.", type, data);
                }
              };

              var FacadeJS = function () {};

              FacadeJS.prototype._didClose = function (code, reason) {
                postMessage('t', utils.closeFrame(code, reason));
              };

              FacadeJS.prototype._didMessage = function (frame) {
                postMessage('t', frame);
              };

              FacadeJS.prototype._doSend = function (data) {
                this._transport.doSend(data);
              };

              FacadeJS.prototype._doCleanup = function () {
                this._transport.doCleanup();
              };

              utils.parent_origin = undefined;

              SockJS.bootstrap_iframe = function () {
                var facade;
                curr_window_id = _document.location.hash.slice(1);

                var onMessage = function (e) {
                  if (e.source !== parent) return;
                  if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin;
                  if (e.origin !== utils.parent_origin) return;
                  var window_id = e.data.slice(0, 8);
                  var type = e.data.slice(8, 9);
                  var data = e.data.slice(9);
                  if (window_id !== curr_window_id) return;

                  switch (type) {
                    case 's':
                      var p = JSON.parse(data);
                      var version = p[0];
                      var protocol = p[1];
                      var trans_url = p[2];
                      var base_url = p[3];

                      if (version !== SockJS.version) {
                        utils.log("Incompatibile SockJS! Main site uses:" + " \"" + version + "\", the iframe:" + " \"" + SockJS.version + "\".");
                      }

                      if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {
                        utils.log("Only basic urls are supported in SockJS");
                        return;
                      }

                      if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {
                        utils.log("Can't connect to different domain from within an " + "iframe. (" + JSON.stringify([_window.location.href, trans_url, base_url]) + ")");
                        return;
                      }

                      facade = new FacadeJS();
                      facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);
                      break;

                    case 'm':
                      facade._doSend(data);

                      break;

                    case 'c':
                      if (facade) facade._doCleanup();
                      facade = null;
                      break;
                  }
                }; // alert('test ticker');
                // facade = new FacadeJS();
                // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');


                utils.attachMessage(onMessage); // Start

                postMessage('s');
              }; //         [*] End of lib/trans-iframe-within.js
              //         [*] Including lib/info.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var InfoReceiver = function (base_url, AjaxObject) {
                var that = this;
                utils.delay(function () {
                  that.doXhr(base_url, AjaxObject);
                });
              };

              InfoReceiver.prototype = new EventEmitter(['finish']);

              InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {
                var that = this;
                var t0 = new Date().getTime(); // <METEOR>
                // https://github.com/sockjs/sockjs-client/pull/129
                // var xo = new AjaxObject('GET', base_url + '/info');

                var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:
                // https://code.google.com/p/chromium/issues/detail?id=263981
                // or misbehaving proxies.
                'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>

                var tref = utils.delay(8000, function () {
                  xo.ontimeout();
                });

                xo.onfinish = function (status, text) {
                  clearTimeout(tref);
                  tref = null;

                  if (status === 200) {
                    var rtt = new Date().getTime() - t0;
                    var info = JSON.parse(text);
                    if (typeof info !== 'object') info = {};
                    that.emit('finish', info, rtt);
                  } else {
                    that.emit('finish');
                  }
                };

                xo.ontimeout = function () {
                  xo.close();
                  that.emit('finish');
                };
              };

              var InfoReceiverIframe = function (base_url) {
                var that = this;

                var go = function () {
                  var ifr = new IframeTransport();
                  ifr.protocol = 'w-iframe-info-receiver';

                  var fun = function (r) {
                    if (typeof r === 'string' && r.substr(0, 1) === 'm') {
                      var d = JSON.parse(r.substr(1));
                      var info = d[0],
                          rtt = d[1];
                      that.emit('finish', info, rtt);
                    } else {
                      that.emit('finish');
                    }

                    ifr.doCleanup();
                    ifr = null;
                  };

                  var mock_ri = {
                    _options: {},
                    _didClose: fun,
                    _didMessage: fun
                  };
                  ifr.i_constructor(mock_ri, base_url, base_url);
                };

                if (!_document.body) {
                  utils.attachEvent('load', go);
                } else {
                  go();
                }
              };

              InfoReceiverIframe.prototype = new EventEmitter(['finish']);

              var InfoReceiverFake = function () {
                // It may not be possible to do cross domain AJAX to get the info
                // data, for example for IE7. But we want to run JSONP, so let's
                // fake the response, with rtt=2s (rto=6s).
                var that = this;
                utils.delay(function () {
                  that.emit('finish', {}, 2000);
                });
              };

              InfoReceiverFake.prototype = new EventEmitter(['finish']);

              var createInfoReceiver = function (base_url) {
                if (utils.isSameOriginUrl(base_url)) {
                  // If, for some reason, we have SockJS locally - there's no
                  // need to start up the complex machinery. Just use ajax.
                  return new InfoReceiver(base_url, utils.XHRLocalObject);
                }

                switch (utils.isXHRCorsCapable()) {
                  case 1:
                    // XHRLocalObject -> no_credentials=true
                    return new InfoReceiver(base_url, utils.XHRLocalObject);

                  case 2:
                    // <METEOR>
                    // https://github.com/sockjs/sockjs-client/issues/79
                    // XDR doesn't work across different schemes
                    // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
                    if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();
                  // </METEOR>

                  case 3:
                    // Opera
                    return new InfoReceiverIframe(base_url);

                  default:
                    // IE 7
                    return new InfoReceiverFake();
                }

                ;
              };

              var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {
                var ir = new InfoReceiver(base_url, utils.XHRLocalObject);

                ir.onfinish = function (info, rtt) {
                  ri._didMessage('m' + JSON.stringify([info, rtt]));

                  ri._didClose();
                };
              };

              WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js
              //         [*] Including lib/trans-iframe-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {
                var that = this;
                that.protocol = 'w-iframe-eventsource';
                that.i_constructor.apply(that, arguments);
              };

              EventSourceIframeTransport.prototype = new IframeTransport();

              EventSourceIframeTransport.enabled = function () {
                return 'EventSource' in _window && IframeTransport.enabled();
              };

              EventSourceIframeTransport.need_body = true;
              EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource
              // w-iframe-eventsource

              var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);
              };

              EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js
              //         [*] Including lib/trans-iframe-xhr-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {
                var that = this;
                that.protocol = 'w-iframe-xhr-polling';
                that.i_constructor.apply(that, arguments);
              };

              XhrPollingIframeTransport.prototype = new IframeTransport();

              XhrPollingIframeTransport.enabled = function () {
                return _window.XMLHttpRequest && IframeTransport.enabled();
              };

              XhrPollingIframeTransport.need_body = true;
              XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr
              // w-iframe-xhr-polling

              var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);
              };

              XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js
              //         [*] Including lib/trans-iframe-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // This transport generally works in any browser, but will cause a
              // spinning cursor to appear in any browser other than IE.
              // We may test this transport in all browsers - why not, but in
              // production it should be only run in IE.

              var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {
                var that = this;
                that.protocol = 'w-iframe-htmlfile';
                that.i_constructor.apply(that, arguments);
              }; // Inheritance.


              HtmlFileIframeTransport.prototype = new IframeTransport();

              HtmlFileIframeTransport.enabled = function () {
                return IframeTransport.enabled();
              };

              HtmlFileIframeTransport.need_body = true;
              HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile
              // w-iframe-htmlfile

              var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {
                this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);
              };

              HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js
              //         [*] Including lib/trans-polling.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var Polling = function (ri, Receiver, recv_url, AjaxObject) {
                var that = this;
                that.ri = ri;
                that.Receiver = Receiver;
                that.recv_url = recv_url;
                that.AjaxObject = AjaxObject;

                that._scheduleRecv();
              };

              Polling.prototype._scheduleRecv = function () {
                var that = this;
                var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);
                var msg_counter = 0;

                poll.onmessage = function (e) {
                  msg_counter += 1;

                  that.ri._didMessage(e.data);
                };

                poll.onclose = function (e) {
                  that.poll = poll = poll.onmessage = poll.onclose = null;

                  if (!that.poll_is_closing) {
                    if (e.reason === 'permanent') {
                      that.ri._didClose(1006, 'Polling error (' + e.reason + ')');
                    } else {
                      that._scheduleRecv();
                    }
                  }
                };
              };

              Polling.prototype.abort = function () {
                var that = this;
                that.poll_is_closing = true;

                if (that.poll) {
                  that.poll.abort();
                }
              }; //         [*] End of lib/trans-polling.js
              //         [*] Including lib/trans-receiver-eventsource.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var EventSourceReceiver = function (url) {
                var that = this;
                var es = new EventSource(url);

                es.onmessage = function (e) {
                  that.dispatchEvent(new SimpleEvent('message', {
                    'data': unescape(e.data)
                  }));
                };

                that.es_close = es.onerror = function (e, abort_reason) {
                  // ES on reconnection has readyState = 0 or 1.
                  // on network error it's CLOSED = 2
                  var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent';
                  that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.

                  es.close();
                  es = null; // Safari and chrome < 15 crash if we close window before
                  // waiting for ES cleanup. See:
                  //   https://code.google.com/p/chromium/issues/detail?id=89155

                  utils.delay(200, function () {
                    that.dispatchEvent(new SimpleEvent('close', {
                      reason: reason
                    }));
                  });
                };
              };

              EventSourceReceiver.prototype = new REventTarget();

              EventSourceReceiver.prototype.abort = function () {
                var that = this;

                if (that.es_close) {
                  that.es_close({}, true);
                }
              }; //         [*] End of lib/trans-receiver-eventsource.js
              //         [*] Including lib/trans-receiver-htmlfile.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var _is_ie_htmlfile_capable;

              var isIeHtmlfileCapable = function () {
                if (_is_ie_htmlfile_capable === undefined) {
                  if ('ActiveXObject' in _window) {
                    try {
                      _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');
                    } catch (x) {}
                  } else {
                    _is_ie_htmlfile_capable = false;
                  }
                }

                return _is_ie_htmlfile_capable;
              };

              var HtmlfileReceiver = function (url) {
                var that = this;
                utils.polluteGlobalNamespace();
                that.id = 'a' + utils.random_string(6, 26);
                url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id);
                var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe;
                var iframeObj;
                _window[WPrefix][that.id] = {
                  start: function () {
                    iframeObj.loaded();
                  },
                  message: function (data) {
                    that.dispatchEvent(new SimpleEvent('message', {
                      'data': data
                    }));
                  },
                  stop: function () {
                    that.iframe_close({}, 'network');
                  }
                };

                that.iframe_close = function (e, abort_reason) {
                  iframeObj.cleanup();
                  that.iframe_close = iframeObj = null;
                  delete _window[WPrefix][that.id];
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: abort_reason
                  }));
                };

                iframeObj = constructor(url, function (e) {
                  that.iframe_close({}, 'permanent');
                });
              };

              HtmlfileReceiver.prototype = new REventTarget();

              HtmlfileReceiver.prototype.abort = function () {
                var that = this;

                if (that.iframe_close) {
                  that.iframe_close({}, 'user');
                }
              }; //         [*] End of lib/trans-receiver-htmlfile.js
              //         [*] Including lib/trans-receiver-xhr.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */

              var XhrReceiver = function (url, AjaxObject) {
                var that = this;
                var buf_pos = 0;
                that.xo = new AjaxObject('POST', url, null);

                that.xo.onchunk = function (status, text) {
                  if (status !== 200) return;

                  while (1) {
                    var buf = text.slice(buf_pos);
                    var p = buf.indexOf('\n');
                    if (p === -1) break;
                    buf_pos += p + 1;
                    var msg = buf.slice(0, p);
                    that.dispatchEvent(new SimpleEvent('message', {
                      data: msg
                    }));
                  }
                };

                that.xo.onfinish = function (status, text) {
                  that.xo.onchunk(status, text);
                  that.xo = null;
                  var reason = status === 200 ? 'network' : 'permanent';
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: reason
                  }));
                };
              };

              XhrReceiver.prototype = new REventTarget();

              XhrReceiver.prototype.abort = function () {
                var that = this;

                if (that.xo) {
                  that.xo.close();
                  that.dispatchEvent(new SimpleEvent('close', {
                    reason: 'user'
                  }));
                  that.xo = null;
                }
              }; //         [*] End of lib/trans-receiver-xhr.js
              //         [*] Including lib/test-hooks.js

              /*
               * ***** BEGIN LICENSE BLOCK *****
               * Copyright (c) 2011-2012 VMware, Inc.
               *
               * For the license see COPYING.
               * ***** END LICENSE BLOCK *****
               */
              // For testing


              SockJS.getUtils = function () {
                return utils;
              };

              SockJS.getIframeTransport = function () {
                return IframeTransport;
              }; //         [*] End of lib/test-hooks.js


              return SockJS;
            }();

            if ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance

            if (typeof define === 'function' && define.amd) {
              define('sockjs', [], function () {
                return SockJS;
              });
            } //     [*] End of lib/index.js
            // [*] End of lib/all.js
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "urls.js": function (_require5, _exports3, _module3) {

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                     //
            // packages/socket-stream-client/urls.js                                                                               //
            //                                                                                                                     //
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module3.export({
              toSockjsUrl: () => toSockjsUrl,
              toWebsocketUrl: () => toWebsocketUrl
            });

            // @param url {String} URL to Meteor app, eg:
            //   "/" or "madewith.meteor.com" or "https://foo.meteor.com"
            //   or "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"
            // @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.
            // for scheme "http" and subPath "sockjs"
            //   "http://subdomain.meteor.com/sockjs" or "/sockjs"
            //   or "https://ddp--1234-foo.meteor.com/sockjs"
            function translateUrl(url, newSchemeBase, subPath) {
              if (!newSchemeBase) {
                newSchemeBase = 'http';
              }

              if (subPath !== "sockjs" && url.startsWith("/")) {
                url = Meteor.absoluteUrl(url.substr(1));
              }

              var ddpUrlMatch = url.match(/^ddp(i?)\+sockjs:\/\//);
              var httpUrlMatch = url.match(/^http(s?):\/\//);
              var newScheme;

              if (ddpUrlMatch) {
                // Remove scheme and split off the host.
                var urlAfterDDP = url.substr(ddpUrlMatch[0].length);
                newScheme = ddpUrlMatch[1] === 'i' ? newSchemeBase : newSchemeBase + 's';
                var slashPos = urlAfterDDP.indexOf('/');
                var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);
                var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This
                // allows different stream connections to connect to different hostnames
                // and avoid browser per-hostname connection limits.

                host = host.replace(/\*/g, () => Math.floor(Math.random() * 10));
                return newScheme + '://' + host + rest;
              } else if (httpUrlMatch) {
                newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + 's';
                var urlAfterHttp = url.substr(httpUrlMatch[0].length);
                url = newScheme + '://' + urlAfterHttp;
              } // Prefix FQDNs but not relative URLs


              if (url.indexOf('://') === -1 && !url.startsWith('/')) {
                url = newSchemeBase + '://' + url;
              } // XXX This is not what we should be doing: if I have a site
              // deployed at "/foo", then DDP.connect("/") should actually connect
              // to "/", not to "/foo". "/" is an absolute path. (Contrast: if
              // deployed at "/foo", it would be reasonable for DDP.connect("bar")
              // to connect to "/foo/bar").
              //
              // We should make this properly honor absolute paths rather than
              // forcing the path to be relative to the site root. Simultaneously,
              // we should set DDP_DEFAULT_CONNECTION_URL to include the site
              // root. See also client_convenience.js #RationalizingRelativeDDPURLs


              url = Meteor._relativeToSiteRootUrl(url);
              if (url.endsWith('/')) return url + subPath;else return url + '/' + subPath;
            }

            function toSockjsUrl(url) {
              return translateUrl(url, 'http', 'sockjs');
            }

            function toWebsocketUrl(url) {
              return translateUrl(url, 'ws', 'websocket');
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  /* Exports */
  Package._define("socket-stream-client");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var IdMap = Package['id-map'].IdMap;
  var Hook = Package['callback-hook'].Hook;
  var DDPCommon = Package['ddp-common'].DDPCommon;
  var Reload = Package.reload.Reload;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var options, DDP;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "ddp-client": { "client": { "client.js": function (_require, _exports, _module) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client.js                                                                                //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module.link("../common/namespace.js", {
                DDP: "DDP"
              }, 0);
              _module.link("../common/livedata_connection");
              _module.link("./client_convenience");
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "client_convenience.js": function (_require3, _exports3, _module2) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/client/client_convenience.js                                                                    //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              let DDP;
              _module2.link("../common/namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 0);
              let Meteor;
              _module2.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);

              // Meteor.refresh can be called on the client (if you're in common code) but it
              // only has an effect on the server.
              Meteor.refresh = () => {}; // By default, try to connect back to the same endpoint as the page
              // was served from.
              //
              // XXX We should be doing this a different way. Right now we don't
              // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't
              // include it on the server when computing
              // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our
              // default, '/'.) We get by with this because DDP.connect then
              // forces the URL passed to it to be interpreted relative to the
              // app's deploy path, even if it is absolute. Instead, we should
              // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;
              // make the default ddpUrl be '' rather that '/'; and make
              // _translateUrl in stream_client_common.js not force absolute paths
              // to be treated like relative paths. See also
              // stream_client_common.js #RationalizingRelativeDDPURLs


              var ddpUrl = '/';

              if (typeof __meteor_runtime_config__ !== 'undefined') {
                if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;
              }

              var retry = new Retry();

              function onDDPVersionNegotiationFailure(description) {
                Meteor._debug(description);

                if (Package.reload) {
                  var migrationData = Package.reload.Reload._migrationData('livedata') || Object.create(null);
                  var failures = migrationData.DDPVersionNegotiationFailures || 0;
                  ++failures;

                  Package.reload.Reload._onMigrate('livedata', () => {
                    return [true, {
                      DDPVersionNegotiationFailures: failures
                    }];
                  });

                  retry.retryLater(failures, () => {
                    Package.reload.Reload._reload();
                  });
                }
              }

              Meteor.connection = DDP.connect(ddpUrl, {
                onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure
              }); // Proxy the public methods of Meteor.connection so they can
              // be called directly on Meteor.

              ['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'].forEach(name => {
                Meteor[name] = Meteor.connection[name].bind(Meteor.connection);
              }); // Meteor.connection used to be called
              // Meteor.default_connection. Provide backcompat as a courtesy even
              // though it was never documented.
              // XXX COMPAT WITH 0.6.4

              Meteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.
              // XXX COMPAT WITH 0.6.4

              Meteor.connect = DDP.connect;
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } }, "common": { "MethodInvoker.js": function (_require4, _exports4, _module3) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/MethodInvoker.js                                                                         //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module3.export({
                default: () => MethodInvoker
              });

              class MethodInvoker {
                constructor(options) {
                  // Public (within this file) fields.
                  this.methodId = options.methodId;
                  this.sentMessage = false;
                  this._callback = options.callback;
                  this._connection = options.connection;
                  this._message = options.message;

                  this._onResultReceived = options.onResultReceived || (() => {});

                  this._wait = options.wait;
                  this.noRetry = options.noRetry;
                  this._methodResult = null;
                  this._dataVisible = false; // Register with the connection.

                  this._connection._methodInvokers[this.methodId] = this;
                } // Sends the method message to the server. May be called additional times if
                // we lose the connection and reconnect before receiving a result.


                sendMessage() {
                  // This function is called before sending a method (including resending on
                  // reconnect). We should only (re)send methods where we don't already have a
                  // result!
                  if (this.gotResult()) throw new Error('sendingMethod is called on method with result'); // If we're re-sending it, it doesn't matter if data was written the first
                  // time.

                  this._dataVisible = false;
                  this.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is
                  // done.

                  if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true; // Actually send the message.

                  this._connection._send(this._message);
                } // Invoke the callback, if we have both a result and know that all data has
                // been written to the local cache.


                _maybeInvokeCallback() {
                  if (this._methodResult && this._dataVisible) {
                    // Call the callback. (This won't throw: the callback was wrapped with
                    // bindEnvironment.)
                    this._callback(this._methodResult[0], this._methodResult[1]); // Forget about this method.


                    delete this._connection._methodInvokers[this.methodId]; // Let the connection know that this method is finished, so it can try to
                    // move on to the next block of methods.

                    this._connection._outstandingMethodFinished();
                  }
                } // Call with the result of the method from the server. Only may be called
                // once; once it is called, you should not call sendMessage again.
                // If the user provided an onResultReceived callback, call it immediately.
                // Then invoke the main callback if data is also visible.


                receiveResult(err, result) {
                  if (this.gotResult()) throw new Error('Methods should only receive results once');
                  this._methodResult = [err, result];

                  this._onResultReceived(err, result);

                  this._maybeInvokeCallback();
                } // Call this when all data written by the method is visible. This means that
                // the method has returns its "data is done" message *AND* all server
                // documents that are buffered at that time have been written to the local
                // cache. Invokes the main callback if the result has been received.


                dataVisible() {
                  this._dataVisible = true;

                  this._maybeInvokeCallback();
                } // True if receiveResult has been called.


                gotResult() {
                  return !!this._methodResult;
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "livedata_connection.js": function (_require5, _exports5, _module4) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/livedata_connection.js                                                                   //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              var _interopRequireDefault = _require5("@babel/runtime/helpers/interopRequireDefault");

              var _objectSpread2 = _interopRequireDefault(_require5("@babel/runtime/helpers/objectSpread"));

              _module4.export({
                Connection: () => Connection
              });
              let Meteor;
              _module4.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 0);
              let DDPCommon;
              _module4.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 1);
              let Tracker;
              _module4.link("meteor/tracker", {
                Tracker(v) {
                  Tracker = v;
                }

              }, 2);
              let EJSON;
              _module4.link("meteor/ejson", {
                EJSON(v) {
                  EJSON = v;
                }

              }, 3);
              let Random;
              _module4.link("meteor/random", {
                Random(v) {
                  Random = v;
                }

              }, 4);
              let Hook;
              _module4.link("meteor/callback-hook", {
                Hook(v) {
                  Hook = v;
                }

              }, 5);
              let MongoID;
              _module4.link("meteor/mongo-id", {
                MongoID(v) {
                  MongoID = v;
                }

              }, 6);
              let DDP;
              _module4.link("./namespace.js", {
                DDP(v) {
                  DDP = v;
                }

              }, 7);
              let MethodInvoker;
              _module4.link("./MethodInvoker.js", {
                default(v) {
                  MethodInvoker = v;
                }

              }, 8);
              let hasOwn, slice, keys, isEmpty, last;
              _module4.link("meteor/ddp-common/utils.js", {
                hasOwn(v) {
                  hasOwn = v;
                },

                slice(v) {
                  slice = v;
                },

                keys(v) {
                  keys = v;
                },

                isEmpty(v) {
                  isEmpty = v;
                },

                last(v) {
                  last = v;
                }

              }, 9);

              if (Meteor.isServer) {
                var Fiber = Npm.require('fibers');

                var Future = Npm.require('fibers/future');
              }

              class MongoIDMap extends IdMap {
                constructor() {
                  super(MongoID.idStringify, MongoID.idParse);
                }

              } // @param url {String|Object} URL to Meteor app,
              //   or an object as a test hook (see code)
              // Options:
              //   reloadWithOutstanding: is it OK to reload if there are outstanding methods?
              //   headers: extra headers to send on the websockets connection, for
              //     server-to-server DDP only
              //   _sockjsOptions: Specifies options to pass through to the sockjs client
              //   onDDPNegotiationVersionFailure: callback when version negotiation fails.
              //
              // XXX There should be a way to destroy a DDP connection, causing all
              // outstanding method calls to fail.
              //
              // XXX Our current way of handling failure and reconnection is great
              // for an app (where we want to tolerate being disconnected as an
              // expect state, and keep trying forever to reconnect) but cumbersome
              // for something like a command line tool that wants to make a
              // connection, call a method, and print an error if connection
              // fails. We should have better usability in the latter case (while
              // still transparently reconnecting if it's just a transient failure
              // or the server migrating us).


              class Connection {
                constructor(url, options) {
                  var self = this;
                  this.options = options = (0, _objectSpread2.default)({
                    onConnected() {},

                    onDDPVersionNegotiationFailure(description) {
                      Meteor._debug(description);
                    },

                    heartbeatInterval: 17500,
                    heartbeatTimeout: 15000,
                    npmFayeOptions: Object.create(null),
                    // These options are only for testing.
                    reloadWithOutstanding: false,
                    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,
                    retry: true,
                    respondToPings: true,
                    // When updates are coming within this ms interval, batch them together.
                    bufferedWritesInterval: 5,
                    // Flush buffers immediately if writes are happening continuously for more than this many ms.
                    bufferedWritesMaxAge: 500
                  }, options); // If set, called when we reconnect, queuing method calls _before_ the
                  // existing outstanding ones.
                  // NOTE: This feature has been preserved for backwards compatibility. The
                  // preferred method of setting a callback on reconnect is to use
                  // DDP.onReconnect.

                  self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.

                  if (typeof url === 'object') {
                    self._stream = url;
                  } else {
                    const {
                      ClientStream
                    } = _require5("meteor/socket-stream-client");

                    self._stream = new ClientStream(url, {
                      retry: options.retry,
                      ConnectionError: DDP.ConnectionError,
                      headers: options.headers,
                      _sockjsOptions: options._sockjsOptions,
                      // Used to keep some tests quiet, or for other cases in which
                      // the right thing to do with connection errors is to silently
                      // fail (e.g. sending package usage stats). At some point we
                      // should have a real API for handling client-stream-level
                      // errors.
                      _dontPrintErrors: options._dontPrintErrors,
                      connectTimeoutMs: options.connectTimeoutMs,
                      npmFayeOptions: options.npmFayeOptions
                    });
                  }

                  self._lastSessionId = null;
                  self._versionSuggestion = null; // The last proposed DDP version.

                  self._version = null; // The DDP version agreed on by client and server.

                  self._stores = Object.create(null); // name -> object with methods

                  self._methodHandlers = Object.create(null); // name -> func

                  self._nextMethodId = 1;
                  self._supportedDDPVersions = options.supportedDDPVersions;
                  self._heartbeatInterval = options.heartbeatInterval;
                  self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet
                  // called their user callback (ie, they are waiting on their result or for all
                  // of their writes to be written to the local cache). Map from method ID to
                  // MethodInvoker object.

                  self._methodInvokers = Object.create(null); // Tracks methods which the user has called but whose result messages have not
                  // arrived yet.
                  //
                  // _outstandingMethodBlocks is an array of blocks of methods. Each block
                  // represents a set of methods that can run at the same time. The first block
                  // represents the methods which are currently in flight; subsequent blocks
                  // must wait for previous blocks to be fully finished before they can be sent
                  // to the server.
                  //
                  // Each block is an object with the following fields:
                  // - methods: a list of MethodInvoker objects
                  // - wait: a boolean; if true, this block had a single method invoked with
                  //         the "wait" option
                  //
                  // There will never be adjacent blocks with wait=false, because the only thing
                  // that makes methods need to be serialized is a wait method.
                  //
                  // Methods are removed from the first block when their "result" is
                  // received. The entire first block is only removed when all of the in-flight
                  // methods have received their results (so the "methods" list is empty) *AND*
                  // all of the data written by those methods are visible in the local cache. So
                  // it is possible for the first block's methods list to be empty, if we are
                  // still waiting for some objects to quiesce.
                  //
                  // Example:
                  //  _outstandingMethodBlocks = [
                  //    {wait: false, methods: []},
                  //    {wait: true, methods: [<MethodInvoker for 'login'>]},
                  //    {wait: false, methods: [<MethodInvoker for 'foo'>,
                  //                            <MethodInvoker for 'bar'>]}]
                  // This means that there were some methods which were sent to the server and
                  // which have returned their results, but some of the data written by
                  // the methods may not be visible in the local cache. Once all that data is
                  // visible, we will send a 'login' method. Once the login method has returned
                  // and all the data is visible (including re-running subs if userId changes),
                  // we will send the 'foo' and 'bar' methods in parallel.

                  self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing
                  // documents written by a given method's stub. keys are associated with
                  // methods whose stub wrote at least one document, and whose data-done message
                  // has not yet been received.

                  self._documentsWrittenByStub = Object.create(null); // collection -> IdMap of "server document" object. A "server document" has:
                  // - "document": the version of the document according the
                  //   server (ie, the snapshot before a stub wrote it, amended by any changes
                  //   received from the server)
                  //   It is undefined if we think the document does not exist
                  // - "writtenByStubs": a set of method IDs whose stubs wrote to the document
                  //   whose "data done" messages have not yet been processed

                  self._serverDocuments = Object.create(null); // Array of callbacks to be called after the next update of the local
                  // cache. Used for:
                  //  - Calling methodInvoker.dataVisible and sub ready callbacks after
                  //    the relevant data is flushed.
                  //  - Invoking the callbacks of "half-finished" methods after reconnect
                  //    quiescence. Specifically, methods whose result was received over the old
                  //    connection (so we don't re-send it) but whose data had not been made
                  //    visible.

                  self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them
                  // all at once in a single update:
                  //   - During reconnect, we buffer all data messages until all subs that had
                  //     been ready before reconnect are ready again, and all methods that are
                  //     active have returned their "data done message"; then
                  //   - During the execution of a "wait" method, we buffer all data messages
                  //     until the wait method gets its "data done" message. (If the wait method
                  //     occurs during reconnect, it doesn't get any special handling.)
                  // all data messages are processed in one update.
                  //
                  // The following fields are used for this "quiescence" process.
                  // This buffers the messages that aren't being processed yet.

                  self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their
                  // "data done" message is received, and we will not quiesce until it is
                  // empty.

                  self._methodsBlockingQuiescence = Object.create(null); // map from sub ID -> true for subs that were ready (ie, called the sub
                  // ready callback) before reconnect but haven't become ready again yet

                  self._subsBeingRevived = Object.create(null); // map from sub._id -> true
                  // if true, the next data update should reset all stores. (set during
                  // reconnect.)

                  self._resetStores = false; // name -> array of updates for (yet to be created) collections

                  self._updatesForUnknownStores = Object.create(null); // if we're blocking a migration, the retry func

                  self._retryMigrate = null;
                  self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, 'flushing DDP buffered writes', self); // Collection name -> array of messages.

                  self._bufferedWrites = Object.create(null); // When current buffer of updates must be flushed at, in ms timestamp.

                  self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes

                  self._bufferedWritesFlushHandle = null;
                  self._bufferedWritesInterval = options.bufferedWritesInterval;
                  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:
                  //   - id
                  //   - name
                  //   - params
                  //   - inactive (if true, will be cleaned up if not reused in re-run)
                  //   - ready (has the 'ready' message been received?)
                  //   - readyCallback (an optional callback to call when ready)
                  //   - errorCallback (an optional callback to call if the sub terminates with
                  //                    an error, XXX COMPAT WITH 1.0.3.1)
                  //   - stopCallback (an optional callback to call when the sub terminates
                  //     for any reason, with an error argument if an error triggered the stop)

                  self._subscriptions = Object.create(null); // Reactive userId.

                  self._userId = null;
                  self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.

                  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {
                    Package.reload.Reload._onMigrate(retry => {
                      if (!self._readyToMigrate()) {
                        if (self._retryMigrate) throw new Error('Two migrations in progress?');
                        self._retryMigrate = retry;
                        return false;
                      } else {
                        return [true];
                      }
                    });
                  }

                  var onDisconnect = () => {
                    if (self._heartbeat) {
                      self._heartbeat.stop();

                      self._heartbeat = null;
                    }
                  };

                  if (Meteor.isServer) {
                    self._stream.on('message', Meteor.bindEnvironment(this.onMessage.bind(this), 'handling DDP message'));

                    self._stream.on('reset', Meteor.bindEnvironment(this.onReset.bind(this), 'handling DDP reset'));

                    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, 'handling DDP disconnect'));
                  } else {
                    self._stream.on('message', this.onMessage.bind(this));

                    self._stream.on('reset', this.onReset.bind(this));

                    self._stream.on('disconnect', onDisconnect);
                  }
                } // 'name' is the name of the data on the wire that should go in the
                // store. 'wrappedStore' should be an object with methods beginUpdate, update,
                // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.


                registerStore(name, wrappedStore) {
                  var self = this;
                  if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not
                  // implemented by 'store' into a no-op.

                  var store = Object.create(null);
                  ['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'].forEach(method => {
                    store[method] = function () {
                      if (wrappedStore[method]) {
                        return wrappedStore[method](...arguments);
                      }
                    };
                  });
                  self._stores[name] = store;
                  var queued = self._updatesForUnknownStores[name];

                  if (queued) {
                    store.beginUpdate(queued.length, false);
                    queued.forEach(msg => {
                      store.update(msg);
                    });
                    store.endUpdate();
                    delete self._updatesForUnknownStores[name];
                  }

                  return true;
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.subscribe
                 * @summary Subscribe to a record set.  Returns a handle that provides
                 * `stop()` and `ready()` methods.
                 * @locus Client
                 * @param {String} name Name of the subscription.  Matches the name of the
                 * server's `publish()` call.
                 * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher
                 * function on server.
                 * @param {Function|Object} [callbacks] Optional. May include `onStop`
                 * and `onReady` callbacks. If there is an error, it is passed as an
                 * argument to `onStop`. If a function is passed instead of an object, it
                 * is interpreted as an `onReady` callback.
                 */

                subscribe(name
                /* .. [arguments] .. (callback|callbacks) */
                ) {
                  var self = this;
                  var params = slice.call(arguments, 1);
                  var callbacks = Object.create(null);

                  if (params.length) {
                    var lastParam = params[params.length - 1];

                    if (typeof lastParam === 'function') {
                      callbacks.onReady = params.pop();
                    } else if (lastParam && [lastParam.onReady, // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use
                    // onStop with an error callback instead.
                    lastParam.onError, lastParam.onStop].some(f => typeof f === "function")) {
                      callbacks = params.pop();
                    }
                  } // Is there an existing sub with the same name and param, run in an
                  // invalidated Computation? This will happen if we are rerunning an
                  // existing computation.
                  //
                  // For example, consider a rerun of:
                  //
                  //     Tracker.autorun(function () {
                  //       Meteor.subscribe("foo", Session.get("foo"));
                  //       Meteor.subscribe("bar", Session.get("bar"));
                  //     });
                  //
                  // If "foo" has changed but "bar" has not, we will match the "bar"
                  // subcribe to an existing inactive subscription in order to not
                  // unsub and resub the subscription unnecessarily.
                  //
                  // We only look for one such sub; if there are N apparently-identical subs
                  // being invalidated, we will require N matching subscribe calls to keep
                  // them all active.


                  var existing;
                  keys(self._subscriptions).some(id => {
                    const sub = self._subscriptions[id];

                    if (sub.inactive && sub.name === name && EJSON.equals(sub.params, params)) {
                      return existing = sub;
                    }
                  });
                  var id;

                  if (existing) {
                    id = existing.id;
                    existing.inactive = false; // reactivate

                    if (callbacks.onReady) {
                      // If the sub is not already ready, replace any ready callback with the
                      // one provided now. (It's not really clear what users would expect for
                      // an onReady callback inside an autorun; the semantics we provide is
                      // that at the time the sub first becomes ready, we call the last
                      // onReady callback provided, if any.)
                      // If the sub is already ready, run the ready callback right away.
                      // It seems that users would expect an onReady callback inside an
                      // autorun to trigger once the the sub first becomes ready and also
                      // when re-subs happens.
                      if (existing.ready) {
                        callbacks.onReady();
                      } else {
                        existing.readyCallback = callbacks.onReady;
                      }
                    } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call
                    // onStop with an optional error argument


                    if (callbacks.onError) {
                      // Replace existing callback if any, so that errors aren't
                      // double-reported.
                      existing.errorCallback = callbacks.onError;
                    }

                    if (callbacks.onStop) {
                      existing.stopCallback = callbacks.onStop;
                    }
                  } else {
                    // New sub! Generate an id, save it locally, and send message.
                    id = Random.id();
                    self._subscriptions[id] = {
                      id: id,
                      name: name,
                      params: EJSON.clone(params),
                      inactive: false,
                      ready: false,
                      readyDeps: new Tracker.Dependency(),
                      readyCallback: callbacks.onReady,
                      // XXX COMPAT WITH 1.0.3.1 #errorCallback
                      errorCallback: callbacks.onError,
                      stopCallback: callbacks.onStop,
                      connection: self,

                      remove() {
                        delete this.connection._subscriptions[this.id];
                        this.ready && this.readyDeps.changed();
                      },

                      stop() {
                        this.connection._send({
                          msg: 'unsub',
                          id: id
                        });

                        this.remove();

                        if (callbacks.onStop) {
                          callbacks.onStop();
                        }
                      }

                    };

                    self._send({
                      msg: 'sub',
                      id: id,
                      name: name,
                      params: params
                    });
                  } // return a handle to the application.


                  var handle = {
                    stop() {
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return;
                      }

                      self._subscriptions[id].stop();
                    },

                    ready() {
                      // return false if we've unsubscribed.
                      if (!hasOwn.call(self._subscriptions, id)) {
                        return false;
                      }

                      var record = self._subscriptions[id];
                      record.readyDeps.depend();
                      return record.ready;
                    },

                    subscriptionId: id
                  };

                  if (Tracker.active) {
                    // We're in a reactive computation, so we'd like to unsubscribe when the
                    // computation is invalidated... but not if the rerun just re-subscribes
                    // to the same subscription!  When a rerun happens, we use onInvalidate
                    // as a change to mark the subscription "inactive" so that it can
                    // be reused from the rerun.  If it isn't reused, it's killed from
                    // an afterFlush.
                    Tracker.onInvalidate(c => {
                      if (hasOwn.call(self._subscriptions, id)) {
                        self._subscriptions[id].inactive = true;
                      }

                      Tracker.afterFlush(() => {
                        if (hasOwn.call(self._subscriptions, id) && self._subscriptions[id].inactive) {
                          handle.stop();
                        }
                      });
                    });
                  }

                  return handle;
                } // options:
                // - onLateError {Function(error)} called if an error was received after the ready event.
                //     (errors received before ready cause an error to be thrown)


                _subscribeAndWait(name, args, options) {
                  var self = this;
                  var f = new Future();
                  var ready = false;
                  var handle;
                  args = args || [];
                  args.push({
                    onReady() {
                      ready = true;
                      f['return']();
                    },

                    onError(e) {
                      if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e);
                    }

                  });
                  handle = self.subscribe.apply(self, [name].concat(args));
                  f.wait();
                  return handle;
                }

                methods(methods) {
                  keys(methods).forEach(name => {
                    const func = methods[name];

                    if (typeof func !== 'function') {
                      throw new Error("Method '" + name + "' must be a function");
                    }

                    if (this._methodHandlers[name]) {
                      throw new Error("A method named '" + name + "' is already defined");
                    }

                    this._methodHandlers[name] = func;
                  });
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.call
                 * @summary Invokes a method passing any number of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable} [arg1,arg2...] Optional method arguments
                 * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).
                 */

                call(name
                /* .. [arguments] .. callback */
                ) {
                  // if it's a function, the last argument is the result callback,
                  // not a parameter to the remote method.
                  var args = slice.call(arguments, 1);
                  if (args.length && typeof args[args.length - 1] === 'function') var callback = args.pop();
                  return this.apply(name, args, callback);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.apply
                 * @summary Invoke a method passing an array of arguments.
                 * @locus Anywhere
                 * @param {String} name Name of method to invoke
                 * @param {EJSONable[]} args Method arguments
                 * @param {Object} [options]
                 * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.
                 * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.
                 * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.
                 * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.
                 * @param {Boolean} options.returnStubValue (Client only) If true then in cases where we would have otherwise discarded the stub's return value and returned undefined, instead we go ahead and return it. Specifically, this is any time other than when (a) we are already inside a stub or (b) we are in Node and no callback was provided. Currently we require this flag to be explicitly passed to reduce the likelihood that stub return values will be confused with server return values; we may improve this in future.
                 * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).
                 */

                apply(name, args, options, callback) {
                  var self = this; // We were passed 3 arguments. They may be either (name, args, options)
                  // or (name, args, callback)

                  if (!callback && typeof options === 'function') {
                    callback = options;
                    options = Object.create(null);
                  }

                  options = options || Object.create(null);

                  if (callback) {
                    // XXX would it be better form to do the binding in stream.on,
                    // or caller, instead of here?
                    // XXX improve error message (and how we report it)
                    callback = Meteor.bindEnvironment(callback, "delivering result of invoking '" + name + "'");
                  } // Keep our args safe from mutation (eg if we don't send the message for a
                  // while because of a wait method).


                  args = EJSON.clone(args);

                  var enclosing = DDP._CurrentMethodInvocation.get();

                  var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.
                  // The random streams only have utility if they're used on both the client
                  // and the server; if the client doesn't generate any 'random' values
                  // then we don't expect the server to generate any either.
                  // Less commonly, the server may perform different actions from the client,
                  // and may in fact generate values where the client did not, but we don't
                  // have any client-side values to match, so even here we may as well just
                  // use a random seed on the server.  In that case, we don't pass the
                  // randomSeed to save bandwidth, and we don't even generate it to save a
                  // bit of CPU and to avoid consuming entropy.

                  var randomSeed = null;

                  var randomSeedGenerator = () => {
                    if (randomSeed === null) {
                      randomSeed = DDPCommon.makeRpcSeed(enclosing, name);
                    }

                    return randomSeed;
                  }; // Run the stub, if we have one. The stub is supposed to make some
                  // temporary writes to the database to give the user a smooth experience
                  // until the actual result of executing the method comes back from the
                  // server (whereupon the temporary writes to the database will be reversed
                  // during the beginUpdate/endUpdate process.)
                  //
                  // Normally, we ignore the return value of the stub (even if it is an
                  // exception), in favor of the real return value from the server. The
                  // exception is if the *caller* is a stub. In that case, we're not going
                  // to do a RPC, so we use the return value of the stub as our return
                  // value.


                  var stub = self._methodHandlers[name];

                  if (stub) {
                    var setUserId = userId => {
                      self.setUserId(userId);
                    };

                    var invocation = new DDPCommon.MethodInvocation({
                      isSimulation: true,
                      userId: self.userId(),
                      setUserId: setUserId,

                      randomSeed() {
                        return randomSeedGenerator();
                      }

                    });
                    if (!alreadyInSimulation) self._saveOriginals();

                    try {
                      // Note that unlike in the corresponding server code, we never audit
                      // that stubs check() their arguments.
                      var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, () => {
                        if (Meteor.isServer) {
                          // Because saveOriginals and retrieveOriginals aren't reentrant,
                          // don't allow stubs to yield.
                          return Meteor._noYieldsAllowed(() => {
                            // re-clone, so that the stub can't affect our caller's values
                            return stub.apply(invocation, EJSON.clone(args));
                          });
                        } else {
                          return stub.apply(invocation, EJSON.clone(args));
                        }
                      });
                    } catch (e) {
                      var exception = e;
                    }
                  } // If we're in a simulation, stop and return the result we have,
                  // rather than going on to do an RPC. If there was no stub,
                  // we'll end up returning undefined.


                  if (alreadyInSimulation) {
                    if (callback) {
                      callback(exception, stubReturnValue);
                      return undefined;
                    }

                    if (exception) throw exception;
                    return stubReturnValue;
                  } // We only create the methodId here because we don't actually need one if
                  // we're already in a simulation


                  const methodId = '' + self._nextMethodId++;

                  if (stub) {
                    self._retrieveAndStoreOriginals(methodId);
                  } // Generate the DDP message for the method call. Note that on the client,
                  // it is important that the stub have finished before we send the RPC, so
                  // that we know we have a complete list of which local documents the stub
                  // wrote.


                  var message = {
                    msg: 'method',
                    method: name,
                    params: args,
                    id: methodId
                  }; // If an exception occurred in a stub, and we're ignoring it
                  // because we're doing an RPC and want to use what the server
                  // returns instead, log it so the developer knows
                  // (unless they explicitly ask to see the error).
                  //
                  // Tests can set the '_expectedByTest' flag on an exception so it won't
                  // go to log.

                  if (exception) {
                    if (options.throwStubExceptions) {
                      throw exception;
                    } else if (!exception._expectedByTest) {
                      Meteor._debug("Exception while simulating the effect of invoking '" + name + "'", exception);
                    }
                  } // At this point we're definitely doing an RPC, and we're going to
                  // return the value of the RPC to the caller.
                  // If the caller didn't give a callback, decide what to do.


                  if (!callback) {
                    if (Meteor.isClient) {
                      // On the client, we don't have fibers, so we can't block. The
                      // only thing we can do is to return undefined and discard the
                      // result of the RPC. If an error occurred then print the error
                      // to the console.
                      callback = err => {
                        err && Meteor._debug("Error invoking Method '" + name + "'", err);
                      };
                    } else {
                      // On the server, make the function synchronous. Throw on
                      // errors, return on success.
                      var future = new Future();
                      callback = future.resolver();
                    }
                  } // Send the randomSeed only if we used it


                  if (randomSeed !== null) {
                    message.randomSeed = randomSeed;
                  }

                  var methodInvoker = new MethodInvoker({
                    methodId,
                    callback: callback,
                    connection: self,
                    onResultReceived: options.onResultReceived,
                    wait: !!options.wait,
                    message: message,
                    noRetry: !!options.noRetry
                  });

                  if (options.wait) {
                    // It's a wait method! Wait methods go in their own block.
                    self._outstandingMethodBlocks.push({
                      wait: true,
                      methods: [methodInvoker]
                    });
                  } else {
                    // Not a wait method. Start a new block if the previous block was a wait
                    // block, and add it to the last block of methods.
                    if (isEmpty(self._outstandingMethodBlocks) || last(self._outstandingMethodBlocks).wait) {
                      self._outstandingMethodBlocks.push({
                        wait: false,
                        methods: []
                      });
                    }

                    last(self._outstandingMethodBlocks).methods.push(methodInvoker);
                  } // If we added it to the first block, send it out now.


                  if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,
                  // block waiting for the result.

                  if (future) {
                    return future.wait();
                  }

                  return options.returnStubValue ? stubReturnValue : undefined;
                } // Before calling a method stub, prepare all stores to track changes and allow
                // _retrieveAndStoreOriginals to get the original versions of changed
                // documents.


                _saveOriginals() {
                  if (!this._waitingForQuiescence()) {
                    this._flushBufferedWrites();
                  }

                  keys(this._stores).forEach(storeName => {
                    this._stores[storeName].saveOriginals();
                  });
                } // Retrieves the original versions of all documents modified by the stub for
                // method 'methodId' from all stores and saves them to _serverDocuments (keyed
                // by document) and _documentsWrittenByStub (keyed by method ID).


                _retrieveAndStoreOriginals(methodId) {
                  var self = this;
                  if (self._documentsWrittenByStub[methodId]) throw new Error('Duplicate methodId in _retrieveAndStoreOriginals');
                  var docsWritten = [];
                  keys(self._stores).forEach(collection => {
                    var originals = self._stores[collection].retrieveOriginals(); // not all stores define retrieveOriginals


                    if (!originals) return;
                    originals.forEach((doc, id) => {
                      docsWritten.push({
                        collection,
                        id
                      });

                      if (!hasOwn.call(self._serverDocuments, collection)) {
                        self._serverDocuments[collection] = new MongoIDMap();
                      }

                      var serverDoc = self._serverDocuments[collection].setDefault(id, Object.create(null));

                      if (serverDoc.writtenByStubs) {
                        // We're not the first stub to write this doc. Just add our method ID
                        // to the record.
                        serverDoc.writtenByStubs[methodId] = true;
                      } else {
                        // First stub! Save the original value and our method ID.
                        serverDoc.document = doc;
                        serverDoc.flushCallbacks = [];
                        serverDoc.writtenByStubs = Object.create(null);
                        serverDoc.writtenByStubs[methodId] = true;
                      }
                    });
                  });

                  if (!isEmpty(docsWritten)) {
                    self._documentsWrittenByStub[methodId] = docsWritten;
                  }
                } // This is very much a private function we use to make the tests
                // take up fewer server resources after they complete.


                _unsubscribeAll() {
                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id]; // Avoid killing the autoupdate subscription so that developers
                    // still get hot code pushes when writing tests.
                    //
                    // XXX it's a hack to encode knowledge about autoupdate here,
                    // but it doesn't seem worth it yet to have a special API for
                    // subscriptions to preserve after unit tests.

                    if (sub.name !== 'meteor_autoupdate_clientVersions') {
                      sub.stop();
                    }
                  });
                } // Sends the DDP stringification of the given message object


                _send(obj) {
                  this._stream.send(DDPCommon.stringifyDDP(obj));
                } // We detected via DDP-level heartbeats that we've lost the
                // connection.  Unlike `disconnect` or `close`, a lost connection
                // will be automatically retried.


                _lostConnection(error) {
                  this._stream._lostConnection(error);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.status
                 * @summary Get the current connection status. A reactive data source.
                 * @locus Client
                 */

                status() {
                  return this._stream.status(...arguments);
                }
                /**
                 * @summary Force an immediate reconnection attempt if the client is not connected to the server.
                 This method does nothing if the client is already connected.
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.reconnect
                 * @locus Client
                 */

                reconnect() {
                  return this._stream.reconnect(...arguments);
                }
                /**
                 * @memberOf Meteor
                 * @importFromPackage meteor
                 * @alias Meteor.disconnect
                 * @summary Disconnect the client from the server.
                 * @locus Client
                 */

                disconnect() {
                  return this._stream.disconnect(...arguments);
                }

                close() {
                  return this._stream.disconnect({
                    _permanent: true
                  });
                } ///
                /// Reactive user system
                ///


                userId() {
                  if (this._userIdDeps) this._userIdDeps.depend();
                  return this._userId;
                }

                setUserId(userId) {
                  // Avoid invalidating dependents if setUserId is called with current value.
                  if (this._userId === userId) return;
                  this._userId = userId;
                  if (this._userIdDeps) this._userIdDeps.changed();
                } // Returns true if we are in a state after reconnect of waiting for subs to be
                // revived or early methods to finish their data, or we are waiting for a
                // "wait" method to finish.


                _waitingForQuiescence() {
                  return !isEmpty(this._subsBeingRevived) || !isEmpty(this._methodsBlockingQuiescence);
                } // Returns true if any method whose message has been sent to the server has
                // not yet invoked its user callback.


                _anyMethodsAreOutstanding() {
                  const invokers = this._methodInvokers;
                  return keys(invokers).some(id => {
                    return invokers[id].sentMessage;
                  });
                }

                _livedata_connected(msg) {
                  var self = this;

                  if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {
                    self._heartbeat = new DDPCommon.Heartbeat({
                      heartbeatInterval: self._heartbeatInterval,
                      heartbeatTimeout: self._heartbeatTimeout,

                      onTimeout() {
                        self._lostConnection(new DDP.ConnectionError('DDP heartbeat timed out'));
                      },

                      sendPing() {
                        self._send({
                          msg: 'ping'
                        });
                      }

                    });

                    self._heartbeat.start();
                  } // If this is a reconnect, we'll have to reset all stores.


                  if (self._lastSessionId) self._resetStores = true;

                  if (typeof msg.session === 'string') {
                    var reconnectedToPreviousSession = self._lastSessionId === msg.session;
                    self._lastSessionId = msg.session;
                  }

                  if (reconnectedToPreviousSession) {
                    // Successful reconnection -- pick up where we left off.  Note that right
                    // now, this never happens: the server never connects us to a previous
                    // session, because DDP doesn't provide enough data for the server to know
                    // what messages the client has processed. We need to improve DDP to make
                    // this possible, at which point we'll probably need more code here.
                    return;
                  } // Server doesn't have our data any more. Re-sync a new session.
                  // Forget about messages we were buffering for unknown collections. They'll
                  // be resent if still relevant.


                  self._updatesForUnknownStores = Object.create(null);

                  if (self._resetStores) {
                    // Forget about the effects of stubs. We'll be resetting all collections
                    // anyway.
                    self._documentsWrittenByStub = Object.create(null);
                    self._serverDocuments = Object.create(null);
                  } // Clear _afterUpdateCallbacks.


                  self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the
                  // ready callback) as needing to be revived.
                  // XXX We should also block reconnect quiescence until unnamed subscriptions
                  //     (eg, autopublish) are done re-publishing to avoid flicker!

                  self._subsBeingRevived = Object.create(null);
                  keys(self._subscriptions).forEach(id => {
                    if (self._subscriptions[id].ready) {
                      self._subsBeingRevived[id] = true;
                    }
                  }); // Arrange for "half-finished" methods to have their callbacks run, and
                  // track methods that were sent on this connection so that we don't
                  // quiesce until they are all done.
                  //
                  // Start by clearing _methodsBlockingQuiescence: methods sent before
                  // reconnect don't matter, and any "wait" methods sent on the new connection
                  // that we drop here will be restored by the loop below.

                  self._methodsBlockingQuiescence = Object.create(null);

                  if (self._resetStores) {
                    const invokers = self._methodInvokers;
                    keys(invokers).forEach(id => {
                      const invoker = invokers[id];

                      if (invoker.gotResult()) {
                        // This method already got its result, but it didn't call its callback
                        // because its data didn't become visible. We did not resend the
                        // method RPC. We'll call its callback when we get a full quiesce,
                        // since that's as close as we'll get to "data must be visible".
                        self._afterUpdateCallbacks.push(function () {
                          return invoker.dataVisible(...arguments);
                        });
                      } else if (invoker.sentMessage) {
                        // This method has been sent on this connection (maybe as a resend
                        // from the last connection, maybe from onReconnect, maybe just very
                        // quickly before processing the connected message).
                        //
                        // We don't need to do anything special to ensure its callbacks get
                        // called, but we'll count it as a method which is preventing
                        // reconnect quiescence. (eg, it might be a login method that was run
                        // from onReconnect, and we don't want to see flicker by seeing a
                        // logged-out state.)
                        self._methodsBlockingQuiescence[invoker.methodId] = true;
                      }
                    });
                  }

                  self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and
                  // call the callbacks immediately.

                  if (!self._waitingForQuiescence()) {
                    if (self._resetStores) {
                      keys(self._stores).forEach(storeName => {
                        const s = self._stores[storeName];
                        s.beginUpdate(0, true);
                        s.endUpdate();
                      });
                      self._resetStores = false;
                    }

                    self._runAfterUpdateCallbacks();
                  }
                }

                _processOneDataMessage(msg, updates) {
                  const messageType = msg.msg; // msg is one of ['added', 'changed', 'removed', 'ready', 'updated']

                  if (messageType === 'added') {
                    this._process_added(msg, updates);
                  } else if (messageType === 'changed') {
                    this._process_changed(msg, updates);
                  } else if (messageType === 'removed') {
                    this._process_removed(msg, updates);
                  } else if (messageType === 'ready') {
                    this._process_ready(msg, updates);
                  } else if (messageType === 'updated') {
                    this._process_updated(msg, updates);
                  } else if (messageType === 'nosub') {// ignore this
                  } else {
                    Meteor._debug('discarding unknown livedata data message type', msg);
                  }
                }

                _livedata_data(msg) {
                  var self = this;

                  if (self._waitingForQuiescence()) {
                    self._messagesBufferedUntilQuiescence.push(msg);

                    if (msg.msg === 'nosub') {
                      delete self._subsBeingRevived[msg.id];
                    }

                    if (msg.subs) {
                      msg.subs.forEach(subId => {
                        delete self._subsBeingRevived[subId];
                      });
                    }

                    if (msg.methods) {
                      msg.methods.forEach(methodId => {
                        delete self._methodsBlockingQuiescence[methodId];
                      });
                    }

                    if (self._waitingForQuiescence()) {
                      return;
                    } // No methods or subs are blocking quiescence!
                    // We'll now process and all of our buffered messages, reset all stores,
                    // and apply them all at once.


                    const bufferedMessages = self._messagesBufferedUntilQuiescence;
                    keys(bufferedMessages).forEach(id => {
                      self._processOneDataMessage(bufferedMessages[id], self._bufferedWrites);
                    });
                    self._messagesBufferedUntilQuiescence = [];
                  } else {
                    self._processOneDataMessage(msg, self._bufferedWrites);
                  } // Immediately flush writes when:
                  //  1. Buffering is disabled. Or;
                  //  2. any non-(added/changed/removed) message arrives.


                  var standardWrite = msg.msg === "added" || msg.msg === "changed" || msg.msg === "removed";

                  if (self._bufferedWritesInterval === 0 || !standardWrite) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushAt === null) {
                    self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;
                  } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {
                    self._flushBufferedWrites();

                    return;
                  }

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                  }

                  self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval);
                }

                _flushBufferedWrites() {
                  var self = this;

                  if (self._bufferedWritesFlushHandle) {
                    clearTimeout(self._bufferedWritesFlushHandle);
                    self._bufferedWritesFlushHandle = null;
                  }

                  self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to
                  //  performWrites. As there's no guarantee that it
                  //  will exit cleanly.

                  var writes = self._bufferedWrites;
                  self._bufferedWrites = Object.create(null);

                  self._performWrites(writes);
                }

                _performWrites(updates) {
                  var self = this;

                  if (self._resetStores || !isEmpty(updates)) {
                    // Begin a transactional update of each store.
                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].beginUpdate(hasOwn.call(updates, storeName) ? updates[storeName].length : 0, self._resetStores);
                    });
                    self._resetStores = false;
                    keys(updates).forEach(storeName => {
                      const updateMessages = updates[storeName];
                      var store = self._stores[storeName];

                      if (store) {
                        updateMessages.forEach(updateMessage => {
                          store.update(updateMessage);
                        });
                      } else {
                        // Nobody's listening for this data. Queue it up until
                        // someone wants it.
                        // XXX memory use will grow without bound if you forget to
                        // create a collection or just don't care about it... going
                        // to have to do something about that.
                        const updates = self._updatesForUnknownStores;

                        if (!hasOwn.call(updates, storeName)) {
                          updates[storeName] = [];
                        }

                        updates[storeName].push(...updateMessages);
                      }
                    }); // End update transaction.

                    keys(self._stores).forEach(storeName => {
                      self._stores[storeName].endUpdate();
                    });
                  }

                  self._runAfterUpdateCallbacks();
                } // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose
                // relevant docs have been flushed, as well as dataVisible callbacks at
                // reconnect-quiescence time.


                _runAfterUpdateCallbacks() {
                  var self = this;
                  var callbacks = self._afterUpdateCallbacks;
                  self._afterUpdateCallbacks = [];
                  callbacks.forEach(c => {
                    c();
                  });
                }

                _pushUpdate(updates, collection, msg) {
                  if (!hasOwn.call(updates, collection)) {
                    updates[collection] = [];
                  }

                  updates[collection].push(msg);
                }

                _getServerDoc(collection, id) {
                  var self = this;

                  if (!hasOwn.call(self._serverDocuments, collection)) {
                    return null;
                  }

                  var serverDocsForCollection = self._serverDocuments[collection];
                  return serverDocsForCollection.get(id) || null;
                }

                _process_added(msg, updates) {
                  var self = this;
                  var id = MongoID.idParse(msg.id);

                  var serverDoc = self._getServerDoc(msg.collection, id);

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    var isExisting = serverDoc.document !== undefined;
                    serverDoc.document = msg.fields || Object.create(null);
                    serverDoc.document._id = id;

                    if (self._resetStores) {
                      // During reconnect the server is sending adds for existing ids.
                      // Always push an update so that document stays in the store after
                      // reset. Use current version of the document for this update, so
                      // that stub-written values are preserved.
                      var currentDoc = self._stores[msg.collection].getDoc(msg.id);

                      if (currentDoc !== undefined) msg.fields = currentDoc;

                      self._pushUpdate(updates, msg.collection, msg);
                    } else if (isExisting) {
                      throw new Error('Server sent add for existing id: ' + msg.id);
                    }
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_changed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    if (serverDoc.document === undefined) throw new Error('Server sent changed for nonexisting id: ' + msg.id);
                    DiffSequence.applyChanges(serverDoc.document, msg.fields);
                  } else {
                    self._pushUpdate(updates, msg.collection, msg);
                  }
                }

                _process_removed(msg, updates) {
                  var self = this;

                  var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));

                  if (serverDoc) {
                    // Some outstanding stub wrote here.
                    if (serverDoc.document === undefined) throw new Error('Server sent removed for nonexisting id:' + msg.id);
                    serverDoc.document = undefined;
                  } else {
                    self._pushUpdate(updates, msg.collection, {
                      msg: 'removed',
                      collection: msg.collection,
                      id: msg.id
                    });
                  }
                }

                _process_updated(msg, updates) {
                  var self = this; // Process "method done" messages.

                  msg.methods.forEach(methodId => {
                    const docs = self._documentsWrittenByStub[methodId];
                    keys(docs).forEach(id => {
                      const written = docs[id];

                      const serverDoc = self._getServerDoc(written.collection, written.id);

                      if (!serverDoc) {
                        throw new Error('Lost serverDoc for ' + JSON.stringify(written));
                      }

                      if (!serverDoc.writtenByStubs[methodId]) {
                        throw new Error('Doc ' + JSON.stringify(written) + ' not written by  method ' + methodId);
                      }

                      delete serverDoc.writtenByStubs[methodId];

                      if (isEmpty(serverDoc.writtenByStubs)) {
                        // All methods whose stubs wrote this method have completed! We can
                        // now copy the saved document to the database (reverting the stub's
                        // change if the server did not write to this object, or applying the
                        // server's writes if it did).
                        // This is a fake ddp 'replace' message.  It's just for talking
                        // between livedata connections and minimongo.  (We have to stringify
                        // the ID because it's supposed to look like a wire message.)
                        self._pushUpdate(updates, written.collection, {
                          msg: 'replace',
                          id: MongoID.idStringify(written.id),
                          replace: serverDoc.document
                        }); // Call all flush callbacks.


                        serverDoc.flushCallbacks.forEach(c => {
                          c();
                        }); // Delete this completed serverDocument. Don't bother to GC empty
                        // IdMaps inside self._serverDocuments, since there probably aren't
                        // many collections and they'll be written repeatedly.

                        self._serverDocuments[written.collection].remove(written.id);
                      }
                    });
                    delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all
                    // currently buffered messages are flushed.

                    const callbackInvoker = self._methodInvokers[methodId];

                    if (!callbackInvoker) {
                      throw new Error('No callback invoker for method ' + methodId);
                    }

                    self._runWhenAllServerDocsAreFlushed(function () {
                      return callbackInvoker.dataVisible(...arguments);
                    });
                  });
                }

                _process_ready(msg, updates) {
                  var self = this; // Process "sub ready" messages. "sub ready" messages don't take effect
                  // until all current server documents have been flushed to the local
                  // database. We can use a write fence to implement this.

                  msg.subs.forEach(subId => {
                    self._runWhenAllServerDocsAreFlushed(() => {
                      var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?

                      if (!subRecord) return; // Did we already receive a ready message? (Oops!)

                      if (subRecord.ready) return;
                      subRecord.ready = true;
                      subRecord.readyCallback && subRecord.readyCallback();
                      subRecord.readyDeps.changed();
                    });
                  });
                } // Ensures that "f" will be called after all documents currently in
                // _serverDocuments have been written to the local cache. f will not be called
                // if the connection is lost before then!


                _runWhenAllServerDocsAreFlushed(f) {
                  var self = this;

                  var runFAfterUpdates = () => {
                    self._afterUpdateCallbacks.push(f);
                  };

                  var unflushedServerDocCount = 0;

                  var onServerDocFlush = () => {
                    --unflushedServerDocCount;

                    if (unflushedServerDocCount === 0) {
                      // This was the last doc to flush! Arrange to run f after the updates
                      // have been applied.
                      runFAfterUpdates();
                    }
                  };

                  keys(self._serverDocuments).forEach(collection => {
                    self._serverDocuments[collection].forEach(serverDoc => {
                      const writtenByStubForAMethodWithSentMessage = keys(serverDoc.writtenByStubs).some(methodId => {
                        var invoker = self._methodInvokers[methodId];
                        return invoker && invoker.sentMessage;
                      });

                      if (writtenByStubForAMethodWithSentMessage) {
                        ++unflushedServerDocCount;
                        serverDoc.flushCallbacks.push(onServerDocFlush);
                      }
                    });
                  });

                  if (unflushedServerDocCount === 0) {
                    // There aren't any buffered docs --- we can call f as soon as the current
                    // round of updates is applied!
                    runFAfterUpdates();
                  }
                }

                _livedata_nosub(msg) {
                  var self = this; // First pass it through _livedata_data, which only uses it to help get
                  // towards quiescence.

                  self._livedata_data(msg); // Do the rest of our processing immediately, with no
                  // buffering-until-quiescence.
                  // we weren't subbed anyway, or we initiated the unsub.


                  if (!hasOwn.call(self._subscriptions, msg.id)) {
                    return;
                  } // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  var errorCallback = self._subscriptions[msg.id].errorCallback;
                  var stopCallback = self._subscriptions[msg.id].stopCallback;

                  self._subscriptions[msg.id].remove();

                  var meteorErrorFromMsg = msgArg => {
                    return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);
                  }; // XXX COMPAT WITH 1.0.3.1 #errorCallback


                  if (errorCallback && msg.error) {
                    errorCallback(meteorErrorFromMsg(msg));
                  }

                  if (stopCallback) {
                    stopCallback(meteorErrorFromMsg(msg));
                  }
                }

                _livedata_result(msg) {
                  // id, result or error. error has error (code), reason, details
                  var self = this; // Lets make sure there are no buffered writes before returning result.

                  if (!isEmpty(self._bufferedWrites)) {
                    self._flushBufferedWrites();
                  } // find the outstanding request
                  // should be O(1) in nearly all realistic use cases


                  if (isEmpty(self._outstandingMethodBlocks)) {
                    Meteor._debug('Received method result but no methods outstanding');

                    return;
                  }

                  var currentMethodBlock = self._outstandingMethodBlocks[0].methods;
                  var m;

                  for (var i = 0; i < currentMethodBlock.length; i++) {
                    m = currentMethodBlock[i];
                    if (m.methodId === msg.id) break;
                  }

                  if (!m) {
                    Meteor._debug("Can't match method response to original method call", msg);

                    return;
                  } // Remove from current method block. This may leave the block empty, but we
                  // don't move on to the next block until the callback has been delivered, in
                  // _outstandingMethodFinished.


                  currentMethodBlock.splice(i, 1);

                  if (hasOwn.call(msg, 'error')) {
                    m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));
                  } else {
                    // msg.result may be undefined if the method didn't return a
                    // value
                    m.receiveResult(undefined, msg.result);
                  }
                } // Called by MethodInvoker after a method's callback is invoked.  If this was
                // the last outstanding method in the current block, runs the next block. If
                // there are no more methods, consider accepting a hot code push.


                _outstandingMethodFinished() {
                  var self = this;
                  if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of
                  // methods is empty. (Or it might not exist, if this was a method that
                  // half-finished before disconnect/reconnect.)

                  if (!isEmpty(self._outstandingMethodBlocks)) {
                    var firstBlock = self._outstandingMethodBlocks.shift();

                    if (!isEmpty(firstBlock.methods)) throw new Error('No methods outstanding but nonempty block: ' + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.

                    if (!isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods();
                  } // Maybe accept a hot code push.


                  self._maybeMigrate();
                } // Sends messages for all the methods in the first block in
                // _outstandingMethodBlocks.


                _sendOutstandingMethods() {
                  var self = this;

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    return;
                  }

                  self._outstandingMethodBlocks[0].methods.forEach(m => {
                    m.sendMessage();
                  });
                }

                _livedata_error(msg) {
                  Meteor._debug('Received error from server: ', msg.reason);

                  if (msg.offendingMessage) Meteor._debug('For: ', msg.offendingMessage);
                }

                _callOnReconnectAndSendAppropriateOutstandingMethods() {
                  var self = this;
                  var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;
                  self._outstandingMethodBlocks = [];
                  self.onReconnect && self.onReconnect();

                  DDP._reconnectHook.each(callback => {
                    callback(self);
                    return true;
                  });

                  if (isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try
                  // again. First: did onReconnect actually send anything? If not, we just
                  // restore all outstanding methods and run the first block.

                  if (isEmpty(self._outstandingMethodBlocks)) {
                    self._outstandingMethodBlocks = oldOutstandingMethodBlocks;

                    self._sendOutstandingMethods();

                    return;
                  } // OK, there are blocks on both sides. Special case: merge the last block of
                  // the reconnect methods with the first block of the original methods, if
                  // neither of them are "wait" blocks.


                  if (!last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {
                    oldOutstandingMethodBlocks[0].methods.forEach(m => {
                      last(self._outstandingMethodBlocks).methods.push(m); // If this "last block" is also the first block, send the message.

                      if (self._outstandingMethodBlocks.length === 1) {
                        m.sendMessage();
                      }
                    });
                    oldOutstandingMethodBlocks.shift();
                  } // Now add the rest of the original blocks on.


                  oldOutstandingMethodBlocks.forEach(block => {
                    self._outstandingMethodBlocks.push(block);
                  });
                } // We can accept a hot code push if there are no methods in flight.


                _readyToMigrate() {
                  return isEmpty(this._methodInvokers);
                } // If we were blocking a migration, see if it's now possible to continue.
                // Call whenever the set of outstanding/blocked methods shrinks.


                _maybeMigrate() {
                  var self = this;

                  if (self._retryMigrate && self._readyToMigrate()) {
                    self._retryMigrate();

                    self._retryMigrate = null;
                  }
                }

                onMessage(raw_msg) {
                  try {
                    var msg = DDPCommon.parseDDP(raw_msg);
                  } catch (e) {
                    Meteor._debug('Exception while parsing DDP', e);

                    return;
                  } // Any message counts as receiving a pong, as it demonstrates that
                  // the server is still alive.


                  if (this._heartbeat) {
                    this._heartbeat.messageReceived();
                  }

                  if (msg === null || !msg.msg) {
                    // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back
                    // compat.  Remove this 'if' once the server stops sending welcome
                    // messages (stream_server.js).
                    if (!(msg && msg.server_id)) Meteor._debug('discarding invalid livedata message', msg);
                    return;
                  }

                  if (msg.msg === 'connected') {
                    this._version = this._versionSuggestion;

                    this._livedata_connected(msg);

                    this.options.onConnected();
                  } else if (msg.msg === 'failed') {
                    if (this._supportedDDPVersions.indexOf(msg.version) >= 0) {
                      this._versionSuggestion = msg.version;

                      this._stream.reconnect({
                        _force: true
                      });
                    } else {
                      var description = 'DDP version negotiation failed; server requested version ' + msg.version;

                      this._stream.disconnect({
                        _permanent: true,
                        _error: description
                      });

                      this.options.onDDPVersionNegotiationFailure(description);
                    }
                  } else if (msg.msg === 'ping' && this.options.respondToPings) {
                    this._send({
                      msg: 'pong',
                      id: msg.id
                    });
                  } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong
                  } else if (['added', 'changed', 'removed', 'ready', 'updated'].includes(msg.msg)) {
                    this._livedata_data(msg);
                  } else if (msg.msg === 'nosub') {
                    this._livedata_nosub(msg);
                  } else if (msg.msg === 'result') {
                    this._livedata_result(msg);
                  } else if (msg.msg === 'error') {
                    this._livedata_error(msg);
                  } else {
                    Meteor._debug('discarding unknown livedata message type', msg);
                  }
                }

                onReset() {
                  // Send a connect message at the beginning of the stream.
                  // NOTE: reset is called even on the first connection, so this is
                  // the only place we send this message.
                  var msg = {
                    msg: 'connect'
                  };
                  if (this._lastSessionId) msg.session = this._lastSessionId;
                  msg.version = this._versionSuggestion || this._supportedDDPVersions[0];
                  this._versionSuggestion = msg.version;
                  msg.support = this._supportedDDPVersions;

                  this._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the
                  // current block is pretty important to making sure that quiescence is properly calculated, as
                  // well as possibly moving on to another useful block.
                  // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if
                  // we are connecting for the first time.


                  if (this._outstandingMethodBlocks.length > 0) {
                    // If there is an outstanding method block, we only care about the first one as that is the
                    // one that could have already sent messages with no response, that are not allowed to retry.
                    const currentMethodBlock = this._outstandingMethodBlocks[0].methods;
                    this._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(methodInvoker => {
                      // Methods with 'noRetry' option set are not allowed to re-send after
                      // recovering dropped connection.
                      if (methodInvoker.sentMessage && methodInvoker.noRetry) {
                        // Make sure that the method is told that it failed.
                        methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));
                      } // Only keep a method if it wasn't sent or it's allowed to retry.
                      // This may leave the block empty, but we don't move on to the next
                      // block until the callback has been delivered, in _outstandingMethodFinished.


                      return !(methodInvoker.sentMessage && methodInvoker.noRetry);
                    });
                  } // Now, to minimize setup latency, go ahead and blast out all of
                  // our pending methods ands subscriptions before we've even taken
                  // the necessary RTT to know if we successfully reconnected. (1)
                  // They're supposed to be idempotent, and where they are not,
                  // they can block retry in apply; (2) even if we did reconnect,
                  // we're not sure what messages might have gotten lost
                  // (in either direction) since we were disconnected (TCP being
                  // sloppy about that.)
                  // If the current block of methods all got their results (but didn't all get
                  // their data visible), discard the empty block now.


                  if (this._outstandingMethodBlocks.length > 0 && this._outstandingMethodBlocks[0].methods.length === 0) {
                    this._outstandingMethodBlocks.shift();
                  } // Mark all messages as unsent, they have not yet been sent on this
                  // connection.


                  keys(this._methodInvokers).forEach(id => {
                    this._methodInvokers[id].sentMessage = false;
                  }); // If an `onReconnect` handler is set, call it first. Go through
                  // some hoops to ensure that methods that are called from within
                  // `onReconnect` get executed _before_ ones that were originally
                  // outstanding (since `onReconnect` is used to re-establish auth
                  // certificates)

                  this._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after
                  // the handlers and we don't see flicker.


                  keys(this._subscriptions).forEach(id => {
                    const sub = this._subscriptions[id];

                    this._send({
                      msg: 'sub',
                      id: id,
                      name: sub.name,
                      params: sub.params
                    });
                  });
                }

              }
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }, "namespace.js": function (_require6, _exports6, _module5) {

              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //                                                                                                                     //
              // packages/ddp-client/common/namespace.js                                                                             //
              //                                                                                                                     //
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
              //
              _module5.export({
                DDP: () => DDP
              });
              let DDPCommon;
              _module5.link("meteor/ddp-common", {
                DDPCommon(v) {
                  DDPCommon = v;
                }

              }, 0);
              let Meteor;
              _module5.link("meteor/meteor", {
                Meteor(v) {
                  Meteor = v;
                }

              }, 1);
              let keys;
              _module5.link("meteor/ddp-common/utils.js", {
                keys(v) {
                  keys = v;
                }

              }, 2);
              let Connection;
              _module5.link("./livedata_connection.js", {
                Connection(v) {
                  Connection = v;
                }

              }, 3);
              // This array allows the `_allSubscriptionsReady` method below, which
              // is used by the `spiderable` package, to keep track of whether all
              // data is ready.
              const allConnections = [];
              /**
               * @namespace DDP
               * @summary Namespace for DDP-related methods/classes.
               */

              const DDP = {};
              // This is private but it's used in a few places. accounts-base uses
              // it to get the current user. Meteor.setTimeout and friends clear
              // it. We can probably find a better way to factor this.
              DDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();
              DDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.

              DDP._CurrentInvocation = DDP._CurrentMethodInvocation; // This is passed into a weird `makeErrorType` function that expects its thing
              // to be a constructor

              function connectionErrorConstructor(message) {
                this.message = message;
              }

              DDP.ConnectionError = Meteor.makeErrorType('DDP.ConnectionError', connectionErrorConstructor);
              DDP.ForcedReconnectError = Meteor.makeErrorType('DDP.ForcedReconnectError', () => {}); // Returns the named sequence of pseudo-random values.
              // The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce
              // consistent values for method calls on the client and server.

              DDP.randomStream = name => {
                var scope = DDP._CurrentMethodInvocation.get();

                return DDPCommon.RandomStream.get(scope, name);
              }; // @param url {String} URL to Meteor app,
              //     e.g.:
              //     "subdomain.meteor.com",
              //     "http://subdomain.meteor.com",
              //     "/",
              //     "ddp+sockjs://ddp--****-foo.meteor.com/sockjs"

              /**
               * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.
               * @locus Anywhere
               * @param {String} url The URL of another Meteor application.
               */

              DDP.connect = (url, options) => {
                var ret = new Connection(url, options);
                allConnections.push(ret); // hack. see below.

                return ret;
              };

              DDP._reconnectHook = new Hook({
                bindEnvironment: false
              });
              /**
               * @summary Register a function to call as the first step of
               * reconnecting. This function can call methods which will be executed before
               * any other outstanding methods. For example, this can be used to re-establish
               * the appropriate authentication context on the connection.
               * @locus Anywhere
               * @param {Function} callback The function to call. It will be called with a
               * single argument, the [connection object](#ddp_connect) that is reconnecting.
               */

              DDP.onReconnect = callback => {
                return DDP._reconnectHook.register(callback);
              }; // Hack for `spiderable` package: a way to see if the page is done
              // loading all the data it needs.
              //


              DDP._allSubscriptionsReady = () => {
                return allConnections.every(conn => {
                  return keys(conn._subscriptions).every(id => {
                    return conn._subscriptions[id].ready;
                  });
                });
              };
              /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            } } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/ddp-client/client/client.js");

  /* Exports */
  Package._define("ddp-client", _exports2, {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Exports */
  Package._define("ddp", {
    DDP: DDP
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var EJSON = Package.ejson.EJSON;
  var DDP = Package['ddp-client'].DDP;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var AllowDeny;

  var _require = meteorInstall({ "node_modules": { "meteor": { "allow-deny": { "allow-deny.js": function () {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/allow-deny/allow-deny.js                                                                                  //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            ///
            /// Remote methods and access control.
            ///
            const hasOwn = Object.prototype.hasOwnProperty; // Restrict default mutators on collection. allow() and deny() take the
            // same options:
            //
            // options.insert {Function(userId, doc)}
            //   return true to allow/deny adding this document
            //
            // options.update {Function(userId, docs, fields, modifier)}
            //   return true to allow/deny updating these documents.
            //   `fields` is passed as an array of fields that are to be modified
            //
            // options.remove {Function(userId, docs)}
            //   return true to allow/deny removing these documents
            //
            // options.fetch {Array}
            //   Fields to fetch for these validators. If any call to allow or deny
            //   does not have this option then all fields are loaded.
            //
            // allow and deny can be called multiple times. The validators are
            // evaluated as follows:
            // - If neither deny() nor allow() has been called on the collection,
            //   then the request is allowed if and only if the "insecure" smart
            //   package is in use.
            // - Otherwise, if any deny() function returns true, the request is denied.
            // - Otherwise, if any allow() function returns true, the request is allowed.
            // - Otherwise, the request is denied.
            //
            // Meteor may call your deny() and allow() functions in any order, and may not
            // call all of them if it is able to make a decision without calling them all
            // (so don't include side effects).

            AllowDeny = {
              CollectionPrototype: {}
            }; // In the `mongo` package, we will extend Mongo.Collection.prototype with these
            // methods

            const CollectionPrototype = AllowDeny.CollectionPrototype;
            /**
             * @summary Allow users to write directly to this collection from client code, subject to limitations you define.
             * @locus Server
             * @method allow
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be allowed.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.allow = function (options) {
              addValidator(this, 'allow', options);
            };
            /**
             * @summary Override `allow` rules.
             * @locus Server
             * @method deny
             * @memberOf Mongo.Collection
             * @instance
             * @param {Object} options
             * @param {Function} options.insert,update,remove Functions that look at a proposed modification to the database and return true if it should be denied, even if an [allow](#allow) rule says otherwise.
             * @param {String[]} options.fetch Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your `update` and `remove` functions.
             * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections).  Pass `null` to disable transformation.
             */

            CollectionPrototype.deny = function (options) {
              addValidator(this, 'deny', options);
            };

            CollectionPrototype._defineMutationMethods = function (options) {
              const self = this;
              options = options || {}; // set to true once we call any allow or deny methods. If true, use
              // allow/deny semantics. If false, use insecure mode semantics.

              self._restricted = false; // Insecure mode (default to allowing writes). Defaults to 'undefined' which
              // means insecure iff the insecure package is loaded. This property can be
              // overriden by tests or packages wishing to change insecure mode behavior of
              // their collections.

              self._insecure = undefined;
              self._validators = {
                insert: {
                  allow: [],
                  deny: []
                },
                update: {
                  allow: [],
                  deny: []
                },
                remove: {
                  allow: [],
                  deny: []
                },
                upsert: {
                  allow: [],
                  deny: []
                },
                // dummy arrays; can't set these!
                fetch: [],
                fetchAllFields: false
              };
              if (!self._name) return; // anonymous collection
              // XXX Think about method namespacing. Maybe methods should be
              // "Meteor:Mongo:insert/NAME"?

              self._prefix = '/' + self._name + '/'; // Mutation Methods
              // Minimongo on the server gets no stubs; instead, by default
              // it wait()s until its result is ready, yielding.
              // This matches the behavior of macromongo on the server better.
              // XXX see #MeteorServerNull

              if (self._connection && (self._connection === Meteor.server || Meteor.isClient)) {
                const m = {};
                ['insert', 'update', 'remove'].forEach(method => {
                  const methodName = self._prefix + method;

                  if (options.useExisting) {
                    const handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers'; // Do not try to create additional methods if this has already been called.
                    // (Otherwise the .methods() call below will throw an error.)

                    if (self._connection[handlerPropName] && typeof self._connection[handlerPropName][methodName] === 'function') return;
                  }

                  m[methodName] = function ()
                  /* ... */
                  {
                    // All the methods do their own validation, instead of using check().
                    check(arguments, [Match.Any]);
                    const args = Array.from(arguments);

                    try {
                      // For an insert, if the client didn't specify an _id, generate one
                      // now; because this uses DDP.randomStream, it will be consistent with
                      // what the client generated. We generate it now rather than later so
                      // that if (eg) an allow/deny rule does an insert to the same
                      // collection (not that it really should), the generated _id will
                      // still be the first use of the stream and will be consistent.
                      //
                      // However, we don't actually stick the _id onto the document yet,
                      // because we want allow/deny rules to be able to differentiate
                      // between arbitrary client-specified _id fields and merely
                      // client-controlled-via-randomSeed fields.
                      let generatedId = null;

                      if (method === "insert" && !hasOwn.call(args[0], '_id')) {
                        generatedId = self._makeNewID();
                      }

                      if (this.isSimulation) {
                        // In a client simulation, you can do any mutation (even with a
                        // complex selector).
                        if (generatedId !== null) args[0]._id = generatedId;
                        return self._collection[method].apply(self._collection, args);
                      } // This is the server receiving a method call from the client.
                      // We don't allow arbitrary selectors in mutations from the client: only
                      // single-ID selectors.


                      if (method !== 'insert') throwIfSelectorIsNotId(args[0], method);

                      if (self._restricted) {
                        // short circuit if there is no way it will pass.
                        if (self._validators[method].allow.length === 0) {
                          throw new Meteor.Error(403, "Access denied. No allow validators set on restricted " + "collection for method '" + method + "'.");
                        }

                        const validatedMethodName = '_validated' + method.charAt(0).toUpperCase() + method.slice(1);
                        args.unshift(this.userId);
                        method === 'insert' && args.push(generatedId);
                        return self[validatedMethodName].apply(self, args);
                      } else if (self._isInsecure()) {
                        if (generatedId !== null) args[0]._id = generatedId; // In insecure mode, allow any mutation (with a simple selector).
                        // XXX This is kind of bogus.  Instead of blindly passing whatever
                        //     we get from the network to this function, we should actually
                        //     know the correct arguments for the function and pass just
                        //     them.  For example, if you have an extraneous extra null
                        //     argument and this is Mongo on the server, the .wrapAsync'd
                        //     functions like update will get confused and pass the
                        //     "fut.resolver()" in the wrong slot, where _update will never
                        //     invoke it. Bam, broken DDP connection.  Probably should just
                        //     take this whole method and write it three times, invoking
                        //     helpers for the common code.

                        return self._collection[method].apply(self._collection, args);
                      } else {
                        // In secure mode, if we haven't called allow or deny, then nothing
                        // is permitted.
                        throw new Meteor.Error(403, "Access denied");
                      }
                    } catch (e) {
                      if (e.name === 'MongoError' || e.name === 'MinimongoError') {
                        throw new Meteor.Error(409, e.toString());
                      } else {
                        throw e;
                      }
                    }
                  };
                });

                self._connection.methods(m);
              }
            };

            CollectionPrototype._updateFetch = function (fields) {
              const self = this;

              if (!self._validators.fetchAllFields) {
                if (fields) {
                  const union = Object.create(null);

                  const add = names => names && names.forEach(name => union[name] = 1);

                  add(self._validators.fetch);
                  add(fields);
                  self._validators.fetch = Object.keys(union);
                } else {
                  self._validators.fetchAllFields = true; // clear fetch just to make sure we don't accidentally read it

                  self._validators.fetch = null;
                }
              }
            };

            CollectionPrototype._isInsecure = function () {
              const self = this;
              if (self._insecure === undefined) return !!Package.insecure;
              return self._insecure;
            };

            CollectionPrototype._validatedInsert = function (userId, doc, generatedId) {
              const self = this; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.insert.deny.some(validator => {
                return validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.insert.allow.every(validator => {
                return !validator(userId, docToValidate(validator, doc, generatedId));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // If we generated an ID above, insert it now: after the validation, but
              // before actually inserting.


              if (generatedId !== null) doc._id = generatedId;

              self._collection.insert.call(self._collection, doc);
            }; // Simulate a mongo `update` operation while validating that the access
            // control rules set by calls to `allow/deny` are satisfied. If all
            // pass, rewrite the mongo operation to use $in to set the list of
            // document ids to change ##ValidatedChange


            CollectionPrototype._validatedUpdate = function (userId, selector, mutator, options) {
              const self = this;
              check(mutator, Object);
              options = Object.assign(Object.create(null), options);
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) throw new Error("validated update should be of a single ID"); // We don't support upserts because they don't fit nicely into allow/deny
              // rules.

              if (options.upsert) throw new Meteor.Error(403, "Access denied. Upserts not " + "allowed in a restricted collection.");
              const noReplaceError = "Access denied. In a restricted collection you can only" + " update documents, not replace them. Use a Mongo update operator, such " + "as '$set'.";
              const mutatorKeys = Object.keys(mutator); // compute modified fields

              const modifiedFields = {};

              if (mutatorKeys.length === 0) {
                throw new Meteor.Error(403, noReplaceError);
              }

              mutatorKeys.forEach(op => {
                const params = mutator[op];

                if (op.charAt(0) !== '$') {
                  throw new Meteor.Error(403, noReplaceError);
                } else if (!hasOwn.call(ALLOWED_UPDATE_OPERATIONS, op)) {
                  throw new Meteor.Error(403, "Access denied. Operator " + op + " not allowed in a restricted collection.");
                } else {
                  Object.keys(params).forEach(field => {
                    // treat dotted fields as if they are replacing their
                    // top-level part
                    if (field.indexOf('.') !== -1) field = field.substring(0, field.indexOf('.')); // record the field we are trying to change

                    modifiedFields[field] = true;
                  });
                }
              });
              const fields = Object.keys(modifiedFields);
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) // none satisfied!
                return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.update.deny.some(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.update.allow.every(validator => {
                const factoriedDoc = transformDoc(validator, doc);
                return !validator(userId, factoriedDoc, fields, mutator);
              })) {
                throw new Meteor.Error(403, "Access denied");
              }

              options._forbidReplace = true; // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to include an _id clause before passing to Mongo to
              // avoid races, but since selector is guaranteed to already just be an ID, we
              // don't have to any more.

              return self._collection.update.call(self._collection, selector, mutator, options);
            }; // Only allow these operations in validated updates. Specifically
            // whitelist operations, rather than blacklist, so new complex
            // operations that are added aren't automatically allowed. A complex
            // operation is one that does more than just modify its target
            // field. For now this contains all update operations except '$rename'.
            // http://docs.mongodb.org/manual/reference/operators/#update


            const ALLOWED_UPDATE_OPERATIONS = {
              $inc: 1,
              $set: 1,
              $unset: 1,
              $addToSet: 1,
              $pop: 1,
              $pullAll: 1,
              $pull: 1,
              $pushAll: 1,
              $push: 1,
              $bit: 1
            }; // Simulate a mongo `remove` operation while validating access control
            // rules. See #ValidatedChange

            CollectionPrototype._validatedRemove = function (userId, selector) {
              const self = this;
              const findOptions = {
                transform: null
              };

              if (!self._validators.fetchAllFields) {
                findOptions.fields = {};

                self._validators.fetch.forEach(fieldName => {
                  findOptions.fields[fieldName] = 1;
                });
              }

              const doc = self._collection.findOne(selector, findOptions);

              if (!doc) return 0; // call user validators.
              // Any deny returns true means denied.

              if (self._validators.remove.deny.some(validator => {
                return validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Any allow returns true means proceed. Throw error if they all fail.


              if (self._validators.remove.allow.every(validator => {
                return !validator(userId, transformDoc(validator, doc));
              })) {
                throw new Meteor.Error(403, "Access denied");
              } // Back when we supported arbitrary client-provided selectors, we actually
              // rewrote the selector to {_id: {$in: [ids that we found]}} before passing to
              // Mongo to avoid races, but since selector is guaranteed to already just be
              // an ID, we don't have to any more.


              return self._collection.remove.call(self._collection, selector);
            };

            CollectionPrototype._callMutatorMethod = function _callMutatorMethod(name, args, callback) {
              if (Meteor.isClient && !callback && !alreadyInSimulation()) {
                // Client can't block, so it can't report errors by exception,
                // only by callback. If they forget the callback, give them a
                // default one that logs the error, so they aren't totally
                // baffled if their writes don't work because their database is
                // down.
                // Don't give a default callback in simulation, because inside stubs we
                // want to return the results from the local collection immediately and
                // not force a callback.
                callback = function (err) {
                  if (err) Meteor._debug(name + " failed: " + (err.reason || err.stack));
                };
              } // For two out of three mutator methods, the first argument is a selector


              const firstArgIsSelector = name === "update" || name === "remove";

              if (firstArgIsSelector && !alreadyInSimulation()) {
                // If we're about to actually send an RPC, we should throw an error if
                // this is a non-ID selector, because the mutation methods only allow
                // single-ID selectors. (If we don't throw here, we'll see flicker.)
                throwIfSelectorIsNotId(args[0], name);
              }

              const mutatorMethodName = this._prefix + name;
              return this._connection.apply(mutatorMethodName, args, {
                returnStubValue: true
              }, callback);
            };

            function transformDoc(validator, doc) {
              if (validator.transform) return validator.transform(doc);
              return doc;
            }

            function docToValidate(validator, doc, generatedId) {
              let ret = doc;

              if (validator.transform) {
                ret = EJSON.clone(doc); // If you set a server-side transform on your collection, then you don't get
                // to tell the difference between "client specified the ID" and "server
                // generated the ID", because transforms expect to get _id.  If you want to
                // do that check, you can do it with a specific
                // `C.allow({insert: f, transform: null})` validator.

                if (generatedId !== null) {
                  ret._id = generatedId;
                }

                ret = validator.transform(ret);
              }

              return ret;
            }

            function addValidator(collection, allowOrDeny, options) {
              // validate keys
              const validKeysRegEx = /^(?:insert|update|remove|fetch|transform)$/;
              Object.keys(options).forEach(key => {
                if (!validKeysRegEx.test(key)) throw new Error(allowOrDeny + ": Invalid key: " + key);
              });
              collection._restricted = true;
              ['insert', 'update', 'remove'].forEach(name => {
                if (hasOwn.call(options, name)) {
                  if (!(options[name] instanceof Function)) {
                    throw new Error(allowOrDeny + ": Value for `" + name + "` must be a function");
                  } // If the transform is specified at all (including as 'null') in this
                  // call, then take that; otherwise, take the transform from the
                  // collection.


                  if (options.transform === undefined) {
                    options[name].transform = collection._transform; // already wrapped
                  } else {
                    options[name].transform = LocalCollection.wrapTransform(options.transform);
                  }

                  collection._validators[name][allowOrDeny].push(options[name]);
                }
              }); // Only update the fetch fields if we're passed things that affect
              // fetching. This way allow({}) and allow({insert: f}) don't result in
              // setting fetchAllFields

              if (options.update || options.remove || options.fetch) {
                if (options.fetch && !(options.fetch instanceof Array)) {
                  throw new Error(allowOrDeny + ": Value for `fetch` must be an array");
                }

                collection._updateFetch(options.fetch);
              }
            }

            function throwIfSelectorIsNotId(selector, methodName) {
              if (!LocalCollection._selectorIsIdPerhapsAsObject(selector)) {
                throw new Meteor.Error(403, "Not permitted. Untrusted code may only " + methodName + " documents by ID.");
              }
            }

            ; // Determine if we are in a DDP method simulation

            function alreadyInSimulation() {
              var CurrentInvocation = DDP._CurrentMethodInvocation || // For backwards compatibility, as explained in this issue:
              // https://github.com/meteor/meteor/issues/8947
              DDP._CurrentInvocation;
              const enclosing = CurrentInvocation.get();
              return enclosing && enclosing.isSimulation;
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require("/node_modules/meteor/allow-deny/allow-deny.js");

  /* Exports */
  Package._define("allow-deny", {
    AllowDeny: AllowDeny
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("mongo-dev-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("insecure");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var AllowDeny = Package['allow-deny'].AllowDeny;
  var Random = Package.random.Random;
  var EJSON = Package.ejson.EJSON;
  var LocalCollection = Package.minimongo.LocalCollection;
  var Minimongo = Package.minimongo.Minimongo;
  var DDP = Package['ddp-client'].DDP;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var MongoID = Package['mongo-id'].MongoID;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Mongo, selector, callback, options;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "mongo": { "local_collection_driver.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/local_collection_driver.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              LocalCollectionDriver: () => LocalCollectionDriver
            });
            const LocalCollectionDriver = new class LocalCollectionDriver {
              constructor() {
                this.noConnCollections = Object.create(null);
              }

              open(name, conn) {
                if (!name) {
                  return new LocalCollection();
                }

                if (!conn) {
                  return ensureCollection(name, this.noConnCollections);
                }

                if (!conn._mongo_livedata_collections) {
                  conn._mongo_livedata_collections = Object.create(null);
                } // XXX is there a way to keep track of a connection's collections without
                // dangling it off the connection object?


                return ensureCollection(name, conn._mongo_livedata_collections);
              }

            }();

            function ensureCollection(name, collections) {
              return name in collections ? collections[name] : collections[name] = new LocalCollection(name);
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "collection.js": function (_require3, _exports2, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/mongo/collection.js                                                                                       //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = _require3("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(_require3("@babel/runtime/helpers/objectSpread"));

            // options.connection, if given, is a LivedataClient or LivedataServer
            // XXX presently there is no way to destroy/clean up a Collection

            /**
             * @summary Namespace for MongoDB-related items
             * @namespace
             */
            Mongo = {};
            /**
             * @summary Constructor for a Collection
             * @locus Anywhere
             * @instancename collection
             * @class
             * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.
             * @param {Object} [options]
             * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.
             * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:
            
             - **`'STRING'`**: random strings
             - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values
            
            The default id generation technique is `'STRING'`.
             * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.
             * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.
             */

            Mongo.Collection = function Collection(name, options) {
              if (!name && name !== null) {
                Meteor._debug("Warning: creating anonymous collection. It will not be " + "saved or synchronized over the network. (Pass null for " + "the collection name to turn off this warning.)");

                name = null;
              }

              if (name !== null && typeof name !== "string") {
                throw new Error("First argument to new Mongo.Collection must be a string or null");
              }

              if (options && options.methods) {
                // Backwards compatibility hack with original signature (which passed
                // "connection" directly instead of in options. (Connections must have a "methods"
                // method.)
                // XXX remove before 1.0
                options = {
                  connection: options
                };
              } // Backwards compatibility: "connection" used to be called "manager".


              if (options && options.manager && !options.connection) {
                options.connection = options.manager;
              }

              options = (0, _objectSpread2.default)({
                connection: undefined,
                idGeneration: 'STRING',
                transform: null,
                _driver: undefined,
                _preventAutopublish: false
              }, options);

              switch (options.idGeneration) {
                case 'MONGO':
                  this._makeNewID = function () {
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                    return new Mongo.ObjectID(src.hexString(24));
                  };

                  break;

                case 'STRING':
                default:
                  this._makeNewID = function () {
                    var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;
                    return src.id();
                  };

                  break;
              }

              this._transform = LocalCollection.wrapTransform(options.transform);
              if (!name || options.connection === null) // note: nameless collections never have a connection
                this._connection = null;else if (options.connection) this._connection = options.connection;else if (Meteor.isClient) this._connection = Meteor.connection;else this._connection = Meteor.server;

              if (!options._driver) {
                // XXX This check assumes that webapp is loaded so that Meteor.server !==
                // null. We should fully support the case of "want to use a Mongo-backed
                // collection from Node code without webapp", but we don't yet.
                // #MeteorServerNull
                if (name && this._connection === Meteor.server && typeof MongoInternals !== "undefined" && MongoInternals.defaultRemoteCollectionDriver) {
                  options._driver = MongoInternals.defaultRemoteCollectionDriver();
                } else {
                  const {
                    LocalCollectionDriver
                  } = _require3("./local_collection_driver.js");

                  options._driver = LocalCollectionDriver;
                }
              }

              this._collection = options._driver.open(name, this._connection);
              this._name = name;
              this._driver = options._driver;

              this._maybeSetUpReplication(name, options); // XXX don't define these until allow or deny is actually used for this
              // collection. Could be hard if the security rules are only defined on the
              // server.


              if (options.defineMutationMethods !== false) {
                try {
                  this._defineMutationMethods({
                    useExisting: options._suppressSameNameError === true
                  });
                } catch (error) {
                  // Throw a more understandable error on the server for same collection name
                  if (error.message === "A method named '/".concat(name, "/insert' is already defined")) throw new Error("There is already a collection named \"".concat(name, "\""));
                  throw error;
                }
              } // autopublish


              if (Package.autopublish && !options._preventAutopublish && this._connection && this._connection.publish) {
                this._connection.publish(null, () => this.find(), {
                  is_auto: true
                });
              }
            };

            Object.assign(Mongo.Collection.prototype, {
              _maybeSetUpReplication(name, _ref) {
                let {
                  _suppressSameNameError = false
                } = _ref;
                const self = this;

                if (!(self._connection && self._connection.registerStore)) {
                  return;
                } // OK, we're going to be a slave, replicating some remote
                // database, except possibly with some temporary divergence while
                // we have unacknowledged RPC's.


                const ok = self._connection.registerStore(name, {
                  // Called at the beginning of a batch of updates. batchSize is the number
                  // of update calls to expect.
                  //
                  // XXX This interface is pretty janky. reset probably ought to go back to
                  // being its own function, and callers shouldn't have to calculate
                  // batchSize. The optimization of not calling pause/remove should be
                  // delayed until later: the first call to update() should buffer its
                  // message, and then we can either directly apply it at endUpdate time if
                  // it was the only update, or do pauseObservers/apply/apply at the next
                  // update() if there's another one.
                  beginUpdate(batchSize, reset) {
                    // pause observers so users don't see flicker when updating several
                    // objects at once (including the post-reconnect reset-and-reapply
                    // stage), and so that a re-sorting of a query can take advantage of the
                    // full _diffQuery moved calculation instead of applying change one at a
                    // time.
                    if (batchSize > 1 || reset) self._collection.pauseObservers();
                    if (reset) self._collection.remove({});
                  },

                  // Apply an update.
                  // XXX better specify this interface (not in terms of a wire message)?
                  update(msg) {
                    var mongoId = MongoID.idParse(msg.id);

                    var doc = self._collection.findOne(mongoId); // Is this a "replace the whole doc" message coming from the quiescence
                    // of method writes to an object? (Note that 'undefined' is a valid
                    // value meaning "remove it".)


                    if (msg.msg === 'replace') {
                      var replace = msg.replace;

                      if (!replace) {
                        if (doc) self._collection.remove(mongoId);
                      } else if (!doc) {
                        self._collection.insert(replace);
                      } else {
                        // XXX check that replace has no $ ops
                        self._collection.update(mongoId, replace);
                      }

                      return;
                    } else if (msg.msg === 'added') {
                      if (doc) {
                        throw new Error("Expected not to find a document already present for an add");
                      }

                      self._collection.insert((0, _objectSpread2.default)({
                        _id: mongoId
                      }, msg.fields));
                    } else if (msg.msg === 'removed') {
                      if (!doc) throw new Error("Expected to find a document already present for removed");

                      self._collection.remove(mongoId);
                    } else if (msg.msg === 'changed') {
                      if (!doc) throw new Error("Expected to find a document to change");
                      const keys = Object.keys(msg.fields);

                      if (keys.length > 0) {
                        var modifier = {};
                        keys.forEach(key => {
                          const value = msg.fields[key];

                          if (EJSON.equals(doc[key], value)) {
                            return;
                          }

                          if (typeof value === "undefined") {
                            if (!modifier.$unset) {
                              modifier.$unset = {};
                            }

                            modifier.$unset[key] = 1;
                          } else {
                            if (!modifier.$set) {
                              modifier.$set = {};
                            }

                            modifier.$set[key] = value;
                          }
                        });

                        if (Object.keys(modifier).length > 0) {
                          self._collection.update(mongoId, modifier);
                        }
                      }
                    } else {
                      throw new Error("I don't know how to deal with this message");
                    }
                  },

                  // Called at the end of a batch of updates.
                  endUpdate() {
                    self._collection.resumeObservers();
                  },

                  // Called around method stub invocations to capture the original versions
                  // of modified documents.
                  saveOriginals() {
                    self._collection.saveOriginals();
                  },

                  retrieveOriginals() {
                    return self._collection.retrieveOriginals();
                  },

                  // Used to preserve current versions of documents across a store reset.
                  getDoc(id) {
                    return self.findOne(id);
                  },

                  // To be able to get back to the collection from the store.
                  _getCollection() {
                    return self;
                  }

                });

                if (!ok) {
                  const message = "There is already a collection named \"".concat(name, "\"");

                  if (_suppressSameNameError === true) {
                    // XXX In theory we do not have to throw when `ok` is falsy. The
                    // store is already defined for this collection name, but this
                    // will simply be another reference to it and everything should
                    // work. However, we have historically thrown an error here, so
                    // for now we will skip the error only when _suppressSameNameError
                    // is `true`, allowing people to opt in and give this some real
                    // world testing.
                    console.warn ? console.warn(message) : console.log(message);
                  } else {
                    throw new Error(message);
                  }
                }
              },

              ///
              /// Main collection API
              ///
              _getFindSelector(args) {
                if (args.length == 0) return {};else return args[0];
              },

              _getFindOptions(args) {
                var self = this;

                if (args.length < 2) {
                  return {
                    transform: self._transform
                  };
                } else {
                  check(args[1], Match.Optional(Match.ObjectIncluding({
                    fields: Match.Optional(Match.OneOf(Object, undefined)),
                    sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),
                    limit: Match.Optional(Match.OneOf(Number, undefined)),
                    skip: Match.Optional(Match.OneOf(Number, undefined))
                  })));
                  return (0, _objectSpread2.default)({
                    transform: self._transform
                  }, args[1]);
                }
              },

              /**
               * @summary Find the documents in a collection that match the selector.
               * @locus Anywhere
               * @method find
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} [selector] A query describing the documents to find
               * @param {Object} [options]
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
               * @param {Number} options.skip Number of results to skip at the beginning
               * @param {Number} options.limit Maximum number of results to return
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity
               * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.
               * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).
               * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.
               * @param {Number} options.maxTimeMs (Server only) If set, instructs MongoDB to set a time limit for this cursor's operations. If the operation reaches the specified time limit (in milliseconds) without the having been completed, an exception will be thrown. Useful to prevent an (accidental or malicious) unoptimized query from causing a full collection scan that would disrupt other database users, at the expense of needing to handle the resulting error.
               * @param {String|Object} options.hint (Server only) Overrides MongoDB's default index selection and query optimization process. Specify an index to force its use, either by its name or index specification. You can also specify `{ $natural : 1 }` to force a forwards collection scan, or `{ $natural : -1 }` for a reverse collection scan. Setting this is only recommended for advanced users.
               * @returns {Mongo.Cursor}
               */
              find() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                // Collection.find() (return all docs) behaves differently
                // from Collection.find(undefined) (return 0 docs).  so be
                // careful about the length of arguments.
                return this._collection.find(this._getFindSelector(args), this._getFindOptions(args));
              },

              /**
               * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.
               * @locus Anywhere
               * @method findOne
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} [selector] A query describing the documents to find
               * @param {Object} [options]
               * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)
               * @param {Number} options.skip Number of results to skip at the beginning
               * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.
               * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity
               * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.
               * @returns {Object}
               */
              findOne() {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                return this._collection.findOne(this._getFindSelector(args), this._getFindOptions(args));
              }

            });
            Object.assign(Mongo.Collection, {
              _publishCursor(cursor, sub, collection) {
                var observeHandle = cursor.observeChanges({
                  added: function (id, fields) {
                    sub.added(collection, id, fields);
                  },
                  changed: function (id, fields) {
                    sub.changed(collection, id, fields);
                  },
                  removed: function (id) {
                    sub.removed(collection, id);
                  }
                }); // We don't call sub.ready() here: it gets called in livedata_server, after
                // possibly calling _publishCursor on multiple returned cursors.
                // register stop callback (expects lambda w/ no args).

                sub.onStop(function () {
                  observeHandle.stop();
                }); // return the observeHandle in case it needs to be stopped early

                return observeHandle;
              },

              // protect against dangerous selectors.  falsey and {_id: falsey} are both
              // likely programmer error, and not what you want, particularly for destructive
              // operations. If a falsey _id is sent in, a new string _id will be
              // generated and returned; if a fallbackId is provided, it will be returned
              // instead.
              _rewriteSelector(selector) {
                let {
                  fallbackId
                } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                // shorthand -- scalars match _id
                if (LocalCollection._selectorIsId(selector)) selector = {
                  _id: selector
                };

                if (Array.isArray(selector)) {
                  // This is consistent with the Mongo console itself; if we don't do this
                  // check passing an empty array ends up selecting all items
                  throw new Error("Mongo selector can't be an array.");
                }

                if (!selector || '_id' in selector && !selector._id) {
                  // can't match anything
                  return {
                    _id: fallbackId || Random.id()
                  };
                }

                return selector;
              }

            });
            Object.assign(Mongo.Collection.prototype, {
              // 'insert' immediately returns the inserted document's new _id.
              // The others return values immediately if you are in a stub, an in-memory
              // unmanaged collection, or a mongo-backed collection and you don't pass a
              // callback. 'update' and 'remove' return the number of affected
              // documents. 'upsert' returns an object with keys 'numberAffected' and, if an
              // insert happened, 'insertedId'.
              //
              // Otherwise, the semantics are exactly like other methods: they take
              // a callback as an optional last argument; if no callback is
              // provided, they block until the operation is complete, and throw an
              // exception if it fails; if a callback is provided, then they don't
              // necessarily block, and they call the callback when they finish with error and
              // result arguments.  (The insert method provides the document ID as its result;
              // update and remove provide the number of affected docs as the result; upsert
              // provides an object with numberAffected and maybe insertedId.)
              //
              // On the client, blocking is impossible, so if a callback
              // isn't provided, they just return immediately and any error
              // information is lost.
              //
              // There's one more tweak. On the client, if you don't provide a
              // callback, then if there is an error, a message will be logged with
              // Meteor._debug.
              //
              // The intent (though this is actually determined by the underlying
              // drivers) is that the operations should be done synchronously, not
              // generating their result until the database has acknowledged
              // them. In the future maybe we should provide a flag to turn this
              // off.

              /**
               * @summary Insert a document in the collection.  Returns its unique _id.
               * @locus Anywhere
               * @method  insert
               * @memberof Mongo.Collection
               * @instance
               * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.
               */
              insert(doc, callback) {
                // Make sure we were passed a document to insert
                if (!doc) {
                  throw new Error("insert requires an argument");
                } // Make a shallow clone of the document, preserving its prototype.


                doc = Object.create(Object.getPrototypeOf(doc), Object.getOwnPropertyDescriptors(doc));

                if ('_id' in doc) {
                  if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {
                    throw new Error("Meteor requires document _id fields to be non-empty strings or ObjectIDs");
                  }
                } else {
                  let generateId = true; // Don't generate the id if we're the client and the 'outermost' call
                  // This optimization saves us passing both the randomSeed and the id
                  // Passing both is redundant.

                  if (this._isRemoteCollection()) {
                    const enclosing = DDP._CurrentMethodInvocation.get();

                    if (!enclosing) {
                      generateId = false;
                    }
                  }

                  if (generateId) {
                    doc._id = this._makeNewID();
                  }
                } // On inserts, always return the id that we generated; on all other
                // operations, just return the result from the collection.


                var chooseReturnValueFromCollectionResult = function (result) {
                  if (doc._id) {
                    return doc._id;
                  } // XXX what is this for??
                  // It's some iteraction between the callback to _callMutatorMethod and
                  // the return value conversion


                  doc._id = result;
                  return result;
                };

                const wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);

                if (this._isRemoteCollection()) {
                  const result = this._callMutatorMethod("insert", [doc], wrappedCallback);

                  return chooseReturnValueFromCollectionResult(result);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  const result = this._collection.insert(doc, wrappedCallback);

                  return chooseReturnValueFromCollectionResult(result);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              /**
               * @summary Modify one or more documents in the collection. Returns the number of matched documents.
               * @locus Anywhere
               * @method update
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to modify
               * @param {MongoModifier} modifier Specifies how to modify the documents
               * @param {Object} [options]
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Boolean} options.upsert True to insert a document if no matching documents are found.
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */
              update(selector, modifier) {
                for (var _len3 = arguments.length, optionsAndCallback = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                  optionsAndCallback[_key3 - 2] = arguments[_key3];
                }

                const callback = popCallbackFromArgs(optionsAndCallback); // We've already popped off the callback, so we are left with an array
                // of one or zero items

                const options = (0, _objectSpread2.default)({}, optionsAndCallback[0] || null);
                let insertedId;

                if (options && options.upsert) {
                  // set `insertedId` if absent.  `insertedId` is a Meteor extension.
                  if (options.insertedId) {
                    if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error("insertedId must be string or ObjectID");
                    insertedId = options.insertedId;
                  } else if (!selector || !selector._id) {
                    insertedId = this._makeNewID();
                    options.generatedId = true;
                    options.insertedId = insertedId;
                  }
                }

                selector = Mongo.Collection._rewriteSelector(selector, {
                  fallbackId: insertedId
                });
                const wrappedCallback = wrapCallback(callback);

                if (this._isRemoteCollection()) {
                  const args = [selector, modifier, options];
                  return this._callMutatorMethod("update", args, wrappedCallback);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  return this._collection.update(selector, modifier, options, wrappedCallback);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              /**
               * @summary Remove documents from the collection
               * @locus Anywhere
               * @method remove
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to remove
               * @param {Function} [callback] Optional.  If present, called with an error object as its argument.
               */
              remove(selector, callback) {
                selector = Mongo.Collection._rewriteSelector(selector);
                const wrappedCallback = wrapCallback(callback);

                if (this._isRemoteCollection()) {
                  return this._callMutatorMethod("remove", [selector], wrappedCallback);
                } // it's my collection.  descend into the collection object
                // and propagate any exception.


                try {
                  // If the user provided a callback and the collection implements this
                  // operation asynchronously, then queryRet will be undefined, and the
                  // result will be returned through the callback instead.
                  return this._collection.remove(selector, wrappedCallback);
                } catch (e) {
                  if (callback) {
                    callback(e);
                    return null;
                  }

                  throw e;
                }
              },

              // Determine if this collection is simply a minimongo representation of a real
              // database on another server
              _isRemoteCollection() {
                // XXX see #MeteorServerNull
                return this._connection && this._connection !== Meteor.server;
              },

              /**
               * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).
               * @locus Anywhere
               * @method upsert
               * @memberof Mongo.Collection
               * @instance
               * @param {MongoSelector} selector Specifies which documents to modify
               * @param {MongoModifier} modifier Specifies how to modify the documents
               * @param {Object} [options]
               * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).
               * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.
               */
              upsert(selector, modifier, options, callback) {
                if (!callback && typeof options === "function") {
                  callback = options;
                  options = {};
                }

                return this.update(selector, modifier, (0, _objectSpread2.default)({}, options, {
                  _returnObject: true,
                  upsert: true
                }), callback);
              },

              // We'll actually design an index API later. For now, we just pass through to
              // Mongo's, but make it synchronous.
              _ensureIndex(index, options) {
                var self = this;
                if (!self._collection._ensureIndex) throw new Error("Can only call _ensureIndex on server collections");

                self._collection._ensureIndex(index, options);
              },

              _dropIndex(index) {
                var self = this;
                if (!self._collection._dropIndex) throw new Error("Can only call _dropIndex on server collections");

                self._collection._dropIndex(index);
              },

              _dropCollection() {
                var self = this;
                if (!self._collection.dropCollection) throw new Error("Can only call _dropCollection on server collections");

                self._collection.dropCollection();
              },

              _createCappedCollection(byteSize, maxDocuments) {
                var self = this;
                if (!self._collection._createCappedCollection) throw new Error("Can only call _createCappedCollection on server collections");

                self._collection._createCappedCollection(byteSize, maxDocuments);
              },

              /**
               * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
               * @locus Server
               * @memberof Mongo.Collection
               * @instance
               */
              rawCollection() {
                var self = this;

                if (!self._collection.rawCollection) {
                  throw new Error("Can only call rawCollection on server collections");
                }

                return self._collection.rawCollection();
              },

              /**
               * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.
               * @locus Server
               * @memberof Mongo.Collection
               * @instance
               */
              rawDatabase() {
                var self = this;

                if (!(self._driver.mongo && self._driver.mongo.db)) {
                  throw new Error("Can only call rawDatabase on server collections");
                }

                return self._driver.mongo.db;
              }

            }); // Convert the callback to not return a result if there is an error

            function wrapCallback(callback, convertResult) {
              return callback && function (error, result) {
                if (error) {
                  callback(error);
                } else if (typeof convertResult === "function") {
                  callback(error, convertResult(result));
                } else {
                  callback(error, result);
                }
              };
            }
            /**
             * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).
             * @locus Anywhere
             * @class
             * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create
             */

            Mongo.ObjectID = MongoID.ObjectID;
            /**
             * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.
             * @class
             * @instanceName cursor
             */

            Mongo.Cursor = LocalCollection.Cursor;
            /**
             * @deprecated in 0.9.1
             */

            Mongo.Collection.Cursor = Mongo.Cursor;
            /**
             * @deprecated in 0.9.1
             */

            Mongo.Collection.ObjectID = Mongo.ObjectID;
            /**
             * @deprecated in 0.9.1
             */

            Meteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package

            Object.assign(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);

            function popCallbackFromArgs(args) {
              // Pull off any callback (or perhaps a 'callback' variable that was passed
              // in undefined, like how 'upsert' does it).
              if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {
                return args.pop();
              }
            }
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  _require2("/node_modules/meteor/mongo/local_collection_driver.js");
  _require2("/node_modules/meteor/mongo/collection.js");

  /* Exports */
  Package._define("mongo", {
    Mongo: Mongo
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("blaze-html-templates");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var ReactiveVar;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/reactive-var/reactive-var.js                                                                        //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /*
     * ## [new] ReactiveVar(initialValue, [equalsFunc])
     *
     * A ReactiveVar holds a single value that can be get and set,
     * such that calling `set` will invalidate any Computations that
     * called `get`, according to the usual contract for reactive
     * data sources.
     *
     * A ReactiveVar is much like a Session variable -- compare `foo.get()`
     * to `Session.get("foo")` -- but it doesn't have a global name and isn't
     * automatically migrated across hot code pushes.  Also, while Session
     * variables can only hold JSON or EJSON, ReactiveVars can hold any value.
     *
     * An important property of ReactiveVars, which is sometimes the reason
     * to use one, is that setting the value to the same value as before has
     * no effect, meaning ReactiveVars can be used to absorb extra
     * invalidations that wouldn't serve a purpose.  However, by default,
     * ReactiveVars are extremely conservative about what changes they
     * absorb.  Calling `set` with an object argument will *always* trigger
     * invalidations, because even if the new value is `===` the old value,
     * the object may have been mutated.  You can change the default behavior
     * by passing a function of two arguments, `oldValue` and `newValue`,
     * to the constructor as `equalsFunc`.
     *
     * This class is extremely basic right now, but the idea is to evolve
     * it into the ReactiveVar of Geoff's Lickable Forms proposal.
     */

    /**
     * @class 
     * @instanceName reactiveVar
     * @summary Constructor for a ReactiveVar, which represents a single reactive variable.
     * @locus Client
     * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
     * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
     */
    ReactiveVar = function (initialValue, equalsFunc) {
      if (!(this instanceof ReactiveVar))
        // called without `new`
        return new ReactiveVar(initialValue, equalsFunc);

      this.curValue = initialValue;
      this.equalsFunc = equalsFunc;
      this.dep = new Tracker.Dependency();
    };

    ReactiveVar._isEqual = function (oldValue, newValue) {
      var a = oldValue,
          b = newValue;
      // Two values are "equal" here if they are `===` and are
      // number, boolean, string, undefined, or null.
      if (a !== b) return false;else return !a || typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string';
    };

    /**
     * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.
     * @locus Client
     */
    ReactiveVar.prototype.get = function () {
      if (Tracker.active) this.dep.depend();

      return this.curValue;
    };

    /**
     * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
     * @locus Client
     * @param {Any} newValue
     */
    ReactiveVar.prototype.set = function (newValue) {
      var oldValue = this.curValue;

      if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))
        // value is same as last time
        return;

      this.curValue = newValue;
      this.dep.changed();
    };

    ReactiveVar.prototype.toString = function () {
      return 'ReactiveVar{' + this.get() + '}';
    };

    ReactiveVar.prototype._numListeners = function () {
      // Tests want to know.
      // Accesses a private field of Tracker.Dependency.
      var count = 0;
      for (var id in this.dep._dependentsById) count++;
      return count;
    };

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("reactive-var", {
    ReactiveVar: ReactiveVar
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("standard-minifier-css");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("standard-minifier-js");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("shell-server");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("autopublish");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("barbatus:typescript-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("barbatus:typescript");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("ddp-rate-limiter");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Random = Package.random.Random;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////
    //                                                                                  //
    // packages/localstorage/localstorage.js                                            //
    //                                                                                  //
    //////////////////////////////////////////////////////////////////////////////////////
    //
    // Meteor._localStorage is not an ideal name, but we can change it later.

    // Let's test to make sure that localStorage actually works. For example, in
    // Safari with private browsing on, window.localStorage exists but actually
    // trying to use it throws.
    // Accessing window.localStorage can also immediately throw an error in IE (#1291).

    var hasOwn = Object.prototype.hasOwnProperty;
    var key = '_localstorage_test_' + Random.id();
    var retrieved;
    var storage;

    try {
      storage = global.localStorage;

      if (storage) {
        storage.setItem(key, key);
        retrieved = storage.getItem(key);
        storage.removeItem(key);
      }
    } catch (ignored) {}

    if (key === retrieved) {
      if (Meteor.isServer) {
        Meteor._localStorage = storage;
      } else {
        // Some browsers (e.g. IE11) don't properly handle attempts to change
        // window.localStorage methods. By using proxy methods to expose
        // window.localStorage functionality, developers can change the
        // behavior of Meteor._localStorage methods without breaking
        // window.localStorage.
        ["getItem", "setItem", "removeItem"].forEach(function (name) {
          this[name] = function () {
            return storage[name].apply(storage, arguments);
          };
        }, Meteor._localStorage = {});
      }
    }

    if (!Meteor._localStorage) {
      if (Meteor.isClient) {
        Meteor._debug("You are running a browser with no localStorage or userData " + "support. Logging in from one tab will not cause another " + "tab to be logged in.");
      }

      Meteor._localStorage = Object.create({
        setItem: function (key, val) {
          this[key] = val;
        },

        removeItem: function (key) {
          delete this[key];
        },

        getItem: function (key) {
          return hasOwn.call(this, key) ? this[key] : null;
        }
      });
    }

    //////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("localstorage");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

	/* Imports */
	var Meteor = Package.meteor.Meteor;
	var global = Package.meteor.global;
	var meteorEnv = Package.meteor.meteorEnv;
	var meteorInstall = Package.modules.meteorInstall;

	/* Package-scope variables */
	var $, jQuery;

	var _require2 = meteorInstall({ "node_modules": { "meteor": { "jquery": { "main.js": function (_require, _exports) {

						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//                                                                                                             //
						// packages/jquery/main.js                                                                                     //
						//                                                                                                             //
						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//
						var global = this;

						try {
							var jQuery = _require("jquery");
						} catch (e) {
							jQuery = _require("./jquery.js");
						}

						// Provide values for the exported variables of the jquery package.
						_exports.$ = _exports.jQuery = jQuery;

						// There's no stopping legacy code from referring to window.$ or
						// window.jQuery, so we have to keep defining those properties globally,
						// but at least the exports of this package will be reliable.
						global.$ = global.$ || jQuery;
						global.jQuery = global.jQuery || jQuery;

						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					}, "jquery.js": function (_require3, _exports3, _module) {

						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//                                                                                                             //
						// packages/jquery/jquery.js                                                                                   //
						//                                                                                                             //
						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
						//
						/*!
       * jQuery JavaScript Library v1.12.1
       * http://jquery.com/
       *
       * Includes Sizzle.js
       * http://sizzlejs.com/
       *
       * Copyright jQuery Foundation and other contributors
       * Released under the MIT license
       * http://jquery.org/license
       *
       * Date: 2016-02-22T19:07Z
       */

						(function (global, factory) {

							if (typeof _module === "object" && typeof _module.exports === "object") {
								// For CommonJS and CommonJS-like environments where a proper `window`
								// is present, execute the factory and get jQuery.
								// For environments that do not have a `window` with a `document`
								// (such as Node.js), expose a factory as module.exports.
								// This accentuates the need for the creation of a real `window`.
								// e.g. var jQuery = require("jquery")(window);
								// See ticket #14549 for more info.
								_module.exports = global.document ? factory(global, true) : function (w) {
									if (!w.document) {
										throw new Error("jQuery requires a window with a document");
									}
									return factory(w);
								};
							} else {
								factory(global);
							}

							// Pass this if window is not defined yet
						})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

							// Support: Firefox 18+
							// Can't be in strict mode, several libs including ASP.NET trace
							// the stack via arguments.caller.callee and Firefox dies if
							// you try to trace through "use strict" call chains. (#13335)
							//"use strict";
							var deletedIds = [];

							var document = window.document;

							var slice = deletedIds.slice;

							var concat = deletedIds.concat;

							var push = deletedIds.push;

							var indexOf = deletedIds.indexOf;

							var class2type = {};

							var toString = class2type.toString;

							var hasOwn = class2type.hasOwnProperty;

							var support = {};

							var version = "1.12.1",


							// Define a local copy of jQuery
							jQuery = function (selector, context) {

								// The jQuery object is actually just the init constructor 'enhanced'
								// Need init if jQuery is called (just allow error to be thrown if not included)
								return new jQuery.fn.init(selector, context);
							},


							// Support: Android<4.1, IE<9
							// Make sure we trim BOM and NBSP
							rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


							// Matches dashed string for camelizing
							rmsPrefix = /^-ms-/,
							    rdashAlpha = /-([\da-z])/gi,


							// Used by jQuery.camelCase as callback to replace()
							fcamelCase = function (all, letter) {
								return letter.toUpperCase();
							};

							jQuery.fn = jQuery.prototype = {

								// The current version of jQuery being used
								jquery: version,

								constructor: jQuery,

								// Start with an empty selector
								selector: "",

								// The default length of a jQuery object is 0
								length: 0,

								toArray: function () {
									return slice.call(this);
								},

								// Get the Nth element in the matched element set OR
								// Get the whole matched element set as a clean array
								get: function (num) {
									return num != null ?

									// Return just the one element from the set
									num < 0 ? this[num + this.length] : this[num] :

									// Return all the elements in a clean array
									slice.call(this);
								},

								// Take an array of elements and push it onto the stack
								// (returning the new matched element set)
								pushStack: function (elems) {

									// Build a new jQuery matched element set
									var ret = jQuery.merge(this.constructor(), elems);

									// Add the old object onto the stack (as a reference)
									ret.prevObject = this;
									ret.context = this.context;

									// Return the newly-formed element set
									return ret;
								},

								// Execute a callback for every element in the matched set.
								each: function (callback) {
									return jQuery.each(this, callback);
								},

								map: function (callback) {
									return this.pushStack(jQuery.map(this, function (elem, i) {
										return callback.call(elem, i, elem);
									}));
								},

								slice: function () {
									return this.pushStack(slice.apply(this, arguments));
								},

								first: function () {
									return this.eq(0);
								},

								last: function () {
									return this.eq(-1);
								},

								eq: function (i) {
									var len = this.length,
									    j = +i + (i < 0 ? len : 0);
									return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
								},

								end: function () {
									return this.prevObject || this.constructor();
								},

								// For internal use only.
								// Behaves like an Array's method, not like a jQuery method.
								push: push,
								sort: deletedIds.sort,
								splice: deletedIds.splice
							};

							jQuery.extend = jQuery.fn.extend = function () {
								var src,
								    copyIsArray,
								    copy,
								    name,
								    options,
								    clone,
								    target = arguments[0] || {},
								    i = 1,
								    length = arguments.length,
								    deep = false;

								// Handle a deep copy situation
								if (typeof target === "boolean") {
									deep = target;

									// skip the boolean and the target
									target = arguments[i] || {};
									i++;
								}

								// Handle case when target is a string or something (possible in deep copy)
								if (typeof target !== "object" && !jQuery.isFunction(target)) {
									target = {};
								}

								// extend jQuery itself if only one argument is passed
								if (i === length) {
									target = this;
									i--;
								}

								for (; i < length; i++) {

									// Only deal with non-null/undefined values
									if ((options = arguments[i]) != null) {

										// Extend the base object
										for (name in options) {
											src = target[name];
											copy = options[name];

											// Prevent never-ending loop
											if (target === copy) {
												continue;
											}

											// Recurse if we're merging plain objects or arrays
											if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {

												if (copyIsArray) {
													copyIsArray = false;
													clone = src && jQuery.isArray(src) ? src : [];
												} else {
													clone = src && jQuery.isPlainObject(src) ? src : {};
												}

												// Never move original objects, clone them
												target[name] = jQuery.extend(deep, clone, copy);

												// Don't bring in undefined values
											} else if (copy !== undefined) {
												target[name] = copy;
											}
										}
									}
								}

								// Return the modified object
								return target;
							};

							jQuery.extend({

								// Unique for each copy of jQuery on the page
								expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

								// Assume jQuery is ready without the ready module
								isReady: true,

								error: function (msg) {
									throw new Error(msg);
								},

								noop: function () {},

								// See test/unit/core.js for details concerning isFunction.
								// Since version 1.3, DOM methods and functions like alert
								// aren't supported. They return false on IE (#2968).
								isFunction: function (obj) {
									return jQuery.type(obj) === "function";
								},

								isArray: Array.isArray || function (obj) {
									return jQuery.type(obj) === "array";
								},

								isWindow: function (obj) {
									/* jshint eqeqeq: false */
									return obj != null && obj == obj.window;
								},

								isNumeric: function (obj) {

									// parseFloat NaNs numeric-cast false positives (null|true|false|"")
									// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
									// subtraction forces infinities to NaN
									// adding 1 corrects loss of precision from parseFloat (#15100)
									var realStringObj = obj && obj.toString();
									return !jQuery.isArray(obj) && realStringObj - parseFloat(realStringObj) + 1 >= 0;
								},

								isEmptyObject: function (obj) {
									var name;
									for (name in obj) {
										return false;
									}
									return true;
								},

								isPlainObject: function (obj) {
									var key;

									// Must be an Object.
									// Because of IE, we also have to check the presence of the constructor property.
									// Make sure that DOM nodes and window objects don't pass through, as well
									if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
										return false;
									}

									try {

										// Not own constructor property must be Object
										if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
											return false;
										}
									} catch (e) {

										// IE8,9 Will throw exceptions on certain host objects #9897
										return false;
									}

									// Support: IE<9
									// Handle iteration over inherited properties before own properties.
									if (!support.ownFirst) {
										for (key in obj) {
											return hasOwn.call(obj, key);
										}
									}

									// Own properties are enumerated firstly, so to speed up,
									// if last one is own, then all properties are own.
									for (key in obj) {}

									return key === undefined || hasOwn.call(obj, key);
								},

								type: function (obj) {
									if (obj == null) {
										return obj + "";
									}
									return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
								},

								// Workarounds based on findings by Jim Driscoll
								// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
								globalEval: function (data) {
									if (data && jQuery.trim(data)) {

										// We use execScript on Internet Explorer
										// We use an anonymous function so that context is window
										// rather than jQuery in Firefox
										(window.execScript || function (data) {
											window["eval"].call(window, data); // jscs:ignore requireDotNotation
										})(data);
									}
								},

								// Convert dashed to camelCase; used by the css and data modules
								// Microsoft forgot to hump their vendor prefix (#9572)
								camelCase: function (string) {
									return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
								},

								nodeName: function (elem, name) {
									return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
								},

								each: function (obj, callback) {
									var length,
									    i = 0;

									if (isArrayLike(obj)) {
										length = obj.length;
										for (; i < length; i++) {
											if (callback.call(obj[i], i, obj[i]) === false) {
												break;
											}
										}
									} else {
										for (i in obj) {
											if (callback.call(obj[i], i, obj[i]) === false) {
												break;
											}
										}
									}

									return obj;
								},

								// Support: Android<4.1, IE<9
								trim: function (text) {
									return text == null ? "" : (text + "").replace(rtrim, "");
								},

								// results is for internal usage only
								makeArray: function (arr, results) {
									var ret = results || [];

									if (arr != null) {
										if (isArrayLike(Object(arr))) {
											jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
										} else {
											push.call(ret, arr);
										}
									}

									return ret;
								},

								inArray: function (elem, arr, i) {
									var len;

									if (arr) {
										if (indexOf) {
											return indexOf.call(arr, elem, i);
										}

										len = arr.length;
										i = i ? i < 0 ? Math.max(0, len + i) : i : 0;

										for (; i < len; i++) {

											// Skip accessing in sparse arrays
											if (i in arr && arr[i] === elem) {
												return i;
											}
										}
									}

									return -1;
								},

								merge: function (first, second) {
									var len = +second.length,
									    j = 0,
									    i = first.length;

									while (j < len) {
										first[i++] = second[j++];
									}

									// Support: IE<9
									// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
									if (len !== len) {
										while (second[j] !== undefined) {
											first[i++] = second[j++];
										}
									}

									first.length = i;

									return first;
								},

								grep: function (elems, callback, invert) {
									var callbackInverse,
									    matches = [],
									    i = 0,
									    length = elems.length,
									    callbackExpect = !invert;

									// Go through the array, only saving the items
									// that pass the validator function
									for (; i < length; i++) {
										callbackInverse = !callback(elems[i], i);
										if (callbackInverse !== callbackExpect) {
											matches.push(elems[i]);
										}
									}

									return matches;
								},

								// arg is for internal usage only
								map: function (elems, callback, arg) {
									var length,
									    value,
									    i = 0,
									    ret = [];

									// Go through the array, translating each of the items to their new values
									if (isArrayLike(elems)) {
										length = elems.length;
										for (; i < length; i++) {
											value = callback(elems[i], i, arg);

											if (value != null) {
												ret.push(value);
											}
										}

										// Go through every key on the object,
									} else {
										for (i in elems) {
											value = callback(elems[i], i, arg);

											if (value != null) {
												ret.push(value);
											}
										}
									}

									// Flatten any nested arrays
									return concat.apply([], ret);
								},

								// A global GUID counter for objects
								guid: 1,

								// Bind a function to a context, optionally partially applying any
								// arguments.
								proxy: function (fn, context) {
									var args, proxy, tmp;

									if (typeof context === "string") {
										tmp = fn[context];
										context = fn;
										fn = tmp;
									}

									// Quick check to determine if target is callable, in the spec
									// this throws a TypeError, but we will just return undefined.
									if (!jQuery.isFunction(fn)) {
										return undefined;
									}

									// Simulated bind
									args = slice.call(arguments, 2);
									proxy = function () {
										return fn.apply(context || this, args.concat(slice.call(arguments)));
									};

									// Set the guid of unique handler to the same of original handler, so it can be removed
									proxy.guid = fn.guid = fn.guid || jQuery.guid++;

									return proxy;
								},

								now: function () {
									return +new Date();
								},

								// jQuery.support is not used in Core but other projects attach their
								// properties to it so it needs to exist.
								support: support
							});

							// JSHint would error on this code due to the Symbol not being defined in ES5.
							// Defining this global in .jshintrc would create a danger of using the global
							// unguarded in another place, it seems safer to just disable JSHint for these
							// three lines.
							/* jshint ignore: start */
							if (typeof Symbol === "function") {
								jQuery.fn[Symbol.iterator] = deletedIds[Symbol.iterator];
							}
							/* jshint ignore: end */

							// Populate the class2type map
							jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
								class2type["[object " + name + "]"] = name.toLowerCase();
							});

							function isArrayLike(obj) {

								// Support: iOS 8.2 (not reproducible in simulator)
								// `in` check used to prevent JIT error (gh-2145)
								// hasOwn isn't used here due to false negatives
								// regarding Nodelist length in IE
								var length = !!obj && "length" in obj && obj.length,
								    type = jQuery.type(obj);

								if (type === "function" || jQuery.isWindow(obj)) {
									return false;
								}

								return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
							}
							var Sizzle =
							/*!
        * Sizzle CSS Selector Engine v2.2.1
        * http://sizzlejs.com/
        *
        * Copyright jQuery Foundation and other contributors
        * Released under the MIT license
        * http://jquery.org/license
        *
        * Date: 2015-10-17
        */
							function (window) {

								var i,
								    support,
								    Expr,
								    getText,
								    isXML,
								    tokenize,
								    compile,
								    select,
								    outermostContext,
								    sortInput,
								    hasDuplicate,


								// Local document vars
								setDocument,
								    document,
								    docElem,
								    documentIsHTML,
								    rbuggyQSA,
								    rbuggyMatches,
								    matches,
								    contains,


								// Instance-specific data
								expando = "sizzle" + 1 * new Date(),
								    preferredDoc = window.document,
								    dirruns = 0,
								    done = 0,
								    classCache = createCache(),
								    tokenCache = createCache(),
								    compilerCache = createCache(),
								    sortOrder = function (a, b) {
									if (a === b) {
										hasDuplicate = true;
									}
									return 0;
								},


								// General-purpose constants
								MAX_NEGATIVE = 1 << 31,


								// Instance methods
								hasOwn = {}.hasOwnProperty,
								    arr = [],
								    pop = arr.pop,
								    push_native = arr.push,
								    push = arr.push,
								    slice = arr.slice,

								// Use a stripped-down indexOf as it's faster than native
								// http://jsperf.com/thor-indexof-vs-for/5
								indexOf = function (list, elem) {
									var i = 0,
									    len = list.length;
									for (; i < len; i++) {
										if (list[i] === elem) {
											return i;
										}
									}
									return -1;
								},
								    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


								// Regular expressions

								// http://www.w3.org/TR/css3-selectors/#whitespace
								whitespace = "[\\x20\\t\\r\\n\\f]",


								// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
								identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",


								// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
								attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
								// Operator (capture 2)
								"*([*^$|!~]?=)" + whitespace +
								// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
								"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
								    pseudos = ":(" + identifier + ")(?:\\((" +
								// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
								// 1. quoted (capture 3; capture 4 or capture 5)
								"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
								// 2. simple (capture 6)
								"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
								// 3. anything else (capture 2)
								".*" + ")\\)|)",


								// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
								rwhitespace = new RegExp(whitespace + "+", "g"),
								    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
								    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
								    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
								    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
								    rpseudo = new RegExp(pseudos),
								    ridentifier = new RegExp("^" + identifier + "$"),
								    matchExpr = {
									"ID": new RegExp("^#(" + identifier + ")"),
									"CLASS": new RegExp("^\\.(" + identifier + ")"),
									"TAG": new RegExp("^(" + identifier + "|[*])"),
									"ATTR": new RegExp("^" + attributes),
									"PSEUDO": new RegExp("^" + pseudos),
									"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
									"bool": new RegExp("^(?:" + booleans + ")$", "i"),
									// For use in libraries implementing .is()
									// We use this for POS matching in `select`
									"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
								},
								    rinputs = /^(?:input|select|textarea|button)$/i,
								    rheader = /^h\d$/i,
								    rnative = /^[^{]+\{\s*\[native \w/,


								// Easily-parseable/retrievable ID or TAG or CLASS selectors
								rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
								    rsibling = /[+~]/,
								    rescape = /'|\\/g,


								// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
								runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
								    funescape = function (_, escaped, escapedWhitespace) {
									var high = "0x" + escaped - 0x10000;
									// NaN means non-codepoint
									// Support: Firefox<24
									// Workaround erroneous numeric interpretation of +"0x"
									return high !== high || escapedWhitespace ? escaped : high < 0 ?
									// BMP codepoint
									String.fromCharCode(high + 0x10000) :
									// Supplemental Plane codepoint (surrogate pair)
									String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
								},


								// Used for iframes
								// See setDocument()
								// Removing the function wrapper causes a "Permission Denied"
								// error in IE
								unloadHandler = function () {
									setDocument();
								};

								// Optimize for push.apply( _, NodeList )
								try {
									push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
									// Support: Android<4.0
									// Detect silently failing push.apply
									arr[preferredDoc.childNodes.length].nodeType;
								} catch (e) {
									push = { apply: arr.length ?

										// Leverage slice if possible
										function (target, els) {
											push_native.apply(target, slice.call(els));
										} :

										// Support: IE<9
										// Otherwise append directly
										function (target, els) {
											var j = target.length,
											    i = 0;
											// Can't trust NodeList.length
											while (target[j++] = els[i++]) {}
											target.length = j - 1;
										}
									};
								}

								function Sizzle(selector, context, results, seed) {
									var m,
									    i,
									    elem,
									    nid,
									    nidselect,
									    match,
									    groups,
									    newSelector,
									    newContext = context && context.ownerDocument,


									// nodeType defaults to 9, since context defaults to document
									nodeType = context ? context.nodeType : 9;

									results = results || [];

									// Return early from calls with invalid selector or context
									if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

										return results;
									}

									// Try to shortcut find operations (as opposed to filters) in HTML documents
									if (!seed) {

										if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
											setDocument(context);
										}
										context = context || document;

										if (documentIsHTML) {

											// If the selector is sufficiently simple, try using a "get*By*" DOM method
											// (excepting DocumentFragment context, where the methods don't exist)
											if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

												// ID selector
												if (m = match[1]) {

													// Document context
													if (nodeType === 9) {
														if (elem = context.getElementById(m)) {

															// Support: IE, Opera, Webkit
															// TODO: identify versions
															// getElementById can match elements by name instead of ID
															if (elem.id === m) {
																results.push(elem);
																return results;
															}
														} else {
															return results;
														}

														// Element context
													} else {

														// Support: IE, Opera, Webkit
														// TODO: identify versions
														// getElementById can match elements by name instead of ID
														if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

															results.push(elem);
															return results;
														}
													}

													// Type selector
												} else if (match[2]) {
													push.apply(results, context.getElementsByTagName(selector));
													return results;

													// Class selector
												} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

													push.apply(results, context.getElementsByClassName(m));
													return results;
												}
											}

											// Take advantage of querySelectorAll
											if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

												if (nodeType !== 1) {
													newContext = context;
													newSelector = selector;

													// qSA looks outside Element context, which is not what we want
													// Thanks to Andrew Dupont for this workaround technique
													// Support: IE <=8
													// Exclude object elements
												} else if (context.nodeName.toLowerCase() !== "object") {

													// Capture the context ID, setting it first if necessary
													if (nid = context.getAttribute("id")) {
														nid = nid.replace(rescape, "\\$&");
													} else {
														context.setAttribute("id", nid = expando);
													}

													// Prefix every selector in the list
													groups = tokenize(selector);
													i = groups.length;
													nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
													while (i--) {
														groups[i] = nidselect + " " + toSelector(groups[i]);
													}
													newSelector = groups.join(",");

													// Expand context for sibling selectors
													newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
												}

												if (newSelector) {
													try {
														push.apply(results, newContext.querySelectorAll(newSelector));
														return results;
													} catch (qsaError) {} finally {
														if (nid === expando) {
															context.removeAttribute("id");
														}
													}
												}
											}
										}
									}

									// All others
									return select(selector.replace(rtrim, "$1"), context, results, seed);
								}

								/**
         * Create key-value caches of limited size
         * @returns {function(string, object)} Returns the Object data after storing it on itself with
         *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
         *	deleting the oldest entry
         */
								function createCache() {
									var keys = [];

									function cache(key, value) {
										// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
										if (keys.push(key + " ") > Expr.cacheLength) {
											// Only keep the most recent entries
											delete cache[keys.shift()];
										}
										return cache[key + " "] = value;
									}
									return cache;
								}

								/**
         * Mark a function for special use by Sizzle
         * @param {Function} fn The function to mark
         */
								function markFunction(fn) {
									fn[expando] = true;
									return fn;
								}

								/**
         * Support testing using an element
         * @param {Function} fn Passed the created div and expects a boolean result
         */
								function assert(fn) {
									var div = document.createElement("div");

									try {
										return !!fn(div);
									} catch (e) {
										return false;
									} finally {
										// Remove from its parent by default
										if (div.parentNode) {
											div.parentNode.removeChild(div);
										}
										// release memory in IE
										div = null;
									}
								}

								/**
         * Adds the same handler for all of the specified attrs
         * @param {String} attrs Pipe-separated list of attributes
         * @param {Function} handler The method that will be applied
         */
								function addHandle(attrs, handler) {
									var arr = attrs.split("|"),
									    i = arr.length;

									while (i--) {
										Expr.attrHandle[arr[i]] = handler;
									}
								}

								/**
         * Checks document order of two siblings
         * @param {Element} a
         * @param {Element} b
         * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
         */
								function siblingCheck(a, b) {
									var cur = b && a,
									    diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);

									// Use IE sourceIndex if available on both nodes
									if (diff) {
										return diff;
									}

									// Check if b follows a
									if (cur) {
										while (cur = cur.nextSibling) {
											if (cur === b) {
												return -1;
											}
										}
									}

									return a ? 1 : -1;
								}

								/**
         * Returns a function to use in pseudos for input types
         * @param {String} type
         */
								function createInputPseudo(type) {
									return function (elem) {
										var name = elem.nodeName.toLowerCase();
										return name === "input" && elem.type === type;
									};
								}

								/**
         * Returns a function to use in pseudos for buttons
         * @param {String} type
         */
								function createButtonPseudo(type) {
									return function (elem) {
										var name = elem.nodeName.toLowerCase();
										return (name === "input" || name === "button") && elem.type === type;
									};
								}

								/**
         * Returns a function to use in pseudos for positionals
         * @param {Function} fn
         */
								function createPositionalPseudo(fn) {
									return markFunction(function (argument) {
										argument = +argument;
										return markFunction(function (seed, matches) {
											var j,
											    matchIndexes = fn([], seed.length, argument),
											    i = matchIndexes.length;

											// Match elements found at the specified indexes
											while (i--) {
												if (seed[j = matchIndexes[i]]) {
													seed[j] = !(matches[j] = seed[j]);
												}
											}
										});
									});
								}

								/**
         * Checks a node for validity as a Sizzle context
         * @param {Element|Object=} context
         * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
         */
								function testContext(context) {
									return context && typeof context.getElementsByTagName !== "undefined" && context;
								}

								// Expose support vars for convenience
								support = Sizzle.support = {};

								/**
         * Detects XML nodes
         * @param {Element|Object} elem An element or a document
         * @returns {Boolean} True iff elem is a non-HTML XML node
         */
								isXML = Sizzle.isXML = function (elem) {
									// documentElement is verified for cases where it doesn't yet exist
									// (such as loading iframes in IE - #4833)
									var documentElement = elem && (elem.ownerDocument || elem).documentElement;
									return documentElement ? documentElement.nodeName !== "HTML" : false;
								};

								/**
         * Sets document-related variables once based on the current document
         * @param {Element|Object} [doc] An element or document object to use to set the document
         * @returns {Object} Returns the current document
         */
								setDocument = Sizzle.setDocument = function (node) {
									var hasCompare,
									    parent,
									    doc = node ? node.ownerDocument || node : preferredDoc;

									// Return early if doc is invalid or already selected
									if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
										return document;
									}

									// Update global variables
									document = doc;
									docElem = document.documentElement;
									documentIsHTML = !isXML(document);

									// Support: IE 9-11, Edge
									// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
									if ((parent = document.defaultView) && parent.top !== parent) {
										// Support: IE 11
										if (parent.addEventListener) {
											parent.addEventListener("unload", unloadHandler, false);

											// Support: IE 9 - 10 only
										} else if (parent.attachEvent) {
											parent.attachEvent("onunload", unloadHandler);
										}
									}

									/* Attributes
         ---------------------------------------------------------------------- */

									// Support: IE<8
									// Verify that getAttribute really returns attributes and not properties
									// (excepting IE8 booleans)
									support.attributes = assert(function (div) {
										div.className = "i";
										return !div.getAttribute("className");
									});

									/* getElement(s)By*
         ---------------------------------------------------------------------- */

									// Check if getElementsByTagName("*") returns only elements
									support.getElementsByTagName = assert(function (div) {
										div.appendChild(document.createComment(""));
										return !div.getElementsByTagName("*").length;
									});

									// Support: IE<9
									support.getElementsByClassName = rnative.test(document.getElementsByClassName);

									// Support: IE<10
									// Check if getElementById returns elements by name
									// The broken getElementById methods don't pick up programatically-set names,
									// so use a roundabout getElementsByName test
									support.getById = assert(function (div) {
										docElem.appendChild(div).id = expando;
										return !document.getElementsByName || !document.getElementsByName(expando).length;
									});

									// ID find and filter
									if (support.getById) {
										Expr.find["ID"] = function (id, context) {
											if (typeof context.getElementById !== "undefined" && documentIsHTML) {
												var m = context.getElementById(id);
												return m ? [m] : [];
											}
										};
										Expr.filter["ID"] = function (id) {
											var attrId = id.replace(runescape, funescape);
											return function (elem) {
												return elem.getAttribute("id") === attrId;
											};
										};
									} else {
										// Support: IE6/7
										// getElementById is not reliable as a find shortcut
										delete Expr.find["ID"];

										Expr.filter["ID"] = function (id) {
											var attrId = id.replace(runescape, funescape);
											return function (elem) {
												var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
												return node && node.value === attrId;
											};
										};
									}

									// Tag
									Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
										if (typeof context.getElementsByTagName !== "undefined") {
											return context.getElementsByTagName(tag);

											// DocumentFragment nodes don't have gEBTN
										} else if (support.qsa) {
											return context.querySelectorAll(tag);
										}
									} : function (tag, context) {
										var elem,
										    tmp = [],
										    i = 0,

										// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
										results = context.getElementsByTagName(tag);

										// Filter out possible comments
										if (tag === "*") {
											while (elem = results[i++]) {
												if (elem.nodeType === 1) {
													tmp.push(elem);
												}
											}

											return tmp;
										}
										return results;
									};

									// Class
									Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
										if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
											return context.getElementsByClassName(className);
										}
									};

									/* QSA/matchesSelector
         ---------------------------------------------------------------------- */

									// QSA and matchesSelector support

									// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
									rbuggyMatches = [];

									// qSa(:focus) reports false when true (Chrome 21)
									// We allow this because of a bug in IE8/9 that throws an error
									// whenever `document.activeElement` is accessed on an iframe
									// So, we allow :focus to pass through QSA all the time to avoid the IE error
									// See http://bugs.jquery.com/ticket/13378
									rbuggyQSA = [];

									if (support.qsa = rnative.test(document.querySelectorAll)) {
										// Build QSA regex
										// Regex strategy adopted from Diego Perini
										assert(function (div) {
											// Select is set to empty string on purpose
											// This is to test IE's treatment of not explicitly
											// setting a boolean content attribute,
											// since its presence should be enough
											// http://bugs.jquery.com/ticket/12359
											docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

											// Support: IE8, Opera 11-12.16
											// Nothing should be selected when empty strings follow ^= or $= or *=
											// The test attribute must be unknown in Opera but "safe" for WinRT
											// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
											if (div.querySelectorAll("[msallowcapture^='']").length) {
												rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
											}

											// Support: IE8
											// Boolean attributes and "value" are not treated correctly
											if (!div.querySelectorAll("[selected]").length) {
												rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
											}

											// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
											if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
												rbuggyQSA.push("~=");
											}

											// Webkit/Opera - :checked should return selected option elements
											// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
											// IE8 throws error here and will not see later tests
											if (!div.querySelectorAll(":checked").length) {
												rbuggyQSA.push(":checked");
											}

											// Support: Safari 8+, iOS 8+
											// https://bugs.webkit.org/show_bug.cgi?id=136851
											// In-page `selector#id sibing-combinator selector` fails
											if (!div.querySelectorAll("a#" + expando + "+*").length) {
												rbuggyQSA.push(".#.+[+~]");
											}
										});

										assert(function (div) {
											// Support: Windows 8 Native Apps
											// The type and name attributes are restricted during .innerHTML assignment
											var input = document.createElement("input");
											input.setAttribute("type", "hidden");
											div.appendChild(input).setAttribute("name", "D");

											// Support: IE8
											// Enforce case-sensitivity of name attribute
											if (div.querySelectorAll("[name=d]").length) {
												rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
											}

											// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
											// IE8 throws error here and will not see later tests
											if (!div.querySelectorAll(":enabled").length) {
												rbuggyQSA.push(":enabled", ":disabled");
											}

											// Opera 10-11 does not throw on post-comma invalid pseudos
											div.querySelectorAll("*,:x");
											rbuggyQSA.push(",.*:");
										});
									}

									if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

										assert(function (div) {
											// Check to see if it's possible to do matchesSelector
											// on a disconnected node (IE 9)
											support.disconnectedMatch = matches.call(div, "div");

											// This should fail with an exception
											// Gecko does not error, returns false instead
											matches.call(div, "[s!='']:x");
											rbuggyMatches.push("!=", pseudos);
										});
									}

									rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
									rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

									/* Contains
         ---------------------------------------------------------------------- */
									hasCompare = rnative.test(docElem.compareDocumentPosition);

									// Element contains another
									// Purposefully self-exclusive
									// As in, an element does not contain itself
									contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
										var adown = a.nodeType === 9 ? a.documentElement : a,
										    bup = b && b.parentNode;
										return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
									} : function (a, b) {
										if (b) {
											while (b = b.parentNode) {
												if (b === a) {
													return true;
												}
											}
										}
										return false;
									};

									/* Sorting
         ---------------------------------------------------------------------- */

									// Document order sorting
									sortOrder = hasCompare ? function (a, b) {

										// Flag for duplicate removal
										if (a === b) {
											hasDuplicate = true;
											return 0;
										}

										// Sort on method existence if only one input has compareDocumentPosition
										var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
										if (compare) {
											return compare;
										}

										// Calculate position if both inputs belong to the same document
										compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

										// Otherwise we know they are disconnected
										1;

										// Disconnected nodes
										if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

											// Choose the first element that is related to our preferred document
											if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
												return -1;
											}
											if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
												return 1;
											}

											// Maintain original order
											return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
										}

										return compare & 4 ? -1 : 1;
									} : function (a, b) {
										// Exit early if the nodes are identical
										if (a === b) {
											hasDuplicate = true;
											return 0;
										}

										var cur,
										    i = 0,
										    aup = a.parentNode,
										    bup = b.parentNode,
										    ap = [a],
										    bp = [b];

										// Parentless nodes are either documents or disconnected
										if (!aup || !bup) {
											return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

											// If the nodes are siblings, we can do a quick check
										} else if (aup === bup) {
											return siblingCheck(a, b);
										}

										// Otherwise we need full lists of their ancestors for comparison
										cur = a;
										while (cur = cur.parentNode) {
											ap.unshift(cur);
										}
										cur = b;
										while (cur = cur.parentNode) {
											bp.unshift(cur);
										}

										// Walk down the tree looking for a discrepancy
										while (ap[i] === bp[i]) {
											i++;
										}

										return i ?
										// Do a sibling check if the nodes have a common ancestor
										siblingCheck(ap[i], bp[i]) :

										// Otherwise nodes in our document sort first
										ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
									};

									return document;
								};

								Sizzle.matches = function (expr, elements) {
									return Sizzle(expr, null, null, elements);
								};

								Sizzle.matchesSelector = function (elem, expr) {
									// Set document vars if needed
									if ((elem.ownerDocument || elem) !== document) {
										setDocument(elem);
									}

									// Make sure that attribute selectors are quoted
									expr = expr.replace(rattributeQuotes, "='$1']");

									if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

										try {
											var ret = matches.call(elem, expr);

											// IE 9's matchesSelector returns false on disconnected nodes
											if (ret || support.disconnectedMatch ||
											// As well, disconnected nodes are said to be in a document
											// fragment in IE 9
											elem.document && elem.document.nodeType !== 11) {
												return ret;
											}
										} catch (e) {}
									}

									return Sizzle(expr, document, null, [elem]).length > 0;
								};

								Sizzle.contains = function (context, elem) {
									// Set document vars if needed
									if ((context.ownerDocument || context) !== document) {
										setDocument(context);
									}
									return contains(context, elem);
								};

								Sizzle.attr = function (elem, name) {
									// Set document vars if needed
									if ((elem.ownerDocument || elem) !== document) {
										setDocument(elem);
									}

									var fn = Expr.attrHandle[name.toLowerCase()],

									// Don't get fooled by Object.prototype properties (jQuery #13807)
									val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

									return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
								};

								Sizzle.error = function (msg) {
									throw new Error("Syntax error, unrecognized expression: " + msg);
								};

								/**
         * Document sorting and removing duplicates
         * @param {ArrayLike} results
         */
								Sizzle.uniqueSort = function (results) {
									var elem,
									    duplicates = [],
									    j = 0,
									    i = 0;

									// Unless we *know* we can detect duplicates, assume their presence
									hasDuplicate = !support.detectDuplicates;
									sortInput = !support.sortStable && results.slice(0);
									results.sort(sortOrder);

									if (hasDuplicate) {
										while (elem = results[i++]) {
											if (elem === results[i]) {
												j = duplicates.push(i);
											}
										}
										while (j--) {
											results.splice(duplicates[j], 1);
										}
									}

									// Clear input after sorting to release objects
									// See https://github.com/jquery/sizzle/pull/225
									sortInput = null;

									return results;
								};

								/**
         * Utility function for retrieving the text value of an array of DOM nodes
         * @param {Array|Element} elem
         */
								getText = Sizzle.getText = function (elem) {
									var node,
									    ret = "",
									    i = 0,
									    nodeType = elem.nodeType;

									if (!nodeType) {
										// If no nodeType, this is expected to be an array
										while (node = elem[i++]) {
											// Do not traverse comment nodes
											ret += getText(node);
										}
									} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
										// Use textContent for elements
										// innerText usage removed for consistency of new lines (jQuery #11153)
										if (typeof elem.textContent === "string") {
											return elem.textContent;
										} else {
											// Traverse its children
											for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
												ret += getText(elem);
											}
										}
									} else if (nodeType === 3 || nodeType === 4) {
										return elem.nodeValue;
									}
									// Do not include comment or processing instruction nodes

									return ret;
								};

								Expr = Sizzle.selectors = {

									// Can be adjusted by the user
									cacheLength: 50,

									createPseudo: markFunction,

									match: matchExpr,

									attrHandle: {},

									find: {},

									relative: {
										">": { dir: "parentNode", first: true },
										" ": { dir: "parentNode" },
										"+": { dir: "previousSibling", first: true },
										"~": { dir: "previousSibling" }
									},

									preFilter: {
										"ATTR": function (match) {
											match[1] = match[1].replace(runescape, funescape);

											// Move the given value to match[3] whether quoted or unquoted
											match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

											if (match[2] === "~=") {
												match[3] = " " + match[3] + " ";
											}

											return match.slice(0, 4);
										},

										"CHILD": function (match) {
											/* matches from matchExpr["CHILD"]
           	1 type (only|nth|...)
           	2 what (child|of-type)
           	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
           	4 xn-component of xn+y argument ([+-]?\d*n|)
           	5 sign of xn-component
           	6 x of xn-component
           	7 sign of y-component
           	8 y of y-component
           */
											match[1] = match[1].toLowerCase();

											if (match[1].slice(0, 3) === "nth") {
												// nth-* requires argument
												if (!match[3]) {
													Sizzle.error(match[0]);
												}

												// numeric x and y parameters for Expr.filter.CHILD
												// remember that false/true cast respectively to 0/1
												match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
												match[5] = +(match[7] + match[8] || match[3] === "odd");

												// other types prohibit arguments
											} else if (match[3]) {
												Sizzle.error(match[0]);
											}

											return match;
										},

										"PSEUDO": function (match) {
											var excess,
											    unquoted = !match[6] && match[2];

											if (matchExpr["CHILD"].test(match[0])) {
												return null;
											}

											// Accept quoted arguments as-is
											if (match[3]) {
												match[2] = match[4] || match[5] || "";

												// Strip excess characters from unquoted arguments
											} else if (unquoted && rpseudo.test(unquoted) && (
											// Get excess from tokenize (recursively)
											excess = tokenize(unquoted, true)) && (
											// advance to the next closing parenthesis
											excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

												// excess is a negative index
												match[0] = match[0].slice(0, excess);
												match[2] = unquoted.slice(0, excess);
											}

											// Return only captures needed by the pseudo filter method (type and argument)
											return match.slice(0, 3);
										}
									},

									filter: {

										"TAG": function (nodeNameSelector) {
											var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
											return nodeNameSelector === "*" ? function () {
												return true;
											} : function (elem) {
												return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
											};
										},

										"CLASS": function (className) {
											var pattern = classCache[className + " "];

											return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
												return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
											});
										},

										"ATTR": function (name, operator, check) {
											return function (elem) {
												var result = Sizzle.attr(elem, name);

												if (result == null) {
													return operator === "!=";
												}
												if (!operator) {
													return true;
												}

												result += "";

												return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
											};
										},

										"CHILD": function (type, what, argument, first, last) {
											var simple = type.slice(0, 3) !== "nth",
											    forward = type.slice(-4) !== "last",
											    ofType = what === "of-type";

											return first === 1 && last === 0 ?

											// Shortcut for :nth-*(n)
											function (elem) {
												return !!elem.parentNode;
											} : function (elem, context, xml) {
												var cache,
												    uniqueCache,
												    outerCache,
												    node,
												    nodeIndex,
												    start,
												    dir = simple !== forward ? "nextSibling" : "previousSibling",
												    parent = elem.parentNode,
												    name = ofType && elem.nodeName.toLowerCase(),
												    useCache = !xml && !ofType,
												    diff = false;

												if (parent) {

													// :(first|last|only)-(child|of-type)
													if (simple) {
														while (dir) {
															node = elem;
															while (node = node[dir]) {
																if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

																	return false;
																}
															}
															// Reverse direction for :only-* (if we haven't yet done so)
															start = dir = type === "only" && !start && "nextSibling";
														}
														return true;
													}

													start = [forward ? parent.firstChild : parent.lastChild];

													// non-xml :nth-child(...) stores cache data on `parent`
													if (forward && useCache) {

														// Seek `elem` from a previously-cached index

														// ...in a gzip-friendly way
														node = parent;
														outerCache = node[expando] || (node[expando] = {});

														// Support: IE <9 only
														// Defend against cloned attroperties (jQuery gh-1709)
														uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

														cache = uniqueCache[type] || [];
														nodeIndex = cache[0] === dirruns && cache[1];
														diff = nodeIndex && cache[2];
														node = nodeIndex && parent.childNodes[nodeIndex];

														while (node = ++nodeIndex && node && node[dir] || (

														// Fallback to seeking `elem` from the start
														diff = nodeIndex = 0) || start.pop()) {

															// When found, cache indexes on `parent` and break
															if (node.nodeType === 1 && ++diff && node === elem) {
																uniqueCache[type] = [dirruns, nodeIndex, diff];
																break;
															}
														}
													} else {
														// Use previously-cached element index if available
														if (useCache) {
															// ...in a gzip-friendly way
															node = elem;
															outerCache = node[expando] || (node[expando] = {});

															// Support: IE <9 only
															// Defend against cloned attroperties (jQuery gh-1709)
															uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

															cache = uniqueCache[type] || [];
															nodeIndex = cache[0] === dirruns && cache[1];
															diff = nodeIndex;
														}

														// xml :nth-child(...)
														// or :nth-last-child(...) or :nth(-last)?-of-type(...)
														if (diff === false) {
															// Use the same loop as above to seek `elem` from the start
															while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

																if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

																	// Cache the index of each encountered element
																	if (useCache) {
																		outerCache = node[expando] || (node[expando] = {});

																		// Support: IE <9 only
																		// Defend against cloned attroperties (jQuery gh-1709)
																		uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

																		uniqueCache[type] = [dirruns, diff];
																	}

																	if (node === elem) {
																		break;
																	}
																}
															}
														}
													}

													// Incorporate the offset, then check against cycle size
													diff -= last;
													return diff === first || diff % first === 0 && diff / first >= 0;
												}
											};
										},

										"PSEUDO": function (pseudo, argument) {
											// pseudo-class names are case-insensitive
											// http://www.w3.org/TR/selectors/#pseudo-classes
											// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
											// Remember that setFilters inherits from pseudos
											var args,
											    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

											// The user may use createPseudo to indicate that
											// arguments are needed to create the filter function
											// just as Sizzle does
											if (fn[expando]) {
												return fn(argument);
											}

											// But maintain support for old signatures
											if (fn.length > 1) {
												args = [pseudo, pseudo, "", argument];
												return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
													var idx,
													    matched = fn(seed, argument),
													    i = matched.length;
													while (i--) {
														idx = indexOf(seed, matched[i]);
														seed[idx] = !(matches[idx] = matched[i]);
													}
												}) : function (elem) {
													return fn(elem, 0, args);
												};
											}

											return fn;
										}
									},

									pseudos: {
										// Potentially complex pseudos
										"not": markFunction(function (selector) {
											// Trim the selector passed to compile
											// to avoid treating leading and trailing
											// spaces as combinators
											var input = [],
											    results = [],
											    matcher = compile(selector.replace(rtrim, "$1"));

											return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
												var elem,
												    unmatched = matcher(seed, null, xml, []),
												    i = seed.length;

												// Match elements unmatched by `matcher`
												while (i--) {
													if (elem = unmatched[i]) {
														seed[i] = !(matches[i] = elem);
													}
												}
											}) : function (elem, context, xml) {
												input[0] = elem;
												matcher(input, null, xml, results);
												// Don't keep the element (issue #299)
												input[0] = null;
												return !results.pop();
											};
										}),

										"has": markFunction(function (selector) {
											return function (elem) {
												return Sizzle(selector, elem).length > 0;
											};
										}),

										"contains": markFunction(function (text) {
											text = text.replace(runescape, funescape);
											return function (elem) {
												return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
											};
										}),

										// "Whether an element is represented by a :lang() selector
										// is based solely on the element's language value
										// being equal to the identifier C,
										// or beginning with the identifier C immediately followed by "-".
										// The matching of C against the element's language value is performed case-insensitively.
										// The identifier C does not have to be a valid language name."
										// http://www.w3.org/TR/selectors/#lang-pseudo
										"lang": markFunction(function (lang) {
											// lang value must be a valid identifier
											if (!ridentifier.test(lang || "")) {
												Sizzle.error("unsupported lang: " + lang);
											}
											lang = lang.replace(runescape, funescape).toLowerCase();
											return function (elem) {
												var elemLang;
												do {
													if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

														elemLang = elemLang.toLowerCase();
														return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
													}
												} while ((elem = elem.parentNode) && elem.nodeType === 1);
												return false;
											};
										}),

										// Miscellaneous
										"target": function (elem) {
											var hash = window.location && window.location.hash;
											return hash && hash.slice(1) === elem.id;
										},

										"root": function (elem) {
											return elem === docElem;
										},

										"focus": function (elem) {
											return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
										},

										// Boolean properties
										"enabled": function (elem) {
											return elem.disabled === false;
										},

										"disabled": function (elem) {
											return elem.disabled === true;
										},

										"checked": function (elem) {
											// In CSS3, :checked should return both checked and selected elements
											// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
											var nodeName = elem.nodeName.toLowerCase();
											return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
										},

										"selected": function (elem) {
											// Accessing this property makes selected-by-default
											// options in Safari work properly
											if (elem.parentNode) {
												elem.parentNode.selectedIndex;
											}

											return elem.selected === true;
										},

										// Contents
										"empty": function (elem) {
											// http://www.w3.org/TR/selectors/#empty-pseudo
											// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
											//   but not by others (comment: 8; processing instruction: 7; etc.)
											// nodeType < 6 works because attributes (2) do not appear as children
											for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
												if (elem.nodeType < 6) {
													return false;
												}
											}
											return true;
										},

										"parent": function (elem) {
											return !Expr.pseudos["empty"](elem);
										},

										// Element/input types
										"header": function (elem) {
											return rheader.test(elem.nodeName);
										},

										"input": function (elem) {
											return rinputs.test(elem.nodeName);
										},

										"button": function (elem) {
											var name = elem.nodeName.toLowerCase();
											return name === "input" && elem.type === "button" || name === "button";
										},

										"text": function (elem) {
											var attr;
											return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

											// Support: IE<8
											// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
											(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
										},

										// Position-in-collection
										"first": createPositionalPseudo(function () {
											return [0];
										}),

										"last": createPositionalPseudo(function (matchIndexes, length) {
											return [length - 1];
										}),

										"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
											return [argument < 0 ? argument + length : argument];
										}),

										"even": createPositionalPseudo(function (matchIndexes, length) {
											var i = 0;
											for (; i < length; i += 2) {
												matchIndexes.push(i);
											}
											return matchIndexes;
										}),

										"odd": createPositionalPseudo(function (matchIndexes, length) {
											var i = 1;
											for (; i < length; i += 2) {
												matchIndexes.push(i);
											}
											return matchIndexes;
										}),

										"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
											var i = argument < 0 ? argument + length : argument;
											for (; --i >= 0;) {
												matchIndexes.push(i);
											}
											return matchIndexes;
										}),

										"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
											var i = argument < 0 ? argument + length : argument;
											for (; ++i < length;) {
												matchIndexes.push(i);
											}
											return matchIndexes;
										})
									}
								};

								Expr.pseudos["nth"] = Expr.pseudos["eq"];

								// Add button/input type pseudos
								for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
									Expr.pseudos[i] = createInputPseudo(i);
								}
								for (i in { submit: true, reset: true }) {
									Expr.pseudos[i] = createButtonPseudo(i);
								}

								// Easy API for creating new setFilters
								function setFilters() {}
								setFilters.prototype = Expr.filters = Expr.pseudos;
								Expr.setFilters = new setFilters();

								tokenize = Sizzle.tokenize = function (selector, parseOnly) {
									var matched,
									    match,
									    tokens,
									    type,
									    soFar,
									    groups,
									    preFilters,
									    cached = tokenCache[selector + " "];

									if (cached) {
										return parseOnly ? 0 : cached.slice(0);
									}

									soFar = selector;
									groups = [];
									preFilters = Expr.preFilter;

									while (soFar) {

										// Comma and first run
										if (!matched || (match = rcomma.exec(soFar))) {
											if (match) {
												// Don't consume trailing commas as valid
												soFar = soFar.slice(match[0].length) || soFar;
											}
											groups.push(tokens = []);
										}

										matched = false;

										// Combinators
										if (match = rcombinators.exec(soFar)) {
											matched = match.shift();
											tokens.push({
												value: matched,
												// Cast descendant combinators to space
												type: match[0].replace(rtrim, " ")
											});
											soFar = soFar.slice(matched.length);
										}

										// Filters
										for (type in Expr.filter) {
											if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
												matched = match.shift();
												tokens.push({
													value: matched,
													type: type,
													matches: match
												});
												soFar = soFar.slice(matched.length);
											}
										}

										if (!matched) {
											break;
										}
									}

									// Return the length of the invalid excess
									// if we're just parsing
									// Otherwise, throw an error or return tokens
									return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
									// Cache the tokens
									tokenCache(selector, groups).slice(0);
								};

								function toSelector(tokens) {
									var i = 0,
									    len = tokens.length,
									    selector = "";
									for (; i < len; i++) {
										selector += tokens[i].value;
									}
									return selector;
								}

								function addCombinator(matcher, combinator, base) {
									var dir = combinator.dir,
									    checkNonElements = base && dir === "parentNode",
									    doneName = done++;

									return combinator.first ?
									// Check against closest ancestor/preceding element
									function (elem, context, xml) {
										while (elem = elem[dir]) {
											if (elem.nodeType === 1 || checkNonElements) {
												return matcher(elem, context, xml);
											}
										}
									} :

									// Check against all ancestor/preceding elements
									function (elem, context, xml) {
										var oldCache,
										    uniqueCache,
										    outerCache,
										    newCache = [dirruns, doneName];

										// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
										if (xml) {
											while (elem = elem[dir]) {
												if (elem.nodeType === 1 || checkNonElements) {
													if (matcher(elem, context, xml)) {
														return true;
													}
												}
											}
										} else {
											while (elem = elem[dir]) {
												if (elem.nodeType === 1 || checkNonElements) {
													outerCache = elem[expando] || (elem[expando] = {});

													// Support: IE <9 only
													// Defend against cloned attroperties (jQuery gh-1709)
													uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

													if ((oldCache = uniqueCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

														// Assign to newCache so results back-propagate to previous elements
														return newCache[2] = oldCache[2];
													} else {
														// Reuse newcache so results back-propagate to previous elements
														uniqueCache[dir] = newCache;

														// A match means we're done; a fail means we have to keep checking
														if (newCache[2] = matcher(elem, context, xml)) {
															return true;
														}
													}
												}
											}
										}
									};
								}

								function elementMatcher(matchers) {
									return matchers.length > 1 ? function (elem, context, xml) {
										var i = matchers.length;
										while (i--) {
											if (!matchers[i](elem, context, xml)) {
												return false;
											}
										}
										return true;
									} : matchers[0];
								}

								function multipleContexts(selector, contexts, results) {
									var i = 0,
									    len = contexts.length;
									for (; i < len; i++) {
										Sizzle(selector, contexts[i], results);
									}
									return results;
								}

								function condense(unmatched, map, filter, context, xml) {
									var elem,
									    newUnmatched = [],
									    i = 0,
									    len = unmatched.length,
									    mapped = map != null;

									for (; i < len; i++) {
										if (elem = unmatched[i]) {
											if (!filter || filter(elem, context, xml)) {
												newUnmatched.push(elem);
												if (mapped) {
													map.push(i);
												}
											}
										}
									}

									return newUnmatched;
								}

								function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
									if (postFilter && !postFilter[expando]) {
										postFilter = setMatcher(postFilter);
									}
									if (postFinder && !postFinder[expando]) {
										postFinder = setMatcher(postFinder, postSelector);
									}
									return markFunction(function (seed, results, context, xml) {
										var temp,
										    i,
										    elem,
										    preMap = [],
										    postMap = [],
										    preexisting = results.length,


										// Get initial elements from seed or context
										elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


										// Prefilter to get matcher input, preserving a map for seed-results synchronization
										matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
										    matcherOut = matcher ?
										// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
										postFinder || (seed ? preFilter : preexisting || postFilter) ?

										// ...intermediate processing is necessary
										[] :

										// ...otherwise use results directly
										results : matcherIn;

										// Find primary matches
										if (matcher) {
											matcher(matcherIn, matcherOut, context, xml);
										}

										// Apply postFilter
										if (postFilter) {
											temp = condense(matcherOut, postMap);
											postFilter(temp, [], context, xml);

											// Un-match failing elements by moving them back to matcherIn
											i = temp.length;
											while (i--) {
												if (elem = temp[i]) {
													matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
												}
											}
										}

										if (seed) {
											if (postFinder || preFilter) {
												if (postFinder) {
													// Get the final matcherOut by condensing this intermediate into postFinder contexts
													temp = [];
													i = matcherOut.length;
													while (i--) {
														if (elem = matcherOut[i]) {
															// Restore matcherIn since elem is not yet a final match
															temp.push(matcherIn[i] = elem);
														}
													}
													postFinder(null, matcherOut = [], temp, xml);
												}

												// Move matched elements from seed to results to keep them synchronized
												i = matcherOut.length;
												while (i--) {
													if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

														seed[temp] = !(results[temp] = elem);
													}
												}
											}

											// Add elements to results, through postFinder if defined
										} else {
											matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
											if (postFinder) {
												postFinder(null, results, matcherOut, xml);
											} else {
												push.apply(results, matcherOut);
											}
										}
									});
								}

								function matcherFromTokens(tokens) {
									var checkContext,
									    matcher,
									    j,
									    len = tokens.length,
									    leadingRelative = Expr.relative[tokens[0].type],
									    implicitRelative = leadingRelative || Expr.relative[" "],
									    i = leadingRelative ? 1 : 0,


									// The foundational matcher ensures that elements are reachable from top-level context(s)
									matchContext = addCombinator(function (elem) {
										return elem === checkContext;
									}, implicitRelative, true),
									    matchAnyContext = addCombinator(function (elem) {
										return indexOf(checkContext, elem) > -1;
									}, implicitRelative, true),
									    matchers = [function (elem, context, xml) {
										var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
										// Avoid hanging onto element (issue #299)
										checkContext = null;
										return ret;
									}];

									for (; i < len; i++) {
										if (matcher = Expr.relative[tokens[i].type]) {
											matchers = [addCombinator(elementMatcher(matchers), matcher)];
										} else {
											matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

											// Return special upon seeing a positional matcher
											if (matcher[expando]) {
												// Find the next relative operator (if any) for proper handling
												j = ++i;
												for (; j < len; j++) {
													if (Expr.relative[tokens[j].type]) {
														break;
													}
												}
												return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
												// If the preceding token was a descendant combinator, insert an implicit any-element `*`
												tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
											}
											matchers.push(matcher);
										}
									}

									return elementMatcher(matchers);
								}

								function matcherFromGroupMatchers(elementMatchers, setMatchers) {
									var bySet = setMatchers.length > 0,
									    byElement = elementMatchers.length > 0,
									    superMatcher = function (seed, context, xml, results, outermost) {
										var elem,
										    j,
										    matcher,
										    matchedCount = 0,
										    i = "0",
										    unmatched = seed && [],
										    setMatched = [],
										    contextBackup = outermostContext,

										// We must always have either seed elements or outermost context
										elems = seed || byElement && Expr.find["TAG"]("*", outermost),

										// Use integer dirruns iff this is the outermost matcher
										dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
										    len = elems.length;

										if (outermost) {
											outermostContext = context === document || context || outermost;
										}

										// Add elements passing elementMatchers directly to results
										// Support: IE<9, Safari
										// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
										for (; i !== len && (elem = elems[i]) != null; i++) {
											if (byElement && elem) {
												j = 0;
												if (!context && elem.ownerDocument !== document) {
													setDocument(elem);
													xml = !documentIsHTML;
												}
												while (matcher = elementMatchers[j++]) {
													if (matcher(elem, context || document, xml)) {
														results.push(elem);
														break;
													}
												}
												if (outermost) {
													dirruns = dirrunsUnique;
												}
											}

											// Track unmatched elements for set filters
											if (bySet) {
												// They will have gone through all possible matchers
												if (elem = !matcher && elem) {
													matchedCount--;
												}

												// Lengthen the array for every element, matched or not
												if (seed) {
													unmatched.push(elem);
												}
											}
										}

										// `i` is now the count of elements visited above, and adding it to `matchedCount`
										// makes the latter nonnegative.
										matchedCount += i;

										// Apply set filters to unmatched elements
										// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
										// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
										// no element matchers and no seed.
										// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
										// case, which will result in a "00" `matchedCount` that differs from `i` but is also
										// numerically zero.
										if (bySet && i !== matchedCount) {
											j = 0;
											while (matcher = setMatchers[j++]) {
												matcher(unmatched, setMatched, context, xml);
											}

											if (seed) {
												// Reintegrate element matches to eliminate the need for sorting
												if (matchedCount > 0) {
													while (i--) {
														if (!(unmatched[i] || setMatched[i])) {
															setMatched[i] = pop.call(results);
														}
													}
												}

												// Discard index placeholder values to get only actual matches
												setMatched = condense(setMatched);
											}

											// Add matches to results
											push.apply(results, setMatched);

											// Seedless set matches succeeding multiple successful matchers stipulate sorting
											if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

												Sizzle.uniqueSort(results);
											}
										}

										// Override manipulation of globals by nested matchers
										if (outermost) {
											dirruns = dirrunsUnique;
											outermostContext = contextBackup;
										}

										return unmatched;
									};

									return bySet ? markFunction(superMatcher) : superMatcher;
								}

								compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
									var i,
									    setMatchers = [],
									    elementMatchers = [],
									    cached = compilerCache[selector + " "];

									if (!cached) {
										// Generate a function of recursive functions that can be used to check each element
										if (!match) {
											match = tokenize(selector);
										}
										i = match.length;
										while (i--) {
											cached = matcherFromTokens(match[i]);
											if (cached[expando]) {
												setMatchers.push(cached);
											} else {
												elementMatchers.push(cached);
											}
										}

										// Cache the compiled function
										cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

										// Save selector and tokenization
										cached.selector = selector;
									}
									return cached;
								};

								/**
         * A low-level selection function that works with Sizzle's compiled
         *  selector functions
         * @param {String|Function} selector A selector or a pre-compiled
         *  selector function built with Sizzle.compile
         * @param {Element} context
         * @param {Array} [results]
         * @param {Array} [seed] A set of elements to match against
         */
								select = Sizzle.select = function (selector, context, results, seed) {
									var i,
									    tokens,
									    token,
									    type,
									    find,
									    compiled = typeof selector === "function" && selector,
									    match = !seed && tokenize(selector = compiled.selector || selector);

									results = results || [];

									// Try to minimize operations if there is only one selector in the list and no seed
									// (the latter of which guarantees us context)
									if (match.length === 1) {

										// Reduce context if the leading compound selector is an ID
										tokens = match[0] = match[0].slice(0);
										if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

											context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
											if (!context) {
												return results;

												// Precompiled matchers will still verify ancestry, so step up a level
											} else if (compiled) {
												context = context.parentNode;
											}

											selector = selector.slice(tokens.shift().value.length);
										}

										// Fetch a seed set for right-to-left matching
										i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
										while (i--) {
											token = tokens[i];

											// Abort if we hit a combinator
											if (Expr.relative[type = token.type]) {
												break;
											}
											if (find = Expr.find[type]) {
												// Search, expanding context for leading sibling combinators
												if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

													// If seed is empty or no tokens remain, we can return early
													tokens.splice(i, 1);
													selector = seed.length && toSelector(tokens);
													if (!selector) {
														push.apply(results, seed);
														return results;
													}

													break;
												}
											}
										}
									}

									// Compile and execute a filtering function if one is not provided
									// Provide `match` to avoid retokenization if we modified the selector above
									(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
									return results;
								};

								// One-time assignments

								// Sort stability
								support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

								// Support: Chrome 14-35+
								// Always assume duplicates if they aren't passed to the comparison function
								support.detectDuplicates = !!hasDuplicate;

								// Initialize against the default document
								setDocument();

								// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
								// Detached nodes confoundingly follow *each other*
								support.sortDetached = assert(function (div1) {
									// Should return 1, but returns 4 (following)
									return div1.compareDocumentPosition(document.createElement("div")) & 1;
								});

								// Support: IE<8
								// Prevent attribute/property "interpolation"
								// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
								if (!assert(function (div) {
									div.innerHTML = "<a href='#'></a>";
									return div.firstChild.getAttribute("href") === "#";
								})) {
									addHandle("type|href|height|width", function (elem, name, isXML) {
										if (!isXML) {
											return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
										}
									});
								}

								// Support: IE<9
								// Use defaultValue in place of getAttribute("value")
								if (!support.attributes || !assert(function (div) {
									div.innerHTML = "<input/>";
									div.firstChild.setAttribute("value", "");
									return div.firstChild.getAttribute("value") === "";
								})) {
									addHandle("value", function (elem, name, isXML) {
										if (!isXML && elem.nodeName.toLowerCase() === "input") {
											return elem.defaultValue;
										}
									});
								}

								// Support: IE<9
								// Use getAttributeNode to fetch booleans when getAttribute lies
								if (!assert(function (div) {
									return div.getAttribute("disabled") == null;
								})) {
									addHandle(booleans, function (elem, name, isXML) {
										var val;
										if (!isXML) {
											return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
										}
									});
								}

								return Sizzle;
							}(window);

							jQuery.find = Sizzle;
							jQuery.expr = Sizzle.selectors;
							jQuery.expr[":"] = jQuery.expr.pseudos;
							jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
							jQuery.text = Sizzle.getText;
							jQuery.isXMLDoc = Sizzle.isXML;
							jQuery.contains = Sizzle.contains;

							var dir = function (elem, dir, until) {
								var matched = [],
								    truncate = until !== undefined;

								while ((elem = elem[dir]) && elem.nodeType !== 9) {
									if (elem.nodeType === 1) {
										if (truncate && jQuery(elem).is(until)) {
											break;
										}
										matched.push(elem);
									}
								}
								return matched;
							};

							var siblings = function (n, elem) {
								var matched = [];

								for (; n; n = n.nextSibling) {
									if (n.nodeType === 1 && n !== elem) {
										matched.push(n);
									}
								}

								return matched;
							};

							var rneedsContext = jQuery.expr.match.needsContext;

							var rsingleTag = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;

							var risSimple = /^.[^:#\[\.,]*$/;

							// Implement the identical functionality for filter and not
							function winnow(elements, qualifier, not) {
								if (jQuery.isFunction(qualifier)) {
									return jQuery.grep(elements, function (elem, i) {
										/* jshint -W018 */
										return !!qualifier.call(elem, i, elem) !== not;
									});
								}

								if (qualifier.nodeType) {
									return jQuery.grep(elements, function (elem) {
										return elem === qualifier !== not;
									});
								}

								if (typeof qualifier === "string") {
									if (risSimple.test(qualifier)) {
										return jQuery.filter(qualifier, elements, not);
									}

									qualifier = jQuery.filter(qualifier, elements);
								}

								return jQuery.grep(elements, function (elem) {
									return jQuery.inArray(elem, qualifier) > -1 !== not;
								});
							}

							jQuery.filter = function (expr, elems, not) {
								var elem = elems[0];

								if (not) {
									expr = ":not(" + expr + ")";
								}

								return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
									return elem.nodeType === 1;
								}));
							};

							jQuery.fn.extend({
								find: function (selector) {
									var i,
									    ret = [],
									    self = this,
									    len = self.length;

									if (typeof selector !== "string") {
										return this.pushStack(jQuery(selector).filter(function () {
											for (i = 0; i < len; i++) {
												if (jQuery.contains(self[i], this)) {
													return true;
												}
											}
										}));
									}

									for (i = 0; i < len; i++) {
										jQuery.find(selector, self[i], ret);
									}

									// Needed because $( selector, context ) becomes $( context ).find( selector )
									ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
									ret.selector = this.selector ? this.selector + " " + selector : selector;
									return ret;
								},
								filter: function (selector) {
									return this.pushStack(winnow(this, selector || [], false));
								},
								not: function (selector) {
									return this.pushStack(winnow(this, selector || [], true));
								},
								is: function (selector) {
									return !!winnow(this,

									// If this is a positional/relative selector, check membership in the returned set
									// so $("p:first").is("p:last") won't return true for a doc with two "p".
									typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
								}
							});

							// Initialize a jQuery object


							// A central reference to the root jQuery(document)
							var rootjQuery,


							// A simple way to check for HTML strings
							// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
							// Strict HTML recognition (#11290: must start with <)
							rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
							    init = jQuery.fn.init = function (selector, context, root) {
								var match, elem;

								// HANDLE: $(""), $(null), $(undefined), $(false)
								if (!selector) {
									return this;
								}

								// init accepts an alternate rootjQuery
								// so migrate can support jQuery.sub (gh-2101)
								root = root || rootjQuery;

								// Handle HTML strings
								if (typeof selector === "string") {
									if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {

										// Assume that strings that start and end with <> are HTML and skip the regex check
										match = [null, selector, null];
									} else {
										match = rquickExpr.exec(selector);
									}

									// Match html or make sure no context is specified for #id
									if (match && (match[1] || !context)) {

										// HANDLE: $(html) -> $(array)
										if (match[1]) {
											context = context instanceof jQuery ? context[0] : context;

											// scripts is true for back-compat
											// Intentionally let the error be thrown if parseHTML is not present
											jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

											// HANDLE: $(html, props)
											if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
												for (match in context) {

													// Properties of context are called as methods if possible
													if (jQuery.isFunction(this[match])) {
														this[match](context[match]);

														// ...and otherwise set as attributes
													} else {
														this.attr(match, context[match]);
													}
												}
											}

											return this;

											// HANDLE: $(#id)
										} else {
											elem = document.getElementById(match[2]);

											// Check parentNode to catch when Blackberry 4.6 returns
											// nodes that are no longer in the document #6963
											if (elem && elem.parentNode) {

												// Handle the case where IE and Opera return items
												// by name instead of ID
												if (elem.id !== match[2]) {
													return rootjQuery.find(selector);
												}

												// Otherwise, we inject the element directly into the jQuery object
												this.length = 1;
												this[0] = elem;
											}

											this.context = document;
											this.selector = selector;
											return this;
										}

										// HANDLE: $(expr, $(...))
									} else if (!context || context.jquery) {
										return (context || root).find(selector);

										// HANDLE: $(expr, context)
										// (which is just equivalent to: $(context).find(expr)
									} else {
										return this.constructor(context).find(selector);
									}

									// HANDLE: $(DOMElement)
								} else if (selector.nodeType) {
									this.context = this[0] = selector;
									this.length = 1;
									return this;

									// HANDLE: $(function)
									// Shortcut for document ready
								} else if (jQuery.isFunction(selector)) {
									return typeof root.ready !== "undefined" ? root.ready(selector) :

									// Execute immediately if ready is not present
									selector(jQuery);
								}

								if (selector.selector !== undefined) {
									this.selector = selector.selector;
									this.context = selector.context;
								}

								return jQuery.makeArray(selector, this);
							};

							// Give the init function the jQuery prototype for later instantiation
							init.prototype = jQuery.fn;

							// Initialize central reference
							rootjQuery = jQuery(document);

							var rparentsprev = /^(?:parents|prev(?:Until|All))/,


							// methods guaranteed to produce a unique set when starting from a unique set
							guaranteedUnique = {
								children: true,
								contents: true,
								next: true,
								prev: true
							};

							jQuery.fn.extend({
								has: function (target) {
									var i,
									    targets = jQuery(target, this),
									    len = targets.length;

									return this.filter(function () {
										for (i = 0; i < len; i++) {
											if (jQuery.contains(this, targets[i])) {
												return true;
											}
										}
									});
								},

								closest: function (selectors, context) {
									var cur,
									    i = 0,
									    l = this.length,
									    matched = [],
									    pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;

									for (; i < l; i++) {
										for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

											// Always skip document fragments
											if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 :

											// Don't pass non-elements to Sizzle
											cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

												matched.push(cur);
												break;
											}
										}
									}

									return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
								},

								// Determine the position of an element within
								// the matched set of elements
								index: function (elem) {

									// No argument, return index in parent
									if (!elem) {
										return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
									}

									// index in selector
									if (typeof elem === "string") {
										return jQuery.inArray(this[0], jQuery(elem));
									}

									// Locate the position of the desired element
									return jQuery.inArray(

									// If it receives a jQuery object, the first element is used
									elem.jquery ? elem[0] : elem, this);
								},

								add: function (selector, context) {
									return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
								},

								addBack: function (selector) {
									return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
								}
							});

							function sibling(cur, dir) {
								do {
									cur = cur[dir];
								} while (cur && cur.nodeType !== 1);

								return cur;
							}

							jQuery.each({
								parent: function (elem) {
									var parent = elem.parentNode;
									return parent && parent.nodeType !== 11 ? parent : null;
								},
								parents: function (elem) {
									return dir(elem, "parentNode");
								},
								parentsUntil: function (elem, i, until) {
									return dir(elem, "parentNode", until);
								},
								next: function (elem) {
									return sibling(elem, "nextSibling");
								},
								prev: function (elem) {
									return sibling(elem, "previousSibling");
								},
								nextAll: function (elem) {
									return dir(elem, "nextSibling");
								},
								prevAll: function (elem) {
									return dir(elem, "previousSibling");
								},
								nextUntil: function (elem, i, until) {
									return dir(elem, "nextSibling", until);
								},
								prevUntil: function (elem, i, until) {
									return dir(elem, "previousSibling", until);
								},
								siblings: function (elem) {
									return siblings((elem.parentNode || {}).firstChild, elem);
								},
								children: function (elem) {
									return siblings(elem.firstChild);
								},
								contents: function (elem) {
									return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
								}
							}, function (name, fn) {
								jQuery.fn[name] = function (until, selector) {
									var ret = jQuery.map(this, fn, until);

									if (name.slice(-5) !== "Until") {
										selector = until;
									}

									if (selector && typeof selector === "string") {
										ret = jQuery.filter(selector, ret);
									}

									if (this.length > 1) {

										// Remove duplicates
										if (!guaranteedUnique[name]) {
											ret = jQuery.uniqueSort(ret);
										}

										// Reverse order for parents* and prev-derivatives
										if (rparentsprev.test(name)) {
											ret = ret.reverse();
										}
									}

									return this.pushStack(ret);
								};
							});
							var rnotwhite = /\S+/g;

							// Convert String-formatted options into Object-formatted ones
							function createOptions(options) {
								var object = {};
								jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
									object[flag] = true;
								});
								return object;
							}

							/*
        * Create a callback list using the following parameters:
        *
        *	options: an optional list of space-separated options that will change how
        *			the callback list behaves or a more traditional option object
        *
        * By default a callback list will act like an event callback list and can be
        * "fired" multiple times.
        *
        * Possible options:
        *
        *	once:			will ensure the callback list can only be fired once (like a Deferred)
        *
        *	memory:			will keep track of previous values and will call any callback added
        *					after the list has been fired right away with the latest "memorized"
        *					values (like a Deferred)
        *
        *	unique:			will ensure a callback can only be added once (no duplicate in the list)
        *
        *	stopOnFalse:	interrupt callings when a callback returns false
        *
        */
							jQuery.Callbacks = function (options) {

								// Convert options from String-formatted to Object-formatted if needed
								// (we check in cache first)
								options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

								var // Flag to know if list is currently firing
								firing,


								// Last fire value for non-forgettable lists
								memory,


								// Flag to know if list was already fired
								fired,


								// Flag to prevent firing
								locked,


								// Actual callback list
								list = [],


								// Queue of execution data for repeatable lists
								queue = [],


								// Index of currently firing callback (modified by add/remove as needed)
								firingIndex = -1,


								// Fire callbacks
								fire = function () {

									// Enforce single-firing
									locked = options.once;

									// Execute callbacks for all pending executions,
									// respecting firingIndex overrides and runtime changes
									fired = firing = true;
									for (; queue.length; firingIndex = -1) {
										memory = queue.shift();
										while (++firingIndex < list.length) {

											// Run callback and check for early termination
											if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

												// Jump to end and forget the data so .add doesn't re-fire
												firingIndex = list.length;
												memory = false;
											}
										}
									}

									// Forget the data if we're done with it
									if (!options.memory) {
										memory = false;
									}

									firing = false;

									// Clean up if we're done firing for good
									if (locked) {

										// Keep an empty list if we have data for future add calls
										if (memory) {
											list = [];

											// Otherwise, this object is spent
										} else {
											list = "";
										}
									}
								},


								// Actual Callbacks object
								self = {

									// Add a callback or a collection of callbacks to the list
									add: function () {
										if (list) {

											// If we have memory from a past run, we should fire after adding
											if (memory && !firing) {
												firingIndex = list.length - 1;
												queue.push(memory);
											}

											(function add(args) {
												jQuery.each(args, function (_, arg) {
													if (jQuery.isFunction(arg)) {
														if (!options.unique || !self.has(arg)) {
															list.push(arg);
														}
													} else if (arg && arg.length && jQuery.type(arg) !== "string") {

														// Inspect recursively
														add(arg);
													}
												});
											})(arguments);

											if (memory && !firing) {
												fire();
											}
										}
										return this;
									},

									// Remove a callback from the list
									remove: function () {
										jQuery.each(arguments, function (_, arg) {
											var index;
											while ((index = jQuery.inArray(arg, list, index)) > -1) {
												list.splice(index, 1);

												// Handle firing indexes
												if (index <= firingIndex) {
													firingIndex--;
												}
											}
										});
										return this;
									},

									// Check if a given callback is in the list.
									// If no argument is given, return whether or not list has callbacks attached.
									has: function (fn) {
										return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
									},

									// Remove all callbacks from the list
									empty: function () {
										if (list) {
											list = [];
										}
										return this;
									},

									// Disable .fire and .add
									// Abort any current/pending executions
									// Clear all callbacks and values
									disable: function () {
										locked = queue = [];
										list = memory = "";
										return this;
									},
									disabled: function () {
										return !list;
									},

									// Disable .fire
									// Also disable .add unless we have memory (since it would have no effect)
									// Abort any pending executions
									lock: function () {
										locked = true;
										if (!memory) {
											self.disable();
										}
										return this;
									},
									locked: function () {
										return !!locked;
									},

									// Call all callbacks with the given context and arguments
									fireWith: function (context, args) {
										if (!locked) {
											args = args || [];
											args = [context, args.slice ? args.slice() : args];
											queue.push(args);
											if (!firing) {
												fire();
											}
										}
										return this;
									},

									// Call all the callbacks with the given arguments
									fire: function () {
										self.fireWith(this, arguments);
										return this;
									},

									// To know if the callbacks have already been called at least once
									fired: function () {
										return !!fired;
									}
								};

								return self;
							};

							jQuery.extend({

								Deferred: function (func) {
									var tuples = [

									// action, add listener, listener list, final state
									["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]],
									    state = "pending",
									    promise = {
										state: function () {
											return state;
										},
										always: function () {
											deferred.done(arguments).fail(arguments);
											return this;
										},
										then: function () /* fnDone, fnFail, fnProgress */{
											var fns = arguments;
											return jQuery.Deferred(function (newDefer) {
												jQuery.each(tuples, function (i, tuple) {
													var fn = jQuery.isFunction(fns[i]) && fns[i];

													// deferred[ done | fail | progress ] for forwarding actions to newDefer
													deferred[tuple[1]](function () {
														var returned = fn && fn.apply(this, arguments);
														if (returned && jQuery.isFunction(returned.promise)) {
															returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
														} else {
															newDefer[tuple[0] + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
														}
													});
												});
												fns = null;
											}).promise();
										},

										// Get a promise for this deferred
										// If obj is provided, the promise aspect is added to the object
										promise: function (obj) {
											return obj != null ? jQuery.extend(obj, promise) : promise;
										}
									},
									    deferred = {};

									// Keep pipe for back-compat
									promise.pipe = promise.then;

									// Add list-specific methods
									jQuery.each(tuples, function (i, tuple) {
										var list = tuple[2],
										    stateString = tuple[3];

										// promise[ done | fail | progress ] = list.add
										promise[tuple[1]] = list.add;

										// Handle state
										if (stateString) {
											list.add(function () {

												// state = [ resolved | rejected ]
												state = stateString;

												// [ reject_list | resolve_list ].disable; progress_list.lock
											}, tuples[i ^ 1][2].disable, tuples[2][2].lock);
										}

										// deferred[ resolve | reject | notify ]
										deferred[tuple[0]] = function () {
											deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
											return this;
										};
										deferred[tuple[0] + "With"] = list.fireWith;
									});

									// Make the deferred a promise
									promise.promise(deferred);

									// Call given func if any
									if (func) {
										func.call(deferred, deferred);
									}

									// All done!
									return deferred;
								},

								// Deferred helper
								when: function (subordinate /* , ..., subordinateN */) {
									var i = 0,
									    resolveValues = slice.call(arguments),
									    length = resolveValues.length,


									// the count of uncompleted subordinates
									remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,


									// the master Deferred.
									// If resolveValues consist of only a single Deferred, just use that.
									deferred = remaining === 1 ? subordinate : jQuery.Deferred(),


									// Update function for both resolve and progress values
									updateFunc = function (i, contexts, values) {
										return function (value) {
											contexts[i] = this;
											values[i] = arguments.length > 1 ? slice.call(arguments) : value;
											if (values === progressValues) {
												deferred.notifyWith(contexts, values);
											} else if (! --remaining) {
												deferred.resolveWith(contexts, values);
											}
										};
									},
									    progressValues,
									    progressContexts,
									    resolveContexts;

									// add listeners to Deferred subordinates; treat others as resolved
									if (length > 1) {
										progressValues = new Array(length);
										progressContexts = new Array(length);
										resolveContexts = new Array(length);
										for (; i < length; i++) {
											if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
												resolveValues[i].promise().progress(updateFunc(i, progressContexts, progressValues)).done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject);
											} else {
												--remaining;
											}
										}
									}

									// if we're not waiting on anything, resolve the master
									if (!remaining) {
										deferred.resolveWith(resolveContexts, resolveValues);
									}

									return deferred.promise();
								}
							});

							// The deferred used on DOM ready
							var readyList;

							jQuery.fn.ready = function (fn) {

								// Add the callback
								jQuery.ready.promise().done(fn);

								return this;
							};

							jQuery.extend({

								// Is the DOM ready to be used? Set to true once it occurs.
								isReady: false,

								// A counter to track how many items to wait for before
								// the ready event fires. See #6781
								readyWait: 1,

								// Hold (or release) the ready event
								holdReady: function (hold) {
									if (hold) {
										jQuery.readyWait++;
									} else {
										jQuery.ready(true);
									}
								},

								// Handle when the DOM is ready
								ready: function (wait) {

									// Abort if there are pending holds or we're already ready
									if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
										return;
									}

									// Remember that the DOM is ready
									jQuery.isReady = true;

									// If a normal DOM Ready event fired, decrement, and wait if need be
									if (wait !== true && --jQuery.readyWait > 0) {
										return;
									}

									// If there are functions bound, to execute
									readyList.resolveWith(document, [jQuery]);

									// Trigger any bound ready events
									if (jQuery.fn.triggerHandler) {
										jQuery(document).triggerHandler("ready");
										jQuery(document).off("ready");
									}
								}
							});

							/**
        * Clean-up method for dom ready events
        */
							function detach() {
								if (document.addEventListener) {
									document.removeEventListener("DOMContentLoaded", completed);
									window.removeEventListener("load", completed);
								} else {
									document.detachEvent("onreadystatechange", completed);
									window.detachEvent("onload", completed);
								}
							}

							/**
        * The ready event handler and self cleanup method
        */
							function completed() {

								// readyState === "complete" is good enough for us to call the dom ready in oldIE
								if (document.addEventListener || window.event.type === "load" || document.readyState === "complete") {

									detach();
									jQuery.ready();
								}
							}

							jQuery.ready.promise = function (obj) {
								if (!readyList) {

									readyList = jQuery.Deferred();

									// Catch cases where $(document).ready() is called
									// after the browser event has already occurred.
									// Support: IE6-10
									// Older IE sometimes signals "interactive" too soon
									if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

										// Handle it asynchronously to allow scripts the opportunity to delay ready
										window.setTimeout(jQuery.ready);

										// Standards-based browsers support DOMContentLoaded
									} else if (document.addEventListener) {

										// Use the handy event callback
										document.addEventListener("DOMContentLoaded", completed);

										// A fallback to window.onload, that will always work
										window.addEventListener("load", completed);

										// If IE event model is used
									} else {

										// Ensure firing before onload, maybe late but safe also for iframes
										document.attachEvent("onreadystatechange", completed);

										// A fallback to window.onload, that will always work
										window.attachEvent("onload", completed);

										// If IE and not a frame
										// continually check to see if the document is ready
										var top = false;

										try {
											top = window.frameElement == null && document.documentElement;
										} catch (e) {}

										if (top && top.doScroll) {
											(function doScrollCheck() {
												if (!jQuery.isReady) {

													try {

														// Use the trick by Diego Perini
														// http://javascript.nwbox.com/IEContentLoaded/
														top.doScroll("left");
													} catch (e) {
														return window.setTimeout(doScrollCheck, 50);
													}

													// detach all dom ready events
													detach();

													// and execute any waiting functions
													jQuery.ready();
												}
											})();
										}
									}
								}
								return readyList.promise(obj);
							};

							// Kick off the DOM ready check even if the user does not
							jQuery.ready.promise();

							// Support: IE<9
							// Iteration over object's inherited properties before its own
							var i;
							for (i in jQuery(support)) {
								break;
							}
							support.ownFirst = i === "0";

							// Note: most support tests are defined in their respective modules.
							// false until the test is run
							support.inlineBlockNeedsLayout = false;

							// Execute ASAP in case we need to set body.style.zoom
							jQuery(function () {

								// Minified: var a,b,c,d
								var val, div, body, container;

								body = document.getElementsByTagName("body")[0];
								if (!body || !body.style) {

									// Return for frameset docs that don't have a body
									return;
								}

								// Setup
								div = document.createElement("div");
								container = document.createElement("div");
								container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
								body.appendChild(container).appendChild(div);

								if (typeof div.style.zoom !== "undefined") {

									// Support: IE<8
									// Check if natively block-level elements act like inline-block
									// elements when setting their display to 'inline' and giving
									// them layout
									div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

									support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
									if (val) {

										// Prevent IE 6 from affecting layout for positioned elements #11048
										// Prevent IE from shrinking the body in IE 7 mode #12869
										// Support: IE<8
										body.style.zoom = 1;
									}
								}

								body.removeChild(container);
							});

							(function () {
								var div = document.createElement("div");

								// Support: IE<9
								support.deleteExpando = true;
								try {
									delete div.test;
								} catch (e) {
									support.deleteExpando = false;
								}

								// Null elements to avoid leaks in IE.
								div = null;
							})();
							var acceptData = function (elem) {
								var noData = jQuery.noData[(elem.nodeName + " ").toLowerCase()],
								    nodeType = +elem.nodeType || 1;

								// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
								return nodeType !== 1 && nodeType !== 9 ? false :

								// Nodes accept data unless otherwise specified; rejection can be conditional
								!noData || noData !== true && elem.getAttribute("classid") === noData;
							};

							var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
							    rmultiDash = /([A-Z])/g;

							function dataAttr(elem, key, data) {

								// If nothing was found internally, try to fetch any
								// data from the HTML5 data-* attribute
								if (data === undefined && elem.nodeType === 1) {

									var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();

									data = elem.getAttribute(name);

									if (typeof data === "string") {
										try {
											data = data === "true" ? true : data === "false" ? false : data === "null" ? null :

											// Only convert to a number if it doesn't change the string
											+data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
										} catch (e) {}

										// Make sure we set the data so it isn't changed later
										jQuery.data(elem, key, data);
									} else {
										data = undefined;
									}
								}

								return data;
							}

							// checks a cache object for emptiness
							function isEmptyDataObject(obj) {
								var name;
								for (name in obj) {

									// if the public data object is empty, the private is still empty
									if (name === "data" && jQuery.isEmptyObject(obj[name])) {
										continue;
									}
									if (name !== "toJSON") {
										return false;
									}
								}

								return true;
							}

							function internalData(elem, name, data, pvt /* Internal Use Only */) {
								if (!acceptData(elem)) {
									return;
								}

								var ret,
								    thisCache,
								    internalKey = jQuery.expando,


								// We have to handle DOM nodes and JS objects differently because IE6-7
								// can't GC object references properly across the DOM-JS boundary
								isNode = elem.nodeType,


								// Only DOM nodes need the global jQuery cache; JS object data is
								// attached directly to the object so GC can occur automatically
								cache = isNode ? jQuery.cache : elem,


								// Only defining an ID for JS objects if its cache already exists allows
								// the code to shortcut on the same path as a DOM node with no cache
								id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;

								// Avoid doing any more work than we need to when trying to get data on an
								// object that has no data at all
								if ((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string") {
									return;
								}

								if (!id) {

									// Only DOM nodes need a new unique ID for each element since their data
									// ends up in the global cache
									if (isNode) {
										id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;
									} else {
										id = internalKey;
									}
								}

								if (!cache[id]) {

									// Avoid exposing jQuery metadata on plain JS objects when the object
									// is serialized using JSON.stringify
									cache[id] = isNode ? {} : { toJSON: jQuery.noop };
								}

								// An object can be passed to jQuery.data instead of a key/value pair; this gets
								// shallow copied over onto the existing cache
								if (typeof name === "object" || typeof name === "function") {
									if (pvt) {
										cache[id] = jQuery.extend(cache[id], name);
									} else {
										cache[id].data = jQuery.extend(cache[id].data, name);
									}
								}

								thisCache = cache[id];

								// jQuery data() is stored in a separate object inside the object's internal data
								// cache in order to avoid key collisions between internal data and user-defined
								// data.
								if (!pvt) {
									if (!thisCache.data) {
										thisCache.data = {};
									}

									thisCache = thisCache.data;
								}

								if (data !== undefined) {
									thisCache[jQuery.camelCase(name)] = data;
								}

								// Check for both converted-to-camel and non-converted data property names
								// If a data property was specified
								if (typeof name === "string") {

									// First Try to find as-is property data
									ret = thisCache[name];

									// Test for null|undefined property data
									if (ret == null) {

										// Try to find the camelCased property
										ret = thisCache[jQuery.camelCase(name)];
									}
								} else {
									ret = thisCache;
								}

								return ret;
							}

							function internalRemoveData(elem, name, pvt) {
								if (!acceptData(elem)) {
									return;
								}

								var thisCache,
								    i,
								    isNode = elem.nodeType,


								// See jQuery.data for more information
								cache = isNode ? jQuery.cache : elem,
								    id = isNode ? elem[jQuery.expando] : jQuery.expando;

								// If there is already no cache entry for this object, there is no
								// purpose in continuing
								if (!cache[id]) {
									return;
								}

								if (name) {

									thisCache = pvt ? cache[id] : cache[id].data;

									if (thisCache) {

										// Support array or space separated string names for data keys
										if (!jQuery.isArray(name)) {

											// try the string as a key before any manipulation
											if (name in thisCache) {
												name = [name];
											} else {

												// split the camel cased version by spaces unless a key with the spaces exists
												name = jQuery.camelCase(name);
												if (name in thisCache) {
													name = [name];
												} else {
													name = name.split(" ");
												}
											}
										} else {

											// If "name" is an array of keys...
											// When data is initially created, via ("key", "val") signature,
											// keys will be converted to camelCase.
											// Since there is no way to tell _how_ a key was added, remove
											// both plain key and camelCase key. #12786
											// This will only penalize the array argument path.
											name = name.concat(jQuery.map(name, jQuery.camelCase));
										}

										i = name.length;
										while (i--) {
											delete thisCache[name[i]];
										}

										// If there is no data left in the cache, we want to continue
										// and let the cache object itself get destroyed
										if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
											return;
										}
									}
								}

								// See jQuery.data for more information
								if (!pvt) {
									delete cache[id].data;

									// Don't destroy the parent cache unless the internal data object
									// had been the only thing left in it
									if (!isEmptyDataObject(cache[id])) {
										return;
									}
								}

								// Destroy the cache
								if (isNode) {
									jQuery.cleanData([elem], true);

									// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
									/* jshint eqeqeq: false */
								} else if (support.deleteExpando || cache != cache.window) {
									/* jshint eqeqeq: true */
									delete cache[id];

									// When all else fails, undefined
								} else {
									cache[id] = undefined;
								}
							}

							jQuery.extend({
								cache: {},

								// The following elements (space-suffixed to avoid Object.prototype collisions)
								// throw uncatchable exceptions if you attempt to set expando properties
								noData: {
									"applet ": true,
									"embed ": true,

									// ...but Flash objects (which have this classid) *can* handle expandos
									"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
								},

								hasData: function (elem) {
									elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
									return !!elem && !isEmptyDataObject(elem);
								},

								data: function (elem, name, data) {
									return internalData(elem, name, data);
								},

								removeData: function (elem, name) {
									return internalRemoveData(elem, name);
								},

								// For internal use only.
								_data: function (elem, name, data) {
									return internalData(elem, name, data, true);
								},

								_removeData: function (elem, name) {
									return internalRemoveData(elem, name, true);
								}
							});

							jQuery.fn.extend({
								data: function (key, value) {
									var i,
									    name,
									    data,
									    elem = this[0],
									    attrs = elem && elem.attributes;

									// Special expections of .data basically thwart jQuery.access,
									// so implement the relevant behavior ourselves

									// Gets all values
									if (key === undefined) {
										if (this.length) {
											data = jQuery.data(elem);

											if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
												i = attrs.length;
												while (i--) {

													// Support: IE11+
													// The attrs elements can be null (#14894)
													if (attrs[i]) {
														name = attrs[i].name;
														if (name.indexOf("data-") === 0) {
															name = jQuery.camelCase(name.slice(5));
															dataAttr(elem, name, data[name]);
														}
													}
												}
												jQuery._data(elem, "parsedAttrs", true);
											}
										}

										return data;
									}

									// Sets multiple values
									if (typeof key === "object") {
										return this.each(function () {
											jQuery.data(this, key);
										});
									}

									return arguments.length > 1 ?

									// Sets one value
									this.each(function () {
										jQuery.data(this, key, value);
									}) :

									// Gets one value
									// Try to fetch any internally stored data first
									elem ? dataAttr(elem, key, jQuery.data(elem, key)) : undefined;
								},

								removeData: function (key) {
									return this.each(function () {
										jQuery.removeData(this, key);
									});
								}
							});

							jQuery.extend({
								queue: function (elem, type, data) {
									var queue;

									if (elem) {
										type = (type || "fx") + "queue";
										queue = jQuery._data(elem, type);

										// Speed up dequeue by getting out quickly if this is just a lookup
										if (data) {
											if (!queue || jQuery.isArray(data)) {
												queue = jQuery._data(elem, type, jQuery.makeArray(data));
											} else {
												queue.push(data);
											}
										}
										return queue || [];
									}
								},

								dequeue: function (elem, type) {
									type = type || "fx";

									var queue = jQuery.queue(elem, type),
									    startLength = queue.length,
									    fn = queue.shift(),
									    hooks = jQuery._queueHooks(elem, type),
									    next = function () {
										jQuery.dequeue(elem, type);
									};

									// If the fx queue is dequeued, always remove the progress sentinel
									if (fn === "inprogress") {
										fn = queue.shift();
										startLength--;
									}

									if (fn) {

										// Add a progress sentinel to prevent the fx queue from being
										// automatically dequeued
										if (type === "fx") {
											queue.unshift("inprogress");
										}

										// clear up the last queue stop function
										delete hooks.stop;
										fn.call(elem, next, hooks);
									}

									if (!startLength && hooks) {
										hooks.empty.fire();
									}
								},

								// not intended for public consumption - generates a queueHooks object,
								// or returns the current one
								_queueHooks: function (elem, type) {
									var key = type + "queueHooks";
									return jQuery._data(elem, key) || jQuery._data(elem, key, {
										empty: jQuery.Callbacks("once memory").add(function () {
											jQuery._removeData(elem, type + "queue");
											jQuery._removeData(elem, key);
										})
									});
								}
							});

							jQuery.fn.extend({
								queue: function (type, data) {
									var setter = 2;

									if (typeof type !== "string") {
										data = type;
										type = "fx";
										setter--;
									}

									if (arguments.length < setter) {
										return jQuery.queue(this[0], type);
									}

									return data === undefined ? this : this.each(function () {
										var queue = jQuery.queue(this, type, data);

										// ensure a hooks for this queue
										jQuery._queueHooks(this, type);

										if (type === "fx" && queue[0] !== "inprogress") {
											jQuery.dequeue(this, type);
										}
									});
								},
								dequeue: function (type) {
									return this.each(function () {
										jQuery.dequeue(this, type);
									});
								},
								clearQueue: function (type) {
									return this.queue(type || "fx", []);
								},

								// Get a promise resolved when queues of a certain type
								// are emptied (fx is the type by default)
								promise: function (type, obj) {
									var tmp,
									    count = 1,
									    defer = jQuery.Deferred(),
									    elements = this,
									    i = this.length,
									    resolve = function () {
										if (! --count) {
											defer.resolveWith(elements, [elements]);
										}
									};

									if (typeof type !== "string") {
										obj = type;
										type = undefined;
									}
									type = type || "fx";

									while (i--) {
										tmp = jQuery._data(elements[i], type + "queueHooks");
										if (tmp && tmp.empty) {
											count++;
											tmp.empty.add(resolve);
										}
									}
									resolve();
									return defer.promise(obj);
								}
							});

							(function () {
								var shrinkWrapBlocksVal;

								support.shrinkWrapBlocks = function () {
									if (shrinkWrapBlocksVal != null) {
										return shrinkWrapBlocksVal;
									}

									// Will be changed later if needed.
									shrinkWrapBlocksVal = false;

									// Minified: var b,c,d
									var div, body, container;

									body = document.getElementsByTagName("body")[0];
									if (!body || !body.style) {

										// Test fired too early or in an unsupported environment, exit.
										return;
									}

									// Setup
									div = document.createElement("div");
									container = document.createElement("div");
									container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
									body.appendChild(container).appendChild(div);

									// Support: IE6
									// Check if elements with layout shrink-wrap their children
									if (typeof div.style.zoom !== "undefined") {

										// Reset CSS: box-sizing; display; margin; border
										div.style.cssText =

										// Support: Firefox<29, Android 2.3
										// Vendor-prefix box-sizing
										"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";
										div.appendChild(document.createElement("div")).style.width = "5px";
										shrinkWrapBlocksVal = div.offsetWidth !== 3;
									}

									body.removeChild(container);

									return shrinkWrapBlocksVal;
								};
							})();
							var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

							var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

							var cssExpand = ["Top", "Right", "Bottom", "Left"];

							var isHidden = function (elem, el) {

								// isHidden might be called from jQuery#filter function;
								// in that case, element will be second argument
								elem = el || elem;
								return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem);
							};

							function adjustCSS(elem, prop, valueParts, tween) {
								var adjusted,
								    scale = 1,
								    maxIterations = 20,
								    currentValue = tween ? function () {
									return tween.cur();
								} : function () {
									return jQuery.css(elem, prop, "");
								},
								    initial = currentValue(),
								    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


								// Starting value computation is required for potential unit mismatches
								initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

								if (initialInUnit && initialInUnit[3] !== unit) {

									// Trust units reported by jQuery.css
									unit = unit || initialInUnit[3];

									// Make sure we update the tween properties later on
									valueParts = valueParts || [];

									// Iteratively approximate from a nonzero starting point
									initialInUnit = +initial || 1;

									do {

										// If previous iteration zeroed out, double until we get *something*.
										// Use string for doubling so we don't accidentally see scale as unchanged below
										scale = scale || ".5";

										// Adjust and apply
										initialInUnit = initialInUnit / scale;
										jQuery.style(elem, prop, initialInUnit + unit);

										// Update scale, tolerating zero or NaN from tween.cur()
										// Break the loop if scale is unchanged or perfect, or if we've just had enough.
									} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
								}

								if (valueParts) {
									initialInUnit = +initialInUnit || +initial || 0;

									// Apply relative offset (+=/-=) if specified
									adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
									if (tween) {
										tween.unit = unit;
										tween.start = initialInUnit;
										tween.end = adjusted;
									}
								}
								return adjusted;
							}

							// Multifunctional method to get and set values of a collection
							// The value/s can optionally be executed if it's a function
							var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
								var i = 0,
								    length = elems.length,
								    bulk = key == null;

								// Sets many values
								if (jQuery.type(key) === "object") {
									chainable = true;
									for (i in key) {
										access(elems, fn, i, key[i], true, emptyGet, raw);
									}

									// Sets one value
								} else if (value !== undefined) {
									chainable = true;

									if (!jQuery.isFunction(value)) {
										raw = true;
									}

									if (bulk) {

										// Bulk operations run against the entire set
										if (raw) {
											fn.call(elems, value);
											fn = null;

											// ...except when executing function values
										} else {
											bulk = fn;
											fn = function (elem, key, value) {
												return bulk.call(jQuery(elem), value);
											};
										}
									}

									if (fn) {
										for (; i < length; i++) {
											fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
										}
									}
								}

								return chainable ? elems :

								// Gets
								bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
							};
							var rcheckableType = /^(?:checkbox|radio)$/i;

							var rtagName = /<([\w:-]+)/;

							var rscriptType = /^$|\/(?:java|ecma)script/i;

							var rleadingWhitespace = /^\s+/;

							var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" + "details|dialog|figcaption|figure|footer|header|hgroup|main|" + "mark|meter|nav|output|picture|progress|section|summary|template|time|video";

							function createSafeFragment(document) {
								var list = nodeNames.split("|"),
								    safeFrag = document.createDocumentFragment();

								if (safeFrag.createElement) {
									while (list.length) {
										safeFrag.createElement(list.pop());
									}
								}
								return safeFrag;
							}

							(function () {
								var div = document.createElement("div"),
								    fragment = document.createDocumentFragment(),
								    input = document.createElement("input");

								// Setup
								div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

								// IE strips leading whitespace when .innerHTML is used
								support.leadingWhitespace = div.firstChild.nodeType === 3;

								// Make sure that tbody elements aren't automatically inserted
								// IE will insert them into empty tables
								support.tbody = !div.getElementsByTagName("tbody").length;

								// Make sure that link elements get serialized correctly by innerHTML
								// This requires a wrapper element in IE
								support.htmlSerialize = !!div.getElementsByTagName("link").length;

								// Makes sure cloning an html5 element does not cause problems
								// Where outerHTML is undefined, this still works
								support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";

								// Check if a disconnected checkbox will retain its checked
								// value of true after appended to the DOM (IE6/7)
								input.type = "checkbox";
								input.checked = true;
								fragment.appendChild(input);
								support.appendChecked = input.checked;

								// Make sure textarea (and checkbox) defaultValue is properly cloned
								// Support: IE6-IE11+
								div.innerHTML = "<textarea>x</textarea>";
								support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

								// #11217 - WebKit loses check when the name is after the checked attribute
								fragment.appendChild(div);

								// Support: Windows Web Apps (WWA)
								// `name` and `type` must use .setAttribute for WWA (#14901)
								input = document.createElement("input");
								input.setAttribute("type", "radio");
								input.setAttribute("checked", "checked");
								input.setAttribute("name", "t");

								div.appendChild(input);

								// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
								// old WebKit doesn't clone checked state correctly in fragments
								support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

								// Support: IE<9
								// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
								support.noCloneEvent = !!div.addEventListener;

								// Support: IE<9
								// Since attributes and properties are the same in IE,
								// cleanData must set properties to undefined rather than use removeAttribute
								div[jQuery.expando] = 1;
								support.attributes = !div.getAttribute(jQuery.expando);
							})();

							// We have to close these tags to support XHTML (#13200)
							var wrapMap = {
								option: [1, "<select multiple='multiple'>", "</select>"],
								legend: [1, "<fieldset>", "</fieldset>"],
								area: [1, "<map>", "</map>"],

								// Support: IE8
								param: [1, "<object>", "</object>"],
								thead: [1, "<table>", "</table>"],
								tr: [2, "<table><tbody>", "</tbody></table>"],
								col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
								td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

								// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
								// unless wrapped in a div with non-breaking characters in front of it.
								_default: support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
							};

							// Support: IE8-IE9
							wrapMap.optgroup = wrapMap.option;

							wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
							wrapMap.th = wrapMap.td;

							function getAll(context, tag) {
								var elems,
								    elem,
								    i = 0,
								    found = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== "undefined" ? context.querySelectorAll(tag || "*") : undefined;

								if (!found) {
									for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
										if (!tag || jQuery.nodeName(elem, tag)) {
											found.push(elem);
										} else {
											jQuery.merge(found, getAll(elem, tag));
										}
									}
								}

								return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
							}

							// Mark scripts as having already been evaluated
							function setGlobalEval(elems, refElements) {
								var elem,
								    i = 0;
								for (; (elem = elems[i]) != null; i++) {
									jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"));
								}
							}

							var rhtml = /<|&#?\w+;/,
							    rtbody = /<tbody/i;

							function fixDefaultChecked(elem) {
								if (rcheckableType.test(elem.type)) {
									elem.defaultChecked = elem.checked;
								}
							}

							function buildFragment(elems, context, scripts, selection, ignored) {
								var j,
								    elem,
								    contains,
								    tmp,
								    tag,
								    tbody,
								    wrap,
								    l = elems.length,


								// Ensure a safe fragment
								safe = createSafeFragment(context),
								    nodes = [],
								    i = 0;

								for (; i < l; i++) {
									elem = elems[i];

									if (elem || elem === 0) {

										// Add nodes directly
										if (jQuery.type(elem) === "object") {
											jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

											// Convert non-html into a text node
										} else if (!rhtml.test(elem)) {
											nodes.push(context.createTextNode(elem));

											// Convert html into DOM nodes
										} else {
											tmp = tmp || safe.appendChild(context.createElement("div"));

											// Deserialize a standard representation
											tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
											wrap = wrapMap[tag] || wrapMap._default;

											tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

											// Descend through wrappers to the right content
											j = wrap[0];
											while (j--) {
												tmp = tmp.lastChild;
											}

											// Manually add leading whitespace removed by IE
											if (!support.leadingWhitespace && rleadingWhitespace.test(elem)) {
												nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
											}

											// Remove IE's autoinserted <tbody> from table fragments
											if (!support.tbody) {

												// String was a <table>, *may* have spurious <tbody>
												elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild :

												// String was a bare <thead> or <tfoot>
												wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;

												j = elem && elem.childNodes.length;
												while (j--) {
													if (jQuery.nodeName(tbody = elem.childNodes[j], "tbody") && !tbody.childNodes.length) {

														elem.removeChild(tbody);
													}
												}
											}

											jQuery.merge(nodes, tmp.childNodes);

											// Fix #12392 for WebKit and IE > 9
											tmp.textContent = "";

											// Fix #12392 for oldIE
											while (tmp.firstChild) {
												tmp.removeChild(tmp.firstChild);
											}

											// Remember the top-level container for proper cleanup
											tmp = safe.lastChild;
										}
									}
								}

								// Fix #11356: Clear elements from fragment
								if (tmp) {
									safe.removeChild(tmp);
								}

								// Reset defaultChecked for any radios and checkboxes
								// about to be appended to the DOM in IE 6/7 (#8060)
								if (!support.appendChecked) {
									jQuery.grep(getAll(nodes, "input"), fixDefaultChecked);
								}

								i = 0;
								while (elem = nodes[i++]) {

									// Skip elements already in the context collection (trac-4087)
									if (selection && jQuery.inArray(elem, selection) > -1) {
										if (ignored) {
											ignored.push(elem);
										}

										continue;
									}

									contains = jQuery.contains(elem.ownerDocument, elem);

									// Append to fragment
									tmp = getAll(safe.appendChild(elem), "script");

									// Preserve script evaluation history
									if (contains) {
										setGlobalEval(tmp);
									}

									// Capture executables
									if (scripts) {
										j = 0;
										while (elem = tmp[j++]) {
											if (rscriptType.test(elem.type || "")) {
												scripts.push(elem);
											}
										}
									}
								}

								tmp = null;

								return safe;
							}

							(function () {
								var i,
								    eventName,
								    div = document.createElement("div");

								// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
								for (i in { submit: true, change: true, focusin: true }) {
									eventName = "on" + i;

									if (!(support[i] = eventName in window)) {

										// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
										div.setAttribute(eventName, "t");
										support[i] = div.attributes[eventName].expando === false;
									}
								}

								// Null elements to avoid leaks in IE.
								div = null;
							})();

							var rformElems = /^(?:input|select|textarea)$/i,
							    rkeyEvent = /^key/,
							    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
							    rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
							    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

							function returnTrue() {
								return true;
							}

							function returnFalse() {
								return false;
							}

							// Support: IE9
							// See #13393 for more info
							function safeActiveElement() {
								try {
									return document.activeElement;
								} catch (err) {}
							}

							function on(elem, types, selector, data, fn, one) {
								var origFn, type;

								// Types can be a map of types/handlers
								if (typeof types === "object") {

									// ( types-Object, selector, data )
									if (typeof selector !== "string") {

										// ( types-Object, data )
										data = data || selector;
										selector = undefined;
									}
									for (type in types) {
										on(elem, type, selector, data, types[type], one);
									}
									return elem;
								}

								if (data == null && fn == null) {

									// ( types, fn )
									fn = selector;
									data = selector = undefined;
								} else if (fn == null) {
									if (typeof selector === "string") {

										// ( types, selector, fn )
										fn = data;
										data = undefined;
									} else {

										// ( types, data, fn )
										fn = data;
										data = selector;
										selector = undefined;
									}
								}
								if (fn === false) {
									fn = returnFalse;
								} else if (!fn) {
									return elem;
								}

								if (one === 1) {
									origFn = fn;
									fn = function (event) {

										// Can use an empty set, since event contains the info
										jQuery().off(event);
										return origFn.apply(this, arguments);
									};

									// Use same guid so caller can remove using origFn
									fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
								}
								return elem.each(function () {
									jQuery.event.add(this, types, fn, data, selector);
								});
							}

							/*
        * Helper functions for managing events -- not part of the public interface.
        * Props to Dean Edwards' addEvent library for many of the ideas.
        */
							jQuery.event = {

								global: {},

								add: function (elem, types, handler, data, selector) {
									var tmp,
									    events,
									    t,
									    handleObjIn,
									    special,
									    eventHandle,
									    handleObj,
									    handlers,
									    type,
									    namespaces,
									    origType,
									    elemData = jQuery._data(elem);

									// Don't attach events to noData or text/comment nodes (but allow plain objects)
									if (!elemData) {
										return;
									}

									// Caller can pass in an object of custom data in lieu of the handler
									if (handler.handler) {
										handleObjIn = handler;
										handler = handleObjIn.handler;
										selector = handleObjIn.selector;
									}

									// Make sure that the handler has a unique ID, used to find/remove it later
									if (!handler.guid) {
										handler.guid = jQuery.guid++;
									}

									// Init the element's event structure and main handler, if this is the first
									if (!(events = elemData.events)) {
										events = elemData.events = {};
									}
									if (!(eventHandle = elemData.handle)) {
										eventHandle = elemData.handle = function (e) {

											// Discard the second event of a jQuery.event.trigger() and
											// when an event is called after a page has unloaded
											return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
										};

										// Add elem as a property of the handle fn to prevent a memory leak
										// with IE non-native events
										eventHandle.elem = elem;
									}

									// Handle multiple events separated by a space
									types = (types || "").match(rnotwhite) || [""];
									t = types.length;
									while (t--) {
										tmp = rtypenamespace.exec(types[t]) || [];
										type = origType = tmp[1];
										namespaces = (tmp[2] || "").split(".").sort();

										// There *must* be a type, no attaching namespace-only handlers
										if (!type) {
											continue;
										}

										// If event changes its type, use the special event handlers for the changed type
										special = jQuery.event.special[type] || {};

										// If selector defined, determine special event api type, otherwise given type
										type = (selector ? special.delegateType : special.bindType) || type;

										// Update special based on newly reset type
										special = jQuery.event.special[type] || {};

										// handleObj is passed to all event handlers
										handleObj = jQuery.extend({
											type: type,
											origType: origType,
											data: data,
											handler: handler,
											guid: handler.guid,
											selector: selector,
											needsContext: selector && jQuery.expr.match.needsContext.test(selector),
											namespace: namespaces.join(".")
										}, handleObjIn);

										// Init the event handler queue if we're the first
										if (!(handlers = events[type])) {
											handlers = events[type] = [];
											handlers.delegateCount = 0;

											// Only use addEventListener/attachEvent if the special events handler returns false
											if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

												// Bind the global event handler to the element
												if (elem.addEventListener) {
													elem.addEventListener(type, eventHandle, false);
												} else if (elem.attachEvent) {
													elem.attachEvent("on" + type, eventHandle);
												}
											}
										}

										if (special.add) {
											special.add.call(elem, handleObj);

											if (!handleObj.handler.guid) {
												handleObj.handler.guid = handler.guid;
											}
										}

										// Add to the element's handler list, delegates in front
										if (selector) {
											handlers.splice(handlers.delegateCount++, 0, handleObj);
										} else {
											handlers.push(handleObj);
										}

										// Keep track of which events have ever been used, for event optimization
										jQuery.event.global[type] = true;
									}

									// Nullify elem to prevent memory leaks in IE
									elem = null;
								},

								// Detach an event or set of events from an element
								remove: function (elem, types, handler, selector, mappedTypes) {
									var j,
									    handleObj,
									    tmp,
									    origCount,
									    t,
									    events,
									    special,
									    handlers,
									    type,
									    namespaces,
									    origType,
									    elemData = jQuery.hasData(elem) && jQuery._data(elem);

									if (!elemData || !(events = elemData.events)) {
										return;
									}

									// Once for each type.namespace in types; type may be omitted
									types = (types || "").match(rnotwhite) || [""];
									t = types.length;
									while (t--) {
										tmp = rtypenamespace.exec(types[t]) || [];
										type = origType = tmp[1];
										namespaces = (tmp[2] || "").split(".").sort();

										// Unbind all events (on this namespace, if provided) for the element
										if (!type) {
											for (type in events) {
												jQuery.event.remove(elem, type + types[t], handler, selector, true);
											}
											continue;
										}

										special = jQuery.event.special[type] || {};
										type = (selector ? special.delegateType : special.bindType) || type;
										handlers = events[type] || [];
										tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

										// Remove matching events
										origCount = j = handlers.length;
										while (j--) {
											handleObj = handlers[j];

											if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
												handlers.splice(j, 1);

												if (handleObj.selector) {
													handlers.delegateCount--;
												}
												if (special.remove) {
													special.remove.call(elem, handleObj);
												}
											}
										}

										// Remove generic event handler if we removed something and no more handlers exist
										// (avoids potential for endless recursion during removal of special event handlers)
										if (origCount && !handlers.length) {
											if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

												jQuery.removeEvent(elem, type, elemData.handle);
											}

											delete events[type];
										}
									}

									// Remove the expando if it's no longer used
									if (jQuery.isEmptyObject(events)) {
										delete elemData.handle;

										// removeData also checks for emptiness and clears the expando if empty
										// so use it instead of delete
										jQuery._removeData(elem, "events");
									}
								},

								trigger: function (event, data, elem, onlyHandlers) {
									var handle,
									    ontype,
									    cur,
									    bubbleType,
									    special,
									    tmp,
									    i,
									    eventPath = [elem || document],
									    type = hasOwn.call(event, "type") ? event.type : event,
									    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

									cur = tmp = elem = elem || document;

									// Don't do events on text and comment nodes
									if (elem.nodeType === 3 || elem.nodeType === 8) {
										return;
									}

									// focus/blur morphs to focusin/out; ensure we're not firing them right now
									if (rfocusMorph.test(type + jQuery.event.triggered)) {
										return;
									}

									if (type.indexOf(".") > -1) {

										// Namespaced trigger; create a regexp to match event type in handle()
										namespaces = type.split(".");
										type = namespaces.shift();
										namespaces.sort();
									}
									ontype = type.indexOf(":") < 0 && "on" + type;

									// Caller can pass in a jQuery.Event object, Object, or just an event type string
									event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

									// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
									event.isTrigger = onlyHandlers ? 2 : 3;
									event.namespace = namespaces.join(".");
									event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

									// Clean up the event in case it is being reused
									event.result = undefined;
									if (!event.target) {
										event.target = elem;
									}

									// Clone any incoming data and prepend the event, creating the handler arg list
									data = data == null ? [event] : jQuery.makeArray(data, [event]);

									// Allow special events to draw outside the lines
									special = jQuery.event.special[type] || {};
									if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
										return;
									}

									// Determine event propagation path in advance, per W3C events spec (#9951)
									// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
									if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

										bubbleType = special.delegateType || type;
										if (!rfocusMorph.test(bubbleType + type)) {
											cur = cur.parentNode;
										}
										for (; cur; cur = cur.parentNode) {
											eventPath.push(cur);
											tmp = cur;
										}

										// Only add window if we got to document (e.g., not plain obj or detached DOM)
										if (tmp === (elem.ownerDocument || document)) {
											eventPath.push(tmp.defaultView || tmp.parentWindow || window);
										}
									}

									// Fire handlers on the event path
									i = 0;
									while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

										event.type = i > 1 ? bubbleType : special.bindType || type;

										// jQuery handler
										handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");

										if (handle) {
											handle.apply(cur, data);
										}

										// Native handler
										handle = ontype && cur[ontype];
										if (handle && handle.apply && acceptData(cur)) {
											event.result = handle.apply(cur, data);
											if (event.result === false) {
												event.preventDefault();
											}
										}
									}
									event.type = type;

									// If nobody prevented the default action, do it now
									if (!onlyHandlers && !event.isDefaultPrevented()) {

										if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

											// Call a native DOM method on the target with the same name name as the event.
											// Can't use an .isFunction() check here because IE6/7 fails that test.
											// Don't do default actions on window, that's where global variables be (#6170)
											if (ontype && elem[type] && !jQuery.isWindow(elem)) {

												// Don't re-trigger an onFOO event when we call its FOO() method
												tmp = elem[ontype];

												if (tmp) {
													elem[ontype] = null;
												}

												// Prevent re-triggering of the same event, since we already bubbled it above
												jQuery.event.triggered = type;
												try {
													elem[type]();
												} catch (e) {

													// IE<9 dies on focus/blur to hidden element (#1486,#12518)
													// only reproducible on winXP IE8 native, not IE9 in IE8 mode
												}
												jQuery.event.triggered = undefined;

												if (tmp) {
													elem[ontype] = tmp;
												}
											}
										}
									}

									return event.result;
								},

								dispatch: function (event) {

									// Make a writable jQuery.Event from the native event object
									event = jQuery.event.fix(event);

									var i,
									    j,
									    ret,
									    matched,
									    handleObj,
									    handlerQueue = [],
									    args = slice.call(arguments),
									    handlers = (jQuery._data(this, "events") || {})[event.type] || [],
									    special = jQuery.event.special[event.type] || {};

									// Use the fix-ed jQuery.Event rather than the (read-only) native event
									args[0] = event;
									event.delegateTarget = this;

									// Call the preDispatch hook for the mapped type, and let it bail if desired
									if (special.preDispatch && special.preDispatch.call(this, event) === false) {
										return;
									}

									// Determine handlers
									handlerQueue = jQuery.event.handlers.call(this, event, handlers);

									// Run delegates first; they may want to stop propagation beneath us
									i = 0;
									while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
										event.currentTarget = matched.elem;

										j = 0;
										while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

											// Triggered event must either 1) have no namespace, or 2) have namespace(s)
											// a subset or equal to those in the bound event (both can have no namespace).
											if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

												event.handleObj = handleObj;
												event.data = handleObj.data;

												ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

												if (ret !== undefined) {
													if ((event.result = ret) === false) {
														event.preventDefault();
														event.stopPropagation();
													}
												}
											}
										}
									}

									// Call the postDispatch hook for the mapped type
									if (special.postDispatch) {
										special.postDispatch.call(this, event);
									}

									return event.result;
								},

								handlers: function (event, handlers) {
									var i,
									    matches,
									    sel,
									    handleObj,
									    handlerQueue = [],
									    delegateCount = handlers.delegateCount,
									    cur = event.target;

									// Support (at least): Chrome, IE9
									// Find delegate handlers
									// Black-hole SVG <use> instance trees (#13180)
									//
									// Support: Firefox<=42+
									// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
									if (delegateCount && cur.nodeType && (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

										/* jshint eqeqeq: false */
										for (; cur != this; cur = cur.parentNode || this) {
											/* jshint eqeqeq: true */

											// Don't check non-elements (#13208)
											// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
											if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
												matches = [];
												for (i = 0; i < delegateCount; i++) {
													handleObj = handlers[i];

													// Don't conflict with Object.prototype properties (#13203)
													sel = handleObj.selector + " ";

													if (matches[sel] === undefined) {
														matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
													}
													if (matches[sel]) {
														matches.push(handleObj);
													}
												}
												if (matches.length) {
													handlerQueue.push({ elem: cur, handlers: matches });
												}
											}
										}
									}

									// Add the remaining (directly-bound) handlers
									if (delegateCount < handlers.length) {
										handlerQueue.push({ elem: this, handlers: handlers.slice(delegateCount) });
									}

									return handlerQueue;
								},

								fix: function (event) {
									if (event[jQuery.expando]) {
										return event;
									}

									// Create a writable copy of the event object and normalize some properties
									var i,
									    prop,
									    copy,
									    type = event.type,
									    originalEvent = event,
									    fixHook = this.fixHooks[type];

									if (!fixHook) {
										this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
									}
									copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

									event = new jQuery.Event(originalEvent);

									i = copy.length;
									while (i--) {
										prop = copy[i];
										event[prop] = originalEvent[prop];
									}

									// Support: IE<9
									// Fix target property (#1925)
									if (!event.target) {
										event.target = originalEvent.srcElement || document;
									}

									// Support: Safari 6-8+
									// Target should not be a text node (#504, #13143)
									if (event.target.nodeType === 3) {
										event.target = event.target.parentNode;
									}

									// Support: IE<9
									// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
									event.metaKey = !!event.metaKey;

									return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
								},

								// Includes some event props shared by KeyEvent and MouseEvent
								props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " + "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

								fixHooks: {},

								keyHooks: {
									props: "char charCode key keyCode".split(" "),
									filter: function (event, original) {

										// Add which for key events
										if (event.which == null) {
											event.which = original.charCode != null ? original.charCode : original.keyCode;
										}

										return event;
									}
								},

								mouseHooks: {
									props: ("button buttons clientX clientY fromElement offsetX offsetY " + "pageX pageY screenX screenY toElement").split(" "),
									filter: function (event, original) {
										var body,
										    eventDoc,
										    doc,
										    button = original.button,
										    fromElement = original.fromElement;

										// Calculate pageX/Y if missing and clientX/Y available
										if (event.pageX == null && original.clientX != null) {
											eventDoc = event.target.ownerDocument || document;
											doc = eventDoc.documentElement;
											body = eventDoc.body;

											event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
											event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
										}

										// Add relatedTarget, if necessary
										if (!event.relatedTarget && fromElement) {
											event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
										}

										// Add which for click: 1 === left; 2 === middle; 3 === right
										// Note: button is not normalized, so don't use it
										if (!event.which && button !== undefined) {
											event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
										}

										return event;
									}
								},

								special: {
									load: {

										// Prevent triggered image.load events from bubbling to window.load
										noBubble: true
									},
									focus: {

										// Fire native event if possible so blur/focus sequence is correct
										trigger: function () {
											if (this !== safeActiveElement() && this.focus) {
												try {
													this.focus();
													return false;
												} catch (e) {

													// Support: IE<9
													// If we error on focus to hidden element (#1486, #12518),
													// let .trigger() run the handlers
												}
											}
										},
										delegateType: "focusin"
									},
									blur: {
										trigger: function () {
											if (this === safeActiveElement() && this.blur) {
												this.blur();
												return false;
											}
										},
										delegateType: "focusout"
									},
									click: {

										// For checkbox, fire native event so checked state will be right
										trigger: function () {
											if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
												this.click();
												return false;
											}
										},

										// For cross-browser consistency, don't fire native .click() on links
										_default: function (event) {
											return jQuery.nodeName(event.target, "a");
										}
									},

									beforeunload: {
										postDispatch: function (event) {

											// Support: Firefox 20+
											// Firefox doesn't alert if the returnValue field is not set.
											if (event.result !== undefined && event.originalEvent) {
												event.originalEvent.returnValue = event.result;
											}
										}
									}
								},

								// Piggyback on a donor event to simulate a different one
								simulate: function (type, elem, event) {
									var e = jQuery.extend(new jQuery.Event(), event, {
										type: type,
										isSimulated: true

										// Previously, `originalEvent: {}` was set here, so stopPropagation call
										// would not be triggered on donor event, since in our own
										// jQuery.event.stopPropagation function we had a check for existence of
										// originalEvent.stopPropagation method, so, consequently it would be a noop.
										//
										// Guard for simulated events was moved to jQuery.event.stopPropagation function
										// since `originalEvent` should point to the original event for the
										// constancy with other events and for more focused logic
									});

									jQuery.event.trigger(e, null, elem);

									if (e.isDefaultPrevented()) {
										event.preventDefault();
									}
								}
							};

							jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {

								// This "if" is needed for plain objects
								if (elem.removeEventListener) {
									elem.removeEventListener(type, handle);
								}
							} : function (elem, type, handle) {
								var name = "on" + type;

								if (elem.detachEvent) {

									// #8545, #7054, preventing memory leaks for custom events in IE6-8
									// detachEvent needed property on element, by name of that event,
									// to properly expose it to GC
									if (typeof elem[name] === "undefined") {
										elem[name] = null;
									}

									elem.detachEvent(name, handle);
								}
							};

							jQuery.Event = function (src, props) {

								// Allow instantiation without the 'new' keyword
								if (!(this instanceof jQuery.Event)) {
									return new jQuery.Event(src, props);
								}

								// Event object
								if (src && src.type) {
									this.originalEvent = src;
									this.type = src.type;

									// Events bubbling up the document may have been marked as prevented
									// by a handler lower down the tree; reflect the correct value.
									this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

									// Support: IE < 9, Android < 4.0
									src.returnValue === false ? returnTrue : returnFalse;

									// Event type
								} else {
									this.type = src;
								}

								// Put explicitly provided properties onto the event object
								if (props) {
									jQuery.extend(this, props);
								}

								// Create a timestamp if incoming event doesn't have one
								this.timeStamp = src && src.timeStamp || jQuery.now();

								// Mark it as fixed
								this[jQuery.expando] = true;
							};

							// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
							// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
							jQuery.Event.prototype = {
								constructor: jQuery.Event,
								isDefaultPrevented: returnFalse,
								isPropagationStopped: returnFalse,
								isImmediatePropagationStopped: returnFalse,

								preventDefault: function () {
									var e = this.originalEvent;

									this.isDefaultPrevented = returnTrue;
									if (!e) {
										return;
									}

									// If preventDefault exists, run it on the original event
									if (e.preventDefault) {
										e.preventDefault();

										// Support: IE
										// Otherwise set the returnValue property of the original event to false
									} else {
										e.returnValue = false;
									}
								},
								stopPropagation: function () {
									var e = this.originalEvent;

									this.isPropagationStopped = returnTrue;

									if (!e || this.isSimulated) {
										return;
									}

									// If stopPropagation exists, run it on the original event
									if (e.stopPropagation) {
										e.stopPropagation();
									}

									// Support: IE
									// Set the cancelBubble property of the original event to true
									e.cancelBubble = true;
								},
								stopImmediatePropagation: function () {
									var e = this.originalEvent;

									this.isImmediatePropagationStopped = returnTrue;

									if (e && e.stopImmediatePropagation) {
										e.stopImmediatePropagation();
									}

									this.stopPropagation();
								}
							};

							// Create mouseenter/leave events using mouseover/out and event-time checks
							// so that event delegation works in jQuery.
							// Do the same for pointerenter/pointerleave and pointerover/pointerout
							//
							// Support: Safari 7 only
							// Safari sends mouseenter too often; see:
							// https://code.google.com/p/chromium/issues/detail?id=470258
							// for the description of the bug (it existed in older Chrome versions as well).
							jQuery.each({
								mouseenter: "mouseover",
								mouseleave: "mouseout",
								pointerenter: "pointerover",
								pointerleave: "pointerout"
							}, function (orig, fix) {
								jQuery.event.special[orig] = {
									delegateType: fix,
									bindType: fix,

									handle: function (event) {
										var ret,
										    target = this,
										    related = event.relatedTarget,
										    handleObj = event.handleObj;

										// For mouseenter/leave call the handler if related is outside the target.
										// NB: No relatedTarget if the mouse left/entered the browser window
										if (!related || related !== target && !jQuery.contains(target, related)) {
											event.type = handleObj.origType;
											ret = handleObj.handler.apply(this, arguments);
											event.type = fix;
										}
										return ret;
									}
								};
							});

							// IE submit delegation
							if (!support.submit) {

								jQuery.event.special.submit = {
									setup: function () {

										// Only need this for delegated form submit events
										if (jQuery.nodeName(this, "form")) {
											return false;
										}

										// Lazy-add a submit handler when a descendant form may potentially be submitted
										jQuery.event.add(this, "click._submit keypress._submit", function (e) {

											// Node name check avoids a VML-related crash in IE (#9807)
											var elem = e.target,
											    form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ?

											// Support: IE <=8
											// We use jQuery.prop instead of elem.form
											// to allow fixing the IE8 delegated submit issue (gh-2332)
											// by 3rd party polyfills/workarounds.
											jQuery.prop(elem, "form") : undefined;

											if (form && !jQuery._data(form, "submit")) {
												jQuery.event.add(form, "submit._submit", function (event) {
													event._submitBubble = true;
												});
												jQuery._data(form, "submit", true);
											}
										});

										// return undefined since we don't need an event listener
									},

									postDispatch: function (event) {

										// If form was submitted by the user, bubble the event up the tree
										if (event._submitBubble) {
											delete event._submitBubble;
											if (this.parentNode && !event.isTrigger) {
												jQuery.event.simulate("submit", this.parentNode, event);
											}
										}
									},

									teardown: function () {

										// Only need this for delegated form submit events
										if (jQuery.nodeName(this, "form")) {
											return false;
										}

										// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
										jQuery.event.remove(this, "._submit");
									}
								};
							}

							// IE change delegation and checkbox/radio fix
							if (!support.change) {

								jQuery.event.special.change = {

									setup: function () {

										if (rformElems.test(this.nodeName)) {

											// IE doesn't fire change on a check/radio until blur; trigger it on click
											// after a propertychange. Eat the blur-change in special.change.handle.
											// This still fires onchange a second time for check/radio after blur.
											if (this.type === "checkbox" || this.type === "radio") {
												jQuery.event.add(this, "propertychange._change", function (event) {
													if (event.originalEvent.propertyName === "checked") {
														this._justChanged = true;
													}
												});
												jQuery.event.add(this, "click._change", function (event) {
													if (this._justChanged && !event.isTrigger) {
														this._justChanged = false;
													}

													// Allow triggered, simulated change events (#11500)
													jQuery.event.simulate("change", this, event);
												});
											}
											return false;
										}

										// Delegated event; lazy-add a change handler on descendant inputs
										jQuery.event.add(this, "beforeactivate._change", function (e) {
											var elem = e.target;

											if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "change")) {
												jQuery.event.add(elem, "change._change", function (event) {
													if (this.parentNode && !event.isSimulated && !event.isTrigger) {
														jQuery.event.simulate("change", this.parentNode, event);
													}
												});
												jQuery._data(elem, "change", true);
											}
										});
									},

									handle: function (event) {
										var elem = event.target;

										// Swallow native change events from checkbox/radio, we already triggered them above
										if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {

											return event.handleObj.handler.apply(this, arguments);
										}
									},

									teardown: function () {
										jQuery.event.remove(this, "._change");

										return !rformElems.test(this.nodeName);
									}
								};
							}

							// Support: Firefox
							// Firefox doesn't have focus(in | out) events
							// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
							//
							// Support: Chrome, Safari
							// focus(in | out) events fire after focus & blur events,
							// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
							// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
							if (!support.focusin) {
								jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

									// Attach a single capturing handler on the document while someone wants focusin/focusout
									var handler = function (event) {
										jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
									};

									jQuery.event.special[fix] = {
										setup: function () {
											var doc = this.ownerDocument || this,
											    attaches = jQuery._data(doc, fix);

											if (!attaches) {
												doc.addEventListener(orig, handler, true);
											}
											jQuery._data(doc, fix, (attaches || 0) + 1);
										},
										teardown: function () {
											var doc = this.ownerDocument || this,
											    attaches = jQuery._data(doc, fix) - 1;

											if (!attaches) {
												doc.removeEventListener(orig, handler, true);
												jQuery._removeData(doc, fix);
											} else {
												jQuery._data(doc, fix, attaches);
											}
										}
									};
								});
							}

							jQuery.fn.extend({

								on: function (types, selector, data, fn) {
									return on(this, types, selector, data, fn);
								},
								one: function (types, selector, data, fn) {
									return on(this, types, selector, data, fn, 1);
								},
								off: function (types, selector, fn) {
									var handleObj, type;
									if (types && types.preventDefault && types.handleObj) {

										// ( event )  dispatched jQuery.Event
										handleObj = types.handleObj;
										jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
										return this;
									}
									if (typeof types === "object") {

										// ( types-object [, selector] )
										for (type in types) {
											this.off(type, selector, types[type]);
										}
										return this;
									}
									if (selector === false || typeof selector === "function") {

										// ( types [, fn] )
										fn = selector;
										selector = undefined;
									}
									if (fn === false) {
										fn = returnFalse;
									}
									return this.each(function () {
										jQuery.event.remove(this, types, fn, selector);
									});
								},

								trigger: function (type, data) {
									return this.each(function () {
										jQuery.event.trigger(type, data, this);
									});
								},
								triggerHandler: function (type, data) {
									var elem = this[0];
									if (elem) {
										return jQuery.event.trigger(type, data, elem, true);
									}
								}
							});

							var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
							    rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
							    rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,


							// Support: IE 10-11, Edge 10240+
							// In IE/Edge using regex groups here causes severe slowdowns.
							// See https://connect.microsoft.com/IE/feedback/details/1736512/
							rnoInnerhtml = /<script|<style|<link/i,


							// checked="checked" or checked
							rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
							    rscriptTypeMasked = /^true\/(.*)/,
							    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
							    safeFragment = createSafeFragment(document),
							    fragmentDiv = safeFragment.appendChild(document.createElement("div"));

							// Support: IE<8
							// Manipulating tables requires a tbody
							function manipulationTarget(elem, content) {
								return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
							}

							// Replace/restore the type attribute of script elements for safe DOM manipulation
							function disableScript(elem) {
								elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
								return elem;
							}
							function restoreScript(elem) {
								var match = rscriptTypeMasked.exec(elem.type);
								if (match) {
									elem.type = match[1];
								} else {
									elem.removeAttribute("type");
								}
								return elem;
							}

							function cloneCopyEvent(src, dest) {
								if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
									return;
								}

								var type,
								    i,
								    l,
								    oldData = jQuery._data(src),
								    curData = jQuery._data(dest, oldData),
								    events = oldData.events;

								if (events) {
									delete curData.handle;
									curData.events = {};

									for (type in events) {
										for (i = 0, l = events[type].length; i < l; i++) {
											jQuery.event.add(dest, type, events[type][i]);
										}
									}
								}

								// make the cloned public data object a copy from the original
								if (curData.data) {
									curData.data = jQuery.extend({}, curData.data);
								}
							}

							function fixCloneNodeIssues(src, dest) {
								var nodeName, e, data;

								// We do not need to do anything for non-Elements
								if (dest.nodeType !== 1) {
									return;
								}

								nodeName = dest.nodeName.toLowerCase();

								// IE6-8 copies events bound via attachEvent when using cloneNode.
								if (!support.noCloneEvent && dest[jQuery.expando]) {
									data = jQuery._data(dest);

									for (e in data.events) {
										jQuery.removeEvent(dest, e, data.handle);
									}

									// Event data gets referenced instead of copied if the expando gets copied too
									dest.removeAttribute(jQuery.expando);
								}

								// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
								if (nodeName === "script" && dest.text !== src.text) {
									disableScript(dest).text = src.text;
									restoreScript(dest);

									// IE6-10 improperly clones children of object elements using classid.
									// IE10 throws NoModificationAllowedError if parent is null, #12132.
								} else if (nodeName === "object") {
									if (dest.parentNode) {
										dest.outerHTML = src.outerHTML;
									}

									// This path appears unavoidable for IE9. When cloning an object
									// element in IE9, the outerHTML strategy above is not sufficient.
									// If the src has innerHTML and the destination does not,
									// copy the src.innerHTML into the dest.innerHTML. #10324
									if (support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
										dest.innerHTML = src.innerHTML;
									}
								} else if (nodeName === "input" && rcheckableType.test(src.type)) {

									// IE6-8 fails to persist the checked state of a cloned checkbox
									// or radio button. Worse, IE6-7 fail to give the cloned element
									// a checked appearance if the defaultChecked value isn't also set

									dest.defaultChecked = dest.checked = src.checked;

									// IE6-7 get confused and end up setting the value of a cloned
									// checkbox/radio button to an empty string instead of "on"
									if (dest.value !== src.value) {
										dest.value = src.value;
									}

									// IE6-8 fails to return the selected option to the default selected
									// state when cloning options
								} else if (nodeName === "option") {
									dest.defaultSelected = dest.selected = src.defaultSelected;

									// IE6-8 fails to set the defaultValue to the correct value when
									// cloning other types of input fields
								} else if (nodeName === "input" || nodeName === "textarea") {
									dest.defaultValue = src.defaultValue;
								}
							}

							function domManip(collection, args, callback, ignored) {

								// Flatten any nested arrays
								args = concat.apply([], args);

								var first,
								    node,
								    hasScripts,
								    scripts,
								    doc,
								    fragment,
								    i = 0,
								    l = collection.length,
								    iNoClone = l - 1,
								    value = args[0],
								    isFunction = jQuery.isFunction(value);

								// We can't cloneNode fragments that contain checked, in WebKit
								if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
									return collection.each(function (index) {
										var self = collection.eq(index);
										if (isFunction) {
											args[0] = value.call(this, index, self.html());
										}
										domManip(self, args, callback, ignored);
									});
								}

								if (l) {
									fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
									first = fragment.firstChild;

									if (fragment.childNodes.length === 1) {
										fragment = first;
									}

									// Require either new content or an interest in ignored elements to invoke the callback
									if (first || ignored) {
										scripts = jQuery.map(getAll(fragment, "script"), disableScript);
										hasScripts = scripts.length;

										// Use the original fragment for the last item
										// instead of the first because it can end up
										// being emptied incorrectly in certain situations (#8070).
										for (; i < l; i++) {
											node = fragment;

											if (i !== iNoClone) {
												node = jQuery.clone(node, true, true);

												// Keep references to cloned scripts for later restoration
												if (hasScripts) {

													// Support: Android<4.1, PhantomJS<2
													// push.apply(_, arraylike) throws on ancient WebKit
													jQuery.merge(scripts, getAll(node, "script"));
												}
											}

											callback.call(collection[i], node, i);
										}

										if (hasScripts) {
											doc = scripts[scripts.length - 1].ownerDocument;

											// Reenable scripts
											jQuery.map(scripts, restoreScript);

											// Evaluate executable scripts on first document insertion
											for (i = 0; i < hasScripts; i++) {
												node = scripts[i];
												if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {

													if (node.src) {

														// Optional AJAX dependency, but won't run scripts if not present
														if (jQuery._evalUrl) {
															jQuery._evalUrl(node.src);
														}
													} else {
														jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""));
													}
												}
											}
										}

										// Fix #11809: Avoid leaking memory
										fragment = first = null;
									}
								}

								return collection;
							}

							function remove(elem, selector, keepData) {
								var node,
								    elems = selector ? jQuery.filter(selector, elem) : elem,
								    i = 0;

								for (; (node = elems[i]) != null; i++) {

									if (!keepData && node.nodeType === 1) {
										jQuery.cleanData(getAll(node));
									}

									if (node.parentNode) {
										if (keepData && jQuery.contains(node.ownerDocument, node)) {
											setGlobalEval(getAll(node, "script"));
										}
										node.parentNode.removeChild(node);
									}
								}

								return elem;
							}

							jQuery.extend({
								htmlPrefilter: function (html) {
									return html.replace(rxhtmlTag, "<$1></$2>");
								},

								clone: function (elem, dataAndEvents, deepDataAndEvents) {
									var destElements,
									    node,
									    clone,
									    i,
									    srcElements,
									    inPage = jQuery.contains(elem.ownerDocument, elem);

									if (support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {

										clone = elem.cloneNode(true);

										// IE<=8 does not properly clone detached, unknown element nodes
									} else {
										fragmentDiv.innerHTML = elem.outerHTML;
										fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
									}

									if ((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

										// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
										destElements = getAll(clone);
										srcElements = getAll(elem);

										// Fix all IE cloning issues
										for (i = 0; (node = srcElements[i]) != null; ++i) {

											// Ensure that the destination node is not null; Fixes #9587
											if (destElements[i]) {
												fixCloneNodeIssues(node, destElements[i]);
											}
										}
									}

									// Copy the events from the original to the clone
									if (dataAndEvents) {
										if (deepDataAndEvents) {
											srcElements = srcElements || getAll(elem);
											destElements = destElements || getAll(clone);

											for (i = 0; (node = srcElements[i]) != null; i++) {
												cloneCopyEvent(node, destElements[i]);
											}
										} else {
											cloneCopyEvent(elem, clone);
										}
									}

									// Preserve script evaluation history
									destElements = getAll(clone, "script");
									if (destElements.length > 0) {
										setGlobalEval(destElements, !inPage && getAll(elem, "script"));
									}

									destElements = srcElements = node = null;

									// Return the cloned set
									return clone;
								},

								cleanData: function (elems, /* internal */forceAcceptData) {
									var elem,
									    type,
									    id,
									    data,
									    i = 0,
									    internalKey = jQuery.expando,
									    cache = jQuery.cache,
									    attributes = support.attributes,
									    special = jQuery.event.special;

									for (; (elem = elems[i]) != null; i++) {
										if (forceAcceptData || acceptData(elem)) {

											id = elem[internalKey];
											data = id && cache[id];

											if (data) {
												if (data.events) {
													for (type in data.events) {
														if (special[type]) {
															jQuery.event.remove(elem, type);

															// This is a shortcut to avoid jQuery.event.remove's overhead
														} else {
															jQuery.removeEvent(elem, type, data.handle);
														}
													}
												}

												// Remove cache only if it was not already removed by jQuery.event.remove
												if (cache[id]) {

													delete cache[id];

													// Support: IE<9
													// IE does not allow us to delete expando properties from nodes
													// IE creates expando attributes along with the property
													// IE does not have a removeAttribute function on Document nodes
													if (!attributes && typeof elem.removeAttribute !== "undefined") {
														elem.removeAttribute(internalKey);

														// Webkit & Blink performance suffers when deleting properties
														// from DOM nodes, so set to undefined instead
														// https://code.google.com/p/chromium/issues/detail?id=378607
													} else {
														elem[internalKey] = undefined;
													}

													deletedIds.push(id);
												}
											}
										}
									}
								}
							});

							jQuery.fn.extend({

								// Keep domManip exposed until 3.0 (gh-2225)
								domManip: domManip,

								detach: function (selector) {
									return remove(this, selector, true);
								},

								remove: function (selector) {
									return remove(this, selector);
								},

								text: function (value) {
									return access(this, function (value) {
										return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
									}, null, value, arguments.length);
								},

								append: function () {
									return domManip(this, arguments, function (elem) {
										if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
											var target = manipulationTarget(this, elem);
											target.appendChild(elem);
										}
									});
								},

								prepend: function () {
									return domManip(this, arguments, function (elem) {
										if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
											var target = manipulationTarget(this, elem);
											target.insertBefore(elem, target.firstChild);
										}
									});
								},

								before: function () {
									return domManip(this, arguments, function (elem) {
										if (this.parentNode) {
											this.parentNode.insertBefore(elem, this);
										}
									});
								},

								after: function () {
									return domManip(this, arguments, function (elem) {
										if (this.parentNode) {
											this.parentNode.insertBefore(elem, this.nextSibling);
										}
									});
								},

								empty: function () {
									var elem,
									    i = 0;

									for (; (elem = this[i]) != null; i++) {

										// Remove element nodes and prevent memory leaks
										if (elem.nodeType === 1) {
											jQuery.cleanData(getAll(elem, false));
										}

										// Remove any remaining nodes
										while (elem.firstChild) {
											elem.removeChild(elem.firstChild);
										}

										// If this is a select, ensure that it displays empty (#12336)
										// Support: IE<9
										if (elem.options && jQuery.nodeName(elem, "select")) {
											elem.options.length = 0;
										}
									}

									return this;
								},

								clone: function (dataAndEvents, deepDataAndEvents) {
									dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
									deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

									return this.map(function () {
										return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
									});
								},

								html: function (value) {
									return access(this, function (value) {
										var elem = this[0] || {},
										    i = 0,
										    l = this.length;

										if (value === undefined) {
											return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined;
										}

										// See if we can take a shortcut and just use innerHTML
										if (typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

											value = jQuery.htmlPrefilter(value);

											try {
												for (; i < l; i++) {

													// Remove element nodes and prevent memory leaks
													elem = this[i] || {};
													if (elem.nodeType === 1) {
														jQuery.cleanData(getAll(elem, false));
														elem.innerHTML = value;
													}
												}

												elem = 0;

												// If using innerHTML throws an exception, use the fallback method
											} catch (e) {}
										}

										if (elem) {
											this.empty().append(value);
										}
									}, null, value, arguments.length);
								},

								replaceWith: function () {
									var ignored = [];

									// Make the changes, replacing each non-ignored context element with the new content
									return domManip(this, arguments, function (elem) {
										var parent = this.parentNode;

										if (jQuery.inArray(this, ignored) < 0) {
											jQuery.cleanData(getAll(this));
											if (parent) {
												parent.replaceChild(elem, this);
											}
										}

										// Force callback invocation
									}, ignored);
								}
							});

							jQuery.each({
								appendTo: "append",
								prependTo: "prepend",
								insertBefore: "before",
								insertAfter: "after",
								replaceAll: "replaceWith"
							}, function (name, original) {
								jQuery.fn[name] = function (selector) {
									var elems,
									    i = 0,
									    ret = [],
									    insert = jQuery(selector),
									    last = insert.length - 1;

									for (; i <= last; i++) {
										elems = i === last ? this : this.clone(true);
										jQuery(insert[i])[original](elems);

										// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
										push.apply(ret, elems.get());
									}

									return this.pushStack(ret);
								};
							});

							var iframe,
							    elemdisplay = {

								// Support: Firefox
								// We have to pre-define these values for FF (#10227)
								HTML: "block",
								BODY: "block"
							};

							/**
        * Retrieve the actual display of a element
        * @param {String} name nodeName of the element
        * @param {Object} doc Document object
        */

							// Called only from within defaultDisplay
							function actualDisplay(name, doc) {
								var elem = jQuery(doc.createElement(name)).appendTo(doc.body),
								    display = jQuery.css(elem[0], "display");

								// We don't have any data stored on the element,
								// so use "detach" method as fast way to get rid of the element
								elem.detach();

								return display;
							}

							/**
        * Try to determine the default display value of an element
        * @param {String} nodeName
        */
							function defaultDisplay(nodeName) {
								var doc = document,
								    display = elemdisplay[nodeName];

								if (!display) {
									display = actualDisplay(nodeName, doc);

									// If the simple way fails, read from inside an iframe
									if (display === "none" || !display) {

										// Use the already-created iframe if possible
										iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);

										// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
										doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;

										// Support: IE
										doc.write();
										doc.close();

										display = actualDisplay(nodeName, doc);
										iframe.detach();
									}

									// Store the correct default display
									elemdisplay[nodeName] = display;
								}

								return display;
							}
							var rmargin = /^margin/;

							var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

							var swap = function (elem, options, callback, args) {
								var ret,
								    name,
								    old = {};

								// Remember the old values, and insert the new ones
								for (name in options) {
									old[name] = elem.style[name];
									elem.style[name] = options[name];
								}

								ret = callback.apply(elem, args || []);

								// Revert the old values
								for (name in options) {
									elem.style[name] = old[name];
								}

								return ret;
							};

							var documentElement = document.documentElement;

							(function () {
								var pixelPositionVal,
								    pixelMarginRightVal,
								    boxSizingReliableVal,
								    reliableHiddenOffsetsVal,
								    reliableMarginRightVal,
								    reliableMarginLeftVal,
								    container = document.createElement("div"),
								    div = document.createElement("div");

								// Finish early in limited (non-browser) environments
								if (!div.style) {
									return;
								}

								div.style.cssText = "float:left;opacity:.5";

								// Support: IE<9
								// Make sure that element opacity exists (as opposed to filter)
								support.opacity = div.style.opacity === "0.5";

								// Verify style float existence
								// (IE uses styleFloat instead of cssFloat)
								support.cssFloat = !!div.style.cssFloat;

								div.style.backgroundClip = "content-box";
								div.cloneNode(true).style.backgroundClip = "";
								support.clearCloneStyle = div.style.backgroundClip === "content-box";

								container = document.createElement("div");
								container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
								div.innerHTML = "";
								container.appendChild(div);

								// Support: Firefox<29, Android 2.3
								// Vendor-prefix box-sizing
								support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" || div.style.WebkitBoxSizing === "";

								jQuery.extend(support, {
									reliableHiddenOffsets: function () {
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return reliableHiddenOffsetsVal;
									},

									boxSizingReliable: function () {

										// We're checking for pixelPositionVal here instead of boxSizingReliableVal
										// since that compresses better and they're computed together anyway.
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return boxSizingReliableVal;
									},

									pixelMarginRight: function () {

										// Support: Android 4.0-4.3
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return pixelMarginRightVal;
									},

									pixelPosition: function () {
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return pixelPositionVal;
									},

									reliableMarginRight: function () {

										// Support: Android 2.3
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return reliableMarginRightVal;
									},

									reliableMarginLeft: function () {

										// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
										if (pixelPositionVal == null) {
											computeStyleTests();
										}
										return reliableMarginLeftVal;
									}
								});

								function computeStyleTests() {
									var contents,
									    divStyle,
									    documentElement = document.documentElement;

									// Setup
									documentElement.appendChild(container);

									div.style.cssText =

									// Support: Android 2.3
									// Vendor-prefix box-sizing
									"-webkit-box-sizing:border-box;box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";

									// Support: IE<9
									// Assume reasonable values in the absence of getComputedStyle
									pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
									pixelMarginRightVal = reliableMarginRightVal = true;

									// Check for getComputedStyle so that this code is not run in IE<9.
									if (window.getComputedStyle) {
										divStyle = window.getComputedStyle(div);
										pixelPositionVal = (divStyle || {}).top !== "1%";
										reliableMarginLeftVal = (divStyle || {}).marginLeft === "2px";
										boxSizingReliableVal = (divStyle || { width: "4px" }).width === "4px";

										// Support: Android 4.0 - 4.3 only
										// Some styles come back with percentage values, even though they shouldn't
										div.style.marginRight = "50%";
										pixelMarginRightVal = (divStyle || { marginRight: "4px" }).marginRight === "4px";

										// Support: Android 2.3 only
										// Div with explicit width and no margin-right incorrectly
										// gets computed margin-right based on width of container (#3333)
										// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
										contents = div.appendChild(document.createElement("div"));

										// Reset CSS: box-sizing; display; margin; border; padding
										contents.style.cssText = div.style.cssText =

										// Support: Android 2.3
										// Vendor-prefix box-sizing
										"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
										contents.style.marginRight = contents.style.width = "0";
										div.style.width = "1px";

										reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents) || {}).marginRight);

										div.removeChild(contents);
									}

									// Support: IE6-8
									// First check that getClientRects works as expected
									// Check if table cells still have offsetWidth/Height when they are set
									// to display:none and there are still other visible table cells in a
									// table row; if so, offsetWidth/Height are not reliable for use when
									// determining if an element has been hidden directly using
									// display:none (it is still safe to use offsets if a parent element is
									// hidden; don safety goggles and see bug #4512 for more information).
									div.style.display = "none";
									reliableHiddenOffsetsVal = div.getClientRects().length === 0;
									if (reliableHiddenOffsetsVal) {
										div.style.display = "";
										div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
										contents = div.getElementsByTagName("td");
										contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";
										reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
										if (reliableHiddenOffsetsVal) {
											contents[0].style.display = "";
											contents[1].style.display = "none";
											reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;
										}
									}

									// Teardown
									documentElement.removeChild(container);
								}
							})();

							var getStyles,
							    curCSS,
							    rposition = /^(top|right|bottom|left)$/;

							if (window.getComputedStyle) {
								getStyles = function (elem) {

									// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
									// IE throws on elements created in popups
									// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
									var view = elem.ownerDocument.defaultView;

									if (!view || !view.opener) {
										view = window;
									}

									return view.getComputedStyle(elem);
								};

								curCSS = function (elem, name, computed) {
									var width,
									    minWidth,
									    maxWidth,
									    ret,
									    style = elem.style;

									computed = computed || getStyles(elem);

									// getPropertyValue is only needed for .css('filter') in IE9, see #12537
									ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined;

									// Support: Opera 12.1x only
									// Fall back to style even without computed
									// computed is undefined for elems on document fragments
									if ((ret === "" || ret === undefined) && !jQuery.contains(elem.ownerDocument, elem)) {
										ret = jQuery.style(elem, name);
									}

									if (computed) {

										// A tribute to the "awesome hack by Dean Edwards"
										// Chrome < 17 and Safari 5.0 uses "computed value"
										// instead of "used value" for margin-right
										// Safari 5.1.7 (at least) returns percentage for a larger set of values,
										// but width seems to be reliably pixels
										// this is against the CSSOM draft spec:
										// http://dev.w3.org/csswg/cssom/#resolved-values
										if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

											// Remember the original values
											width = style.width;
											minWidth = style.minWidth;
											maxWidth = style.maxWidth;

											// Put in the new values to get a computed value out
											style.minWidth = style.maxWidth = style.width = ret;
											ret = computed.width;

											// Revert the changed values
											style.width = width;
											style.minWidth = minWidth;
											style.maxWidth = maxWidth;
										}
									}

									// Support: IE
									// IE returns zIndex value as an integer.
									return ret === undefined ? ret : ret + "";
								};
							} else if (documentElement.currentStyle) {
								getStyles = function (elem) {
									return elem.currentStyle;
								};

								curCSS = function (elem, name, computed) {
									var left,
									    rs,
									    rsLeft,
									    ret,
									    style = elem.style;

									computed = computed || getStyles(elem);
									ret = computed ? computed[name] : undefined;

									// Avoid setting ret to empty string here
									// so we don't default to auto
									if (ret == null && style && style[name]) {
										ret = style[name];
									}

									// From the awesome hack by Dean Edwards
									// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

									// If we're not dealing with a regular pixel number
									// but a number that has a weird ending, we need to convert it to pixels
									// but not position css attributes, as those are
									// proportional to the parent element instead
									// and we can't measure the parent instead because it
									// might trigger a "stacking dolls" problem
									if (rnumnonpx.test(ret) && !rposition.test(name)) {

										// Remember the original values
										left = style.left;
										rs = elem.runtimeStyle;
										rsLeft = rs && rs.left;

										// Put in the new values to get a computed value out
										if (rsLeft) {
											rs.left = elem.currentStyle.left;
										}
										style.left = name === "fontSize" ? "1em" : ret;
										ret = style.pixelLeft + "px";

										// Revert the changed values
										style.left = left;
										if (rsLeft) {
											rs.left = rsLeft;
										}
									}

									// Support: IE
									// IE returns zIndex value as an integer.
									return ret === undefined ? ret : ret + "" || "auto";
								};
							}

							function addGetHookIf(conditionFn, hookFn) {

								// Define the hook, we'll check on the first run if it's really needed.
								return {
									get: function () {
										if (conditionFn()) {

											// Hook not needed (or it's not possible to use it due
											// to missing dependency), remove it.
											delete this.get;
											return;
										}

										// Hook needed; redefine it so that the support test is not executed again.
										return (this.get = hookFn).apply(this, arguments);
									}
								};
							}

							var ralpha = /alpha\([^)]*\)/i,
							    ropacity = /opacity\s*=\s*([^)]*)/i,


							// swappable if display is none or starts with table except
							// "table", "table-cell", or "table-caption"
							// see here for display values:
							// https://developer.mozilla.org/en-US/docs/CSS/display
							rdisplayswap = /^(none|table(?!-c[ea]).+)/,
							    rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
							    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
							    cssNormalTransform = {
								letterSpacing: "0",
								fontWeight: "400"
							},
							    cssPrefixes = ["Webkit", "O", "Moz", "ms"],
							    emptyStyle = document.createElement("div").style;

							// return a css property mapped to a potentially vendor prefixed property
							function vendorPropName(name) {

								// shortcut for names that are not vendor prefixed
								if (name in emptyStyle) {
									return name;
								}

								// check for vendor prefixed names
								var capName = name.charAt(0).toUpperCase() + name.slice(1),
								    i = cssPrefixes.length;

								while (i--) {
									name = cssPrefixes[i] + capName;
									if (name in emptyStyle) {
										return name;
									}
								}
							}

							function showHide(elements, show) {
								var display,
								    elem,
								    hidden,
								    values = [],
								    index = 0,
								    length = elements.length;

								for (; index < length; index++) {
									elem = elements[index];
									if (!elem.style) {
										continue;
									}

									values[index] = jQuery._data(elem, "olddisplay");
									display = elem.style.display;
									if (show) {

										// Reset the inline display of this element to learn if it is
										// being hidden by cascaded rules or not
										if (!values[index] && display === "none") {
											elem.style.display = "";
										}

										// Set elements which have been overridden with display: none
										// in a stylesheet to whatever the default browser style is
										// for such an element
										if (elem.style.display === "" && isHidden(elem)) {
											values[index] = jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
										}
									} else {
										hidden = isHidden(elem);

										if (display && display !== "none" || !hidden) {
											jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"));
										}
									}
								}

								// Set the display of most of the elements in a second loop
								// to avoid the constant reflow
								for (index = 0; index < length; index++) {
									elem = elements[index];
									if (!elem.style) {
										continue;
									}
									if (!show || elem.style.display === "none" || elem.style.display === "") {
										elem.style.display = show ? values[index] || "" : "none";
									}
								}

								return elements;
							}

							function setPositiveNumber(elem, value, subtract) {
								var matches = rnumsplit.exec(value);
								return matches ?

								// Guard against undefined "subtract", e.g., when used as in cssHooks
								Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value;
							}

							function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
								var i = extra === (isBorderBox ? "border" : "content") ?

								// If we already have the right measurement, avoid augmentation
								4 :

								// Otherwise initialize for horizontal or vertical properties
								name === "width" ? 1 : 0,
								    val = 0;

								for (; i < 4; i += 2) {

									// both box models exclude margin, so add it if we want it
									if (extra === "margin") {
										val += jQuery.css(elem, extra + cssExpand[i], true, styles);
									}

									if (isBorderBox) {

										// border-box includes padding, so remove it if we want content
										if (extra === "content") {
											val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
										}

										// at this point, extra isn't border nor margin, so remove border
										if (extra !== "margin") {
											val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
										}
									} else {

										// at this point, extra isn't content, so add padding
										val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

										// at this point, extra isn't content nor padding, so add border
										if (extra !== "padding") {
											val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
										}
									}
								}

								return val;
							}

							function getWidthOrHeight(elem, name, extra) {

								// Start with offset property, which is equivalent to the border-box value
								var valueIsBorderBox = true,
								    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
								    styles = getStyles(elem),
								    isBorderBox = support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";

								// Support: IE11 only
								// In IE 11 fullscreen elements inside of an iframe have
								// 100x too small dimensions (gh-1764).
								if (document.msFullscreenElement && window.top !== window) {

									// Support: IE11 only
									// Running getBoundingClientRect on a disconnected node
									// in IE throws an error.
									if (elem.getClientRects().length) {
										val = Math.round(elem.getBoundingClientRect()[name] * 100);
									}
								}

								// some non-html elements return undefined for offsetWidth, so check for null/undefined
								// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
								// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
								if (val <= 0 || val == null) {

									// Fall back to computed then uncomputed css if necessary
									val = curCSS(elem, name, styles);
									if (val < 0 || val == null) {
										val = elem.style[name];
									}

									// Computed unit is not pixels. Stop here and return.
									if (rnumnonpx.test(val)) {
										return val;
									}

									// we need the check for style in case a browser which returns unreliable values
									// for getComputedStyle silently falls back to the reliable elem.style
									valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

									// Normalize "", auto, and prepare for extra
									val = parseFloat(val) || 0;
								}

								// use the active box-sizing model to add/subtract irrelevant styles
								return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
							}

							jQuery.extend({

								// Add in style property hooks for overriding the default
								// behavior of getting and setting a style property
								cssHooks: {
									opacity: {
										get: function (elem, computed) {
											if (computed) {

												// We should always get a number back from opacity
												var ret = curCSS(elem, "opacity");
												return ret === "" ? "1" : ret;
											}
										}
									}
								},

								// Don't automatically add "px" to these possibly-unitless properties
								cssNumber: {
									"animationIterationCount": true,
									"columnCount": true,
									"fillOpacity": true,
									"flexGrow": true,
									"flexShrink": true,
									"fontWeight": true,
									"lineHeight": true,
									"opacity": true,
									"order": true,
									"orphans": true,
									"widows": true,
									"zIndex": true,
									"zoom": true
								},

								// Add in properties whose names you wish to fix before
								// setting or getting the value
								cssProps: {

									// normalize float css property
									"float": support.cssFloat ? "cssFloat" : "styleFloat"
								},

								// Get and set the style property on a DOM Node
								style: function (elem, name, value, extra) {

									// Don't set styles on text and comment nodes
									if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
										return;
									}

									// Make sure that we're working with the right name
									var ret,
									    type,
									    hooks,
									    origName = jQuery.camelCase(name),
									    style = elem.style;

									name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

									// gets hook for the prefixed version
									// followed by the unprefixed version
									hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

									// Check if we're setting a value
									if (value !== undefined) {
										type = typeof value;

										// Convert "+=" or "-=" to relative numbers (#7345)
										if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
											value = adjustCSS(elem, name, ret);

											// Fixes bug #9237
											type = "number";
										}

										// Make sure that null and NaN values aren't set. See: #7116
										if (value == null || value !== value) {
											return;
										}

										// If a number was passed in, add the unit (except for certain CSS properties)
										if (type === "number") {
											value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
										}

										// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
										// but it would mean to define eight
										// (for every problematic property) identical functions
										if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
											style[name] = "inherit";
										}

										// If a hook was provided, use that value, otherwise just set the specified value
										if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

											// Support: IE
											// Swallow errors from 'invalid' CSS values (#5509)
											try {
												style[name] = value;
											} catch (e) {}
										}
									} else {

										// If a hook was provided get the non-computed value from there
										if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

											return ret;
										}

										// Otherwise just get the value from the style object
										return style[name];
									}
								},

								css: function (elem, name, extra, styles) {
									var num,
									    val,
									    hooks,
									    origName = jQuery.camelCase(name);

									// Make sure that we're working with the right name
									name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

									// gets hook for the prefixed version
									// followed by the unprefixed version
									hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

									// If a hook was provided get the computed value from there
									if (hooks && "get" in hooks) {
										val = hooks.get(elem, true, extra);
									}

									// Otherwise, if a way to get the computed value exists, use that
									if (val === undefined) {
										val = curCSS(elem, name, styles);
									}

									//convert "normal" to computed value
									if (val === "normal" && name in cssNormalTransform) {
										val = cssNormalTransform[name];
									}

									// Return, converting to number if forced or a qualifier was provided and val looks numeric
									if (extra === "" || extra) {
										num = parseFloat(val);
										return extra === true || isFinite(num) ? num || 0 : val;
									}
									return val;
								}
							});

							jQuery.each(["height", "width"], function (i, name) {
								jQuery.cssHooks[name] = {
									get: function (elem, computed, extra) {
										if (computed) {

											// certain elements can have dimension info if we invisibly show them
											// however, it must have a current display style that would benefit from this
											return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? swap(elem, cssShow, function () {
												return getWidthOrHeight(elem, name, extra);
											}) : getWidthOrHeight(elem, name, extra);
										}
									},

									set: function (elem, value, extra) {
										var styles = extra && getStyles(elem);
										return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0);
									}
								};
							});

							if (!support.opacity) {
								jQuery.cssHooks.opacity = {
									get: function (elem, computed) {

										// IE uses filters for opacity
										return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : computed ? "1" : "";
									},

									set: function (elem, value) {
										var style = elem.style,
										    currentStyle = elem.currentStyle,
										    opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "",
										    filter = currentStyle && currentStyle.filter || style.filter || "";

										// IE has trouble with opacity if it does not have layout
										// Force it by setting the zoom level
										style.zoom = 1;

										// if setting opacity to 1, and no other filters exist -
										// attempt to remove filter attribute #6652
										// if value === "", then remove inline opacity #12685
										if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {

											// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
											// if "filter:" is present at all, clearType is disabled, we want to avoid this
											// style.removeAttribute is IE Only, but so apparently is this code path...
											style.removeAttribute("filter");

											// if there is no filter style applied in a css rule
											// or unset inline opacity, we are done
											if (value === "" || currentStyle && !currentStyle.filter) {
												return;
											}
										}

										// otherwise, set new filter values
										style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
									}
								};
							}

							jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
								if (computed) {
									return swap(elem, { "display": "inline-block" }, curCSS, [elem, "marginRight"]);
								}
							});

							jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
								if (computed) {
									return (parseFloat(curCSS(elem, "marginLeft")) || (

									// Support: IE<=11+
									// Running getBoundingClientRect on a disconnected node in IE throws an error
									// Support: IE8 only
									// getClientRects() errors on disconnected elems
									jQuery.contains(elem.ownerDocument, elem) ? elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
										return elem.getBoundingClientRect().left;
									}) : 0)) + "px";
								}
							});

							// These hooks are used by animate to expand properties
							jQuery.each({
								margin: "",
								padding: "",
								border: "Width"
							}, function (prefix, suffix) {
								jQuery.cssHooks[prefix + suffix] = {
									expand: function (value) {
										var i = 0,
										    expanded = {},


										// assumes a single number if not a string
										parts = typeof value === "string" ? value.split(" ") : [value];

										for (; i < 4; i++) {
											expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
										}

										return expanded;
									}
								};

								if (!rmargin.test(prefix)) {
									jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
								}
							});

							jQuery.fn.extend({
								css: function (name, value) {
									return access(this, function (elem, name, value) {
										var styles,
										    len,
										    map = {},
										    i = 0;

										if (jQuery.isArray(name)) {
											styles = getStyles(elem);
											len = name.length;

											for (; i < len; i++) {
												map[name[i]] = jQuery.css(elem, name[i], false, styles);
											}

											return map;
										}

										return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
									}, name, value, arguments.length > 1);
								},
								show: function () {
									return showHide(this, true);
								},
								hide: function () {
									return showHide(this);
								},
								toggle: function (state) {
									if (typeof state === "boolean") {
										return state ? this.show() : this.hide();
									}

									return this.each(function () {
										if (isHidden(this)) {
											jQuery(this).show();
										} else {
											jQuery(this).hide();
										}
									});
								}
							});

							function Tween(elem, options, prop, end, easing) {
								return new Tween.prototype.init(elem, options, prop, end, easing);
							}
							jQuery.Tween = Tween;

							Tween.prototype = {
								constructor: Tween,
								init: function (elem, options, prop, end, easing, unit) {
									this.elem = elem;
									this.prop = prop;
									this.easing = easing || jQuery.easing._default;
									this.options = options;
									this.start = this.now = this.cur();
									this.end = end;
									this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
								},
								cur: function () {
									var hooks = Tween.propHooks[this.prop];

									return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
								},
								run: function (percent) {
									var eased,
									    hooks = Tween.propHooks[this.prop];

									if (this.options.duration) {
										this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
									} else {
										this.pos = eased = percent;
									}
									this.now = (this.end - this.start) * eased + this.start;

									if (this.options.step) {
										this.options.step.call(this.elem, this.now, this);
									}

									if (hooks && hooks.set) {
										hooks.set(this);
									} else {
										Tween.propHooks._default.set(this);
									}
									return this;
								}
							};

							Tween.prototype.init.prototype = Tween.prototype;

							Tween.propHooks = {
								_default: {
									get: function (tween) {
										var result;

										// Use a property on the element directly when it is not a DOM element,
										// or when there is no matching style property that exists.
										if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
											return tween.elem[tween.prop];
										}

										// passing an empty string as a 3rd parameter to .css will automatically
										// attempt a parseFloat and fallback to a string if the parse fails
										// so, simple values such as "10px" are parsed to Float.
										// complex values such as "rotate(1rad)" are returned as is.
										result = jQuery.css(tween.elem, tween.prop, "");

										// Empty strings, null, undefined and "auto" are converted to 0.
										return !result || result === "auto" ? 0 : result;
									},
									set: function (tween) {

										// use step hook for back compat - use cssHook if its there - use .style if its
										// available and use plain properties where available
										if (jQuery.fx.step[tween.prop]) {
											jQuery.fx.step[tween.prop](tween);
										} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
											jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
										} else {
											tween.elem[tween.prop] = tween.now;
										}
									}
								}
							};

							// Support: IE <=9
							// Panic based approach to setting things on disconnected nodes

							Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
								set: function (tween) {
									if (tween.elem.nodeType && tween.elem.parentNode) {
										tween.elem[tween.prop] = tween.now;
									}
								}
							};

							jQuery.easing = {
								linear: function (p) {
									return p;
								},
								swing: function (p) {
									return 0.5 - Math.cos(p * Math.PI) / 2;
								},
								_default: "swing"
							};

							jQuery.fx = Tween.prototype.init;

							// Back Compat <1.8 extension point
							jQuery.fx.step = {};

							var fxNow,
							    timerId,
							    rfxtypes = /^(?:toggle|show|hide)$/,
							    rrun = /queueHooks$/;

							// Animations created synchronously will run synchronously
							function createFxNow() {
								window.setTimeout(function () {
									fxNow = undefined;
								});
								return fxNow = jQuery.now();
							}

							// Generate parameters to create a standard animation
							function genFx(type, includeWidth) {
								var which,
								    attrs = { height: type },
								    i = 0;

								// if we include width, step value is 1 to do all cssExpand values,
								// if we don't include width, step value is 2 to skip over Left and Right
								includeWidth = includeWidth ? 1 : 0;
								for (; i < 4; i += 2 - includeWidth) {
									which = cssExpand[i];
									attrs["margin" + which] = attrs["padding" + which] = type;
								}

								if (includeWidth) {
									attrs.opacity = attrs.width = type;
								}

								return attrs;
							}

							function createTween(value, prop, animation) {
								var tween,
								    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
								    index = 0,
								    length = collection.length;
								for (; index < length; index++) {
									if (tween = collection[index].call(animation, prop, value)) {

										// we're done with this property
										return tween;
									}
								}
							}

							function defaultPrefilter(elem, props, opts) {
								/* jshint validthis: true */
								var prop,
								    value,
								    toggle,
								    tween,
								    hooks,
								    oldfire,
								    display,
								    checkDisplay,
								    anim = this,
								    orig = {},
								    style = elem.style,
								    hidden = elem.nodeType && isHidden(elem),
								    dataShow = jQuery._data(elem, "fxshow");

								// handle queue: false promises
								if (!opts.queue) {
									hooks = jQuery._queueHooks(elem, "fx");
									if (hooks.unqueued == null) {
										hooks.unqueued = 0;
										oldfire = hooks.empty.fire;
										hooks.empty.fire = function () {
											if (!hooks.unqueued) {
												oldfire();
											}
										};
									}
									hooks.unqueued++;

									anim.always(function () {

										// doing this makes sure that the complete handler will be called
										// before this completes
										anim.always(function () {
											hooks.unqueued--;
											if (!jQuery.queue(elem, "fx").length) {
												hooks.empty.fire();
											}
										});
									});
								}

								// height/width overflow pass
								if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

									// Make sure that nothing sneaks out
									// Record all 3 overflow attributes because IE does not
									// change the overflow attribute when overflowX and
									// overflowY are set to the same value
									opts.overflow = [style.overflow, style.overflowX, style.overflowY];

									// Set display property to inline-block for height/width
									// animations on inline elements that are having width/height animated
									display = jQuery.css(elem, "display");

									// Test default display if display is currently "none"
									checkDisplay = display === "none" ? jQuery._data(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

									if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {

										// inline-level elements accept inline-block;
										// block-level elements need to be inline with layout
										if (!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline") {
											style.display = "inline-block";
										} else {
											style.zoom = 1;
										}
									}
								}

								if (opts.overflow) {
									style.overflow = "hidden";
									if (!support.shrinkWrapBlocks()) {
										anim.always(function () {
											style.overflow = opts.overflow[0];
											style.overflowX = opts.overflow[1];
											style.overflowY = opts.overflow[2];
										});
									}
								}

								// show/hide pass
								for (prop in props) {
									value = props[prop];
									if (rfxtypes.exec(value)) {
										delete props[prop];
										toggle = toggle || value === "toggle";
										if (value === (hidden ? "hide" : "show")) {

											// If there is dataShow left over from a stopped hide or show
											// and we are going to proceed with show, we should pretend to be hidden
											if (value === "show" && dataShow && dataShow[prop] !== undefined) {
												hidden = true;
											} else {
												continue;
											}
										}
										orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

										// Any non-fx value stops us from restoring the original display value
									} else {
										display = undefined;
									}
								}

								if (!jQuery.isEmptyObject(orig)) {
									if (dataShow) {
										if ("hidden" in dataShow) {
											hidden = dataShow.hidden;
										}
									} else {
										dataShow = jQuery._data(elem, "fxshow", {});
									}

									// store state if its toggle - enables .stop().toggle() to "reverse"
									if (toggle) {
										dataShow.hidden = !hidden;
									}
									if (hidden) {
										jQuery(elem).show();
									} else {
										anim.done(function () {
											jQuery(elem).hide();
										});
									}
									anim.done(function () {
										var prop;
										jQuery._removeData(elem, "fxshow");
										for (prop in orig) {
											jQuery.style(elem, prop, orig[prop]);
										}
									});
									for (prop in orig) {
										tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

										if (!(prop in dataShow)) {
											dataShow[prop] = tween.start;
											if (hidden) {
												tween.end = tween.start;
												tween.start = prop === "width" || prop === "height" ? 1 : 0;
											}
										}
									}

									// If this is a noop like .hide().hide(), restore an overwritten display value
								} else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
									style.display = display;
								}
							}

							function propFilter(props, specialEasing) {
								var index, name, easing, value, hooks;

								// camelCase, specialEasing and expand cssHook pass
								for (index in props) {
									name = jQuery.camelCase(index);
									easing = specialEasing[name];
									value = props[index];
									if (jQuery.isArray(value)) {
										easing = value[1];
										value = props[index] = value[0];
									}

									if (index !== name) {
										props[name] = value;
										delete props[index];
									}

									hooks = jQuery.cssHooks[name];
									if (hooks && "expand" in hooks) {
										value = hooks.expand(value);
										delete props[name];

										// not quite $.extend, this wont overwrite keys already present.
										// also - reusing 'index' from above because we have the correct "name"
										for (index in value) {
											if (!(index in props)) {
												props[index] = value[index];
												specialEasing[index] = easing;
											}
										}
									} else {
										specialEasing[name] = easing;
									}
								}
							}

							function Animation(elem, properties, options) {
								var result,
								    stopped,
								    index = 0,
								    length = Animation.prefilters.length,
								    deferred = jQuery.Deferred().always(function () {

									// don't match elem in the :animated selector
									delete tick.elem;
								}),
								    tick = function () {
									if (stopped) {
										return false;
									}
									var currentTime = fxNow || createFxNow(),
									    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


									// Support: Android 2.3
									// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
									temp = remaining / animation.duration || 0,
									    percent = 1 - temp,
									    index = 0,
									    length = animation.tweens.length;

									for (; index < length; index++) {
										animation.tweens[index].run(percent);
									}

									deferred.notifyWith(elem, [animation, percent, remaining]);

									if (percent < 1 && length) {
										return remaining;
									} else {
										deferred.resolveWith(elem, [animation]);
										return false;
									}
								},
								    animation = deferred.promise({
									elem: elem,
									props: jQuery.extend({}, properties),
									opts: jQuery.extend(true, {
										specialEasing: {},
										easing: jQuery.easing._default
									}, options),
									originalProperties: properties,
									originalOptions: options,
									startTime: fxNow || createFxNow(),
									duration: options.duration,
									tweens: [],
									createTween: function (prop, end) {
										var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
										animation.tweens.push(tween);
										return tween;
									},
									stop: function (gotoEnd) {
										var index = 0,


										// if we are going to the end, we want to run all the tweens
										// otherwise we skip this part
										length = gotoEnd ? animation.tweens.length : 0;
										if (stopped) {
											return this;
										}
										stopped = true;
										for (; index < length; index++) {
											animation.tweens[index].run(1);
										}

										// resolve when we played the last frame
										// otherwise, reject
										if (gotoEnd) {
											deferred.notifyWith(elem, [animation, 1, 0]);
											deferred.resolveWith(elem, [animation, gotoEnd]);
										} else {
											deferred.rejectWith(elem, [animation, gotoEnd]);
										}
										return this;
									}
								}),
								    props = animation.props;

								propFilter(props, animation.opts.specialEasing);

								for (; index < length; index++) {
									result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
									if (result) {
										if (jQuery.isFunction(result.stop)) {
											jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
										}
										return result;
									}
								}

								jQuery.map(props, createTween, animation);

								if (jQuery.isFunction(animation.opts.start)) {
									animation.opts.start.call(elem, animation);
								}

								jQuery.fx.timer(jQuery.extend(tick, {
									elem: elem,
									anim: animation,
									queue: animation.opts.queue
								}));

								// attach callbacks from options
								return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
							}

							jQuery.Animation = jQuery.extend(Animation, {

								tweeners: {
									"*": [function (prop, value) {
										var tween = this.createTween(prop, value);
										adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
										return tween;
									}]
								},

								tweener: function (props, callback) {
									if (jQuery.isFunction(props)) {
										callback = props;
										props = ["*"];
									} else {
										props = props.match(rnotwhite);
									}

									var prop,
									    index = 0,
									    length = props.length;

									for (; index < length; index++) {
										prop = props[index];
										Animation.tweeners[prop] = Animation.tweeners[prop] || [];
										Animation.tweeners[prop].unshift(callback);
									}
								},

								prefilters: [defaultPrefilter],

								prefilter: function (callback, prepend) {
									if (prepend) {
										Animation.prefilters.unshift(callback);
									} else {
										Animation.prefilters.push(callback);
									}
								}
							});

							jQuery.speed = function (speed, easing, fn) {
								var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
									complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
									duration: speed,
									easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
								};

								opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

								// normalize opt.queue - true/undefined/null -> "fx"
								if (opt.queue == null || opt.queue === true) {
									opt.queue = "fx";
								}

								// Queueing
								opt.old = opt.complete;

								opt.complete = function () {
									if (jQuery.isFunction(opt.old)) {
										opt.old.call(this);
									}

									if (opt.queue) {
										jQuery.dequeue(this, opt.queue);
									}
								};

								return opt;
							};

							jQuery.fn.extend({
								fadeTo: function (speed, to, easing, callback) {

									// show any hidden elements after setting opacity to 0
									return this.filter(isHidden).css("opacity", 0).show()

									// animate to the value specified
									.end().animate({ opacity: to }, speed, easing, callback);
								},
								animate: function (prop, speed, easing, callback) {
									var empty = jQuery.isEmptyObject(prop),
									    optall = jQuery.speed(speed, easing, callback),
									    doAnimation = function () {

										// Operate on a copy of prop so per-property easing won't be lost
										var anim = Animation(this, jQuery.extend({}, prop), optall);

										// Empty animations, or finishing resolves immediately
										if (empty || jQuery._data(this, "finish")) {
											anim.stop(true);
										}
									};
									doAnimation.finish = doAnimation;

									return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
								},
								stop: function (type, clearQueue, gotoEnd) {
									var stopQueue = function (hooks) {
										var stop = hooks.stop;
										delete hooks.stop;
										stop(gotoEnd);
									};

									if (typeof type !== "string") {
										gotoEnd = clearQueue;
										clearQueue = type;
										type = undefined;
									}
									if (clearQueue && type !== false) {
										this.queue(type || "fx", []);
									}

									return this.each(function () {
										var dequeue = true,
										    index = type != null && type + "queueHooks",
										    timers = jQuery.timers,
										    data = jQuery._data(this);

										if (index) {
											if (data[index] && data[index].stop) {
												stopQueue(data[index]);
											}
										} else {
											for (index in data) {
												if (data[index] && data[index].stop && rrun.test(index)) {
													stopQueue(data[index]);
												}
											}
										}

										for (index = timers.length; index--;) {
											if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

												timers[index].anim.stop(gotoEnd);
												dequeue = false;
												timers.splice(index, 1);
											}
										}

										// start the next in the queue if the last step wasn't forced
										// timers currently will call their complete callbacks, which will dequeue
										// but only if they were gotoEnd
										if (dequeue || !gotoEnd) {
											jQuery.dequeue(this, type);
										}
									});
								},
								finish: function (type) {
									if (type !== false) {
										type = type || "fx";
									}
									return this.each(function () {
										var index,
										    data = jQuery._data(this),
										    queue = data[type + "queue"],
										    hooks = data[type + "queueHooks"],
										    timers = jQuery.timers,
										    length = queue ? queue.length : 0;

										// enable finishing flag on private data
										data.finish = true;

										// empty the queue first
										jQuery.queue(this, type, []);

										if (hooks && hooks.stop) {
											hooks.stop.call(this, true);
										}

										// look for any active animations, and finish them
										for (index = timers.length; index--;) {
											if (timers[index].elem === this && timers[index].queue === type) {
												timers[index].anim.stop(true);
												timers.splice(index, 1);
											}
										}

										// look for any animations in the old queue and finish them
										for (index = 0; index < length; index++) {
											if (queue[index] && queue[index].finish) {
												queue[index].finish.call(this);
											}
										}

										// turn off finishing flag
										delete data.finish;
									});
								}
							});

							jQuery.each(["toggle", "show", "hide"], function (i, name) {
								var cssFn = jQuery.fn[name];
								jQuery.fn[name] = function (speed, easing, callback) {
									return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
								};
							});

							// Generate shortcuts for custom animations
							jQuery.each({
								slideDown: genFx("show"),
								slideUp: genFx("hide"),
								slideToggle: genFx("toggle"),
								fadeIn: { opacity: "show" },
								fadeOut: { opacity: "hide" },
								fadeToggle: { opacity: "toggle" }
							}, function (name, props) {
								jQuery.fn[name] = function (speed, easing, callback) {
									return this.animate(props, speed, easing, callback);
								};
							});

							jQuery.timers = [];
							jQuery.fx.tick = function () {
								var timer,
								    timers = jQuery.timers,
								    i = 0;

								fxNow = jQuery.now();

								for (; i < timers.length; i++) {
									timer = timers[i];

									// Checks the timer has not already been removed
									if (!timer() && timers[i] === timer) {
										timers.splice(i--, 1);
									}
								}

								if (!timers.length) {
									jQuery.fx.stop();
								}
								fxNow = undefined;
							};

							jQuery.fx.timer = function (timer) {
								jQuery.timers.push(timer);
								if (timer()) {
									jQuery.fx.start();
								} else {
									jQuery.timers.pop();
								}
							};

							jQuery.fx.interval = 13;

							jQuery.fx.start = function () {
								if (!timerId) {
									timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
								}
							};

							jQuery.fx.stop = function () {
								window.clearInterval(timerId);
								timerId = null;
							};

							jQuery.fx.speeds = {
								slow: 600,
								fast: 200,

								// Default speed
								_default: 400
							};

							// Based off of the plugin by Clint Helfers, with permission.
							// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
							jQuery.fn.delay = function (time, type) {
								time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
								type = type || "fx";

								return this.queue(type, function (next, hooks) {
									var timeout = window.setTimeout(next, time);
									hooks.stop = function () {
										window.clearTimeout(timeout);
									};
								});
							};

							(function () {
								var a,
								    input = document.createElement("input"),
								    div = document.createElement("div"),
								    select = document.createElement("select"),
								    opt = select.appendChild(document.createElement("option"));

								// Setup
								div = document.createElement("div");
								div.setAttribute("className", "t");
								div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
								a = div.getElementsByTagName("a")[0];

								// Support: Windows Web Apps (WWA)
								// `type` must use .setAttribute for WWA (#14901)
								input.setAttribute("type", "checkbox");
								div.appendChild(input);

								a = div.getElementsByTagName("a")[0];

								// First batch of tests.
								a.style.cssText = "top:1px";

								// Test setAttribute on camelCase class.
								// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
								support.getSetAttribute = div.className !== "t";

								// Get the style information from getAttribute
								// (IE uses .cssText instead)
								support.style = /top/.test(a.getAttribute("style"));

								// Make sure that URLs aren't manipulated
								// (IE normalizes it by default)
								support.hrefNormalized = a.getAttribute("href") === "/a";

								// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
								support.checkOn = !!input.value;

								// Make sure that a selected-by-default option has a working selected property.
								// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
								support.optSelected = opt.selected;

								// Tests for enctype support on a form (#6743)
								support.enctype = !!document.createElement("form").enctype;

								// Make sure that the options inside disabled selects aren't marked as disabled
								// (WebKit marks them as disabled)
								select.disabled = true;
								support.optDisabled = !opt.disabled;

								// Support: IE8 only
								// Check if we can trust getAttribute("value")
								input = document.createElement("input");
								input.setAttribute("value", "");
								support.input = input.getAttribute("value") === "";

								// Check if an input maintains its value after becoming a radio
								input.value = "t";
								input.setAttribute("type", "radio");
								support.radioValue = input.value === "t";
							})();

							var rreturn = /\r/g;

							jQuery.fn.extend({
								val: function (value) {
									var hooks,
									    ret,
									    isFunction,
									    elem = this[0];

									if (!arguments.length) {
										if (elem) {
											hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

											if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
												return ret;
											}

											ret = elem.value;

											return typeof ret === "string" ?

											// handle most common string cases
											ret.replace(rreturn, "") :

											// handle cases where value is null/undef or number
											ret == null ? "" : ret;
										}

										return;
									}

									isFunction = jQuery.isFunction(value);

									return this.each(function (i) {
										var val;

										if (this.nodeType !== 1) {
											return;
										}

										if (isFunction) {
											val = value.call(this, i, jQuery(this).val());
										} else {
											val = value;
										}

										// Treat null/undefined as ""; convert numbers to string
										if (val == null) {
											val = "";
										} else if (typeof val === "number") {
											val += "";
										} else if (jQuery.isArray(val)) {
											val = jQuery.map(val, function (value) {
												return value == null ? "" : value + "";
											});
										}

										hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

										// If set returns undefined, fall back to normal setting
										if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
											this.value = val;
										}
									});
								}
							});

							jQuery.extend({
								valHooks: {
									option: {
										get: function (elem) {
											var val = jQuery.find.attr(elem, "value");
											return val != null ? val :

											// Support: IE10-11+
											// option.text throws exceptions (#14686, #14858)
											jQuery.trim(jQuery.text(elem));
										}
									},
									select: {
										get: function (elem) {
											var value,
											    option,
											    options = elem.options,
											    index = elem.selectedIndex,
											    one = elem.type === "select-one" || index < 0,
											    values = one ? null : [],
											    max = one ? index + 1 : options.length,
											    i = index < 0 ? max : one ? index : 0;

											// Loop through all the selected options
											for (; i < max; i++) {
												option = options[i];

												// oldIE doesn't update selected after form reset (#2551)
												if ((option.selected || i === index) && (

												// Don't return options that are disabled or in a disabled optgroup
												support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

													// Get the specific value for the option
													value = jQuery(option).val();

													// We don't need an array for one selects
													if (one) {
														return value;
													}

													// Multi-Selects return an array
													values.push(value);
												}
											}

											return values;
										},

										set: function (elem, value) {
											var optionSet,
											    option,
											    options = elem.options,
											    values = jQuery.makeArray(value),
											    i = options.length;

											while (i--) {
												option = options[i];

												if (jQuery.inArray(jQuery.valHooks.option.get(option), values) >= 0) {

													// Support: IE6
													// When new option element is added to select box we need to
													// force reflow of newly added node in order to workaround delay
													// of initialization properties
													try {
														option.selected = optionSet = true;
													} catch (_) {

														// Will be executed only in IE6
														option.scrollHeight;
													}
												} else {
													option.selected = false;
												}
											}

											// Force browsers to behave consistently when non-matching value is set
											if (!optionSet) {
												elem.selectedIndex = -1;
											}

											return options;
										}
									}
								}
							});

							// Radios and checkboxes getter/setter
							jQuery.each(["radio", "checkbox"], function () {
								jQuery.valHooks[this] = {
									set: function (elem, value) {
										if (jQuery.isArray(value)) {
											return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
										}
									}
								};
								if (!support.checkOn) {
									jQuery.valHooks[this].get = function (elem) {
										return elem.getAttribute("value") === null ? "on" : elem.value;
									};
								}
							});

							var nodeHook,
							    boolHook,
							    attrHandle = jQuery.expr.attrHandle,
							    ruseDefault = /^(?:checked|selected)$/i,
							    getSetAttribute = support.getSetAttribute,
							    getSetInput = support.input;

							jQuery.fn.extend({
								attr: function (name, value) {
									return access(this, jQuery.attr, name, value, arguments.length > 1);
								},

								removeAttr: function (name) {
									return this.each(function () {
										jQuery.removeAttr(this, name);
									});
								}
							});

							jQuery.extend({
								attr: function (elem, name, value) {
									var ret,
									    hooks,
									    nType = elem.nodeType;

									// Don't get/set attributes on text, comment and attribute nodes
									if (nType === 3 || nType === 8 || nType === 2) {
										return;
									}

									// Fallback to prop when attributes are not supported
									if (typeof elem.getAttribute === "undefined") {
										return jQuery.prop(elem, name, value);
									}

									// All attributes are lowercase
									// Grab necessary hook if one is defined
									if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
										name = name.toLowerCase();
										hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
									}

									if (value !== undefined) {
										if (value === null) {
											jQuery.removeAttr(elem, name);
											return;
										}

										if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
											return ret;
										}

										elem.setAttribute(name, value + "");
										return value;
									}

									if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
										return ret;
									}

									ret = jQuery.find.attr(elem, name);

									// Non-existent attributes return null, we normalize to undefined
									return ret == null ? undefined : ret;
								},

								attrHooks: {
									type: {
										set: function (elem, value) {
											if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {

												// Setting the type on a radio button after the value resets the value in IE8-9
												// Reset value to default in case type is set after value during creation
												var val = elem.value;
												elem.setAttribute("type", value);
												if (val) {
													elem.value = val;
												}
												return value;
											}
										}
									}
								},

								removeAttr: function (elem, value) {
									var name,
									    propName,
									    i = 0,
									    attrNames = value && value.match(rnotwhite);

									if (attrNames && elem.nodeType === 1) {
										while (name = attrNames[i++]) {
											propName = jQuery.propFix[name] || name;

											// Boolean attributes get special treatment (#10870)
											if (jQuery.expr.match.bool.test(name)) {

												// Set corresponding property to false
												if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
													elem[propName] = false;

													// Support: IE<9
													// Also clear defaultChecked/defaultSelected (if appropriate)
												} else {
													elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;
												}

												// See #9699 for explanation of this approach (setting first, then removal)
											} else {
												jQuery.attr(elem, name, "");
											}

											elem.removeAttribute(getSetAttribute ? name : propName);
										}
									}
								}
							});

							// Hooks for boolean attributes
							boolHook = {
								set: function (elem, value, name) {
									if (value === false) {

										// Remove boolean attributes when set to false
										jQuery.removeAttr(elem, name);
									} else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {

										// IE<8 needs the *property* name
										elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
									} else {

										// Support: IE<9
										// Use defaultChecked and defaultSelected for oldIE
										elem[jQuery.camelCase("default-" + name)] = elem[name] = true;
									}
									return name;
								}
							};

							jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
								var getter = attrHandle[name] || jQuery.find.attr;

								if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
									attrHandle[name] = function (elem, name, isXML) {
										var ret, handle;
										if (!isXML) {

											// Avoid an infinite loop by temporarily removing this function from the getter
											handle = attrHandle[name];
											attrHandle[name] = ret;
											ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
											attrHandle[name] = handle;
										}
										return ret;
									};
								} else {
									attrHandle[name] = function (elem, name, isXML) {
										if (!isXML) {
											return elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null;
										}
									};
								}
							});

							// fix oldIE attroperties
							if (!getSetInput || !getSetAttribute) {
								jQuery.attrHooks.value = {
									set: function (elem, value, name) {
										if (jQuery.nodeName(elem, "input")) {

											// Does not return so that setAttribute is also used
											elem.defaultValue = value;
										} else {

											// Use nodeHook if defined (#1954); otherwise setAttribute is fine
											return nodeHook && nodeHook.set(elem, value, name);
										}
									}
								};
							}

							// IE6/7 do not support getting/setting some attributes with get/setAttribute
							if (!getSetAttribute) {

								// Use this for any attribute in IE6/7
								// This fixes almost every IE6/7 issue
								nodeHook = {
									set: function (elem, value, name) {

										// Set the existing or create a new attribute node
										var ret = elem.getAttributeNode(name);
										if (!ret) {
											elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
										}

										ret.value = value += "";

										// Break association with cloned elements by also using setAttribute (#9646)
										if (name === "value" || value === elem.getAttribute(name)) {
											return value;
										}
									}
								};

								// Some attributes are constructed with empty-string values when not defined
								attrHandle.id = attrHandle.name = attrHandle.coords = function (elem, name, isXML) {
									var ret;
									if (!isXML) {
										return (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null;
									}
								};

								// Fixing value retrieval on a button requires this module
								jQuery.valHooks.button = {
									get: function (elem, name) {
										var ret = elem.getAttributeNode(name);
										if (ret && ret.specified) {
											return ret.value;
										}
									},
									set: nodeHook.set
								};

								// Set contenteditable to false on removals(#10429)
								// Setting to empty string throws an error as an invalid value
								jQuery.attrHooks.contenteditable = {
									set: function (elem, value, name) {
										nodeHook.set(elem, value === "" ? false : value, name);
									}
								};

								// Set width and height to auto instead of 0 on empty string( Bug #8150 )
								// This is for removals
								jQuery.each(["width", "height"], function (i, name) {
									jQuery.attrHooks[name] = {
										set: function (elem, value) {
											if (value === "") {
												elem.setAttribute(name, "auto");
												return value;
											}
										}
									};
								});
							}

							if (!support.style) {
								jQuery.attrHooks.style = {
									get: function (elem) {

										// Return undefined in the case of empty string
										// Note: IE uppercases css property names, but if we were to .toLowerCase()
										// .cssText, that would destroy case sensitivity in URL's, like in "background"
										return elem.style.cssText || undefined;
									},
									set: function (elem, value) {
										return elem.style.cssText = value + "";
									}
								};
							}

							var rfocusable = /^(?:input|select|textarea|button|object)$/i,
							    rclickable = /^(?:a|area)$/i;

							jQuery.fn.extend({
								prop: function (name, value) {
									return access(this, jQuery.prop, name, value, arguments.length > 1);
								},

								removeProp: function (name) {
									name = jQuery.propFix[name] || name;
									return this.each(function () {

										// try/catch handles cases where IE balks (such as removing a property on window)
										try {
											this[name] = undefined;
											delete this[name];
										} catch (e) {}
									});
								}
							});

							jQuery.extend({
								prop: function (elem, name, value) {
									var ret,
									    hooks,
									    nType = elem.nodeType;

									// Don't get/set properties on text, comment and attribute nodes
									if (nType === 3 || nType === 8 || nType === 2) {
										return;
									}

									if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

										// Fix name and attach hooks
										name = jQuery.propFix[name] || name;
										hooks = jQuery.propHooks[name];
									}

									if (value !== undefined) {
										if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
											return ret;
										}

										return elem[name] = value;
									}

									if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
										return ret;
									}

									return elem[name];
								},

								propHooks: {
									tabIndex: {
										get: function (elem) {

											// elem.tabIndex doesn't always return the
											// correct value when it hasn't been explicitly set
											// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
											// Use proper attribute retrieval(#12072)
											var tabindex = jQuery.find.attr(elem, "tabindex");

											return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;
										}
									}
								},

								propFix: {
									"for": "htmlFor",
									"class": "className"
								}
							});

							// Some attributes require a special call on IE
							// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
							if (!support.hrefNormalized) {

								// href/src property should get the full normalized URL (#10299/#12915)
								jQuery.each(["href", "src"], function (i, name) {
									jQuery.propHooks[name] = {
										get: function (elem) {
											return elem.getAttribute(name, 4);
										}
									};
								});
							}

							// Support: Safari, IE9+
							// mis-reports the default selected property of an option
							// Accessing the parent's selectedIndex property fixes it
							if (!support.optSelected) {
								jQuery.propHooks.selected = {
									get: function (elem) {
										var parent = elem.parentNode;

										if (parent) {
											parent.selectedIndex;

											// Make sure that it also works with optgroups, see #5701
											if (parent.parentNode) {
												parent.parentNode.selectedIndex;
											}
										}
										return null;
									}
								};
							}

							jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
								jQuery.propFix[this.toLowerCase()] = this;
							});

							// IE6/7 call enctype encoding
							if (!support.enctype) {
								jQuery.propFix.enctype = "encoding";
							}

							var rclass = /[\t\r\n\f]/g;

							function getClass(elem) {
								return jQuery.attr(elem, "class") || "";
							}

							jQuery.fn.extend({
								addClass: function (value) {
									var classes,
									    elem,
									    cur,
									    curValue,
									    clazz,
									    j,
									    finalValue,
									    i = 0;

									if (jQuery.isFunction(value)) {
										return this.each(function (j) {
											jQuery(this).addClass(value.call(this, j, getClass(this)));
										});
									}

									if (typeof value === "string" && value) {
										classes = value.match(rnotwhite) || [];

										while (elem = this[i++]) {
											curValue = getClass(elem);
											cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

											if (cur) {
												j = 0;
												while (clazz = classes[j++]) {
													if (cur.indexOf(" " + clazz + " ") < 0) {
														cur += clazz + " ";
													}
												}

												// only assign if different to avoid unneeded rendering.
												finalValue = jQuery.trim(cur);
												if (curValue !== finalValue) {
													jQuery.attr(elem, "class", finalValue);
												}
											}
										}
									}

									return this;
								},

								removeClass: function (value) {
									var classes,
									    elem,
									    cur,
									    curValue,
									    clazz,
									    j,
									    finalValue,
									    i = 0;

									if (jQuery.isFunction(value)) {
										return this.each(function (j) {
											jQuery(this).removeClass(value.call(this, j, getClass(this)));
										});
									}

									if (!arguments.length) {
										return this.attr("class", "");
									}

									if (typeof value === "string" && value) {
										classes = value.match(rnotwhite) || [];

										while (elem = this[i++]) {
											curValue = getClass(elem);

											// This expression is here for better compressibility (see addClass)
											cur = elem.nodeType === 1 && (" " + curValue + " ").replace(rclass, " ");

											if (cur) {
												j = 0;
												while (clazz = classes[j++]) {

													// Remove *all* instances
													while (cur.indexOf(" " + clazz + " ") > -1) {
														cur = cur.replace(" " + clazz + " ", " ");
													}
												}

												// Only assign if different to avoid unneeded rendering.
												finalValue = jQuery.trim(cur);
												if (curValue !== finalValue) {
													jQuery.attr(elem, "class", finalValue);
												}
											}
										}
									}

									return this;
								},

								toggleClass: function (value, stateVal) {
									var type = typeof value;

									if (typeof stateVal === "boolean" && type === "string") {
										return stateVal ? this.addClass(value) : this.removeClass(value);
									}

									if (jQuery.isFunction(value)) {
										return this.each(function (i) {
											jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
										});
									}

									return this.each(function () {
										var className, i, self, classNames;

										if (type === "string") {

											// Toggle individual class names
											i = 0;
											self = jQuery(this);
											classNames = value.match(rnotwhite) || [];

											while (className = classNames[i++]) {

												// Check each className given, space separated list
												if (self.hasClass(className)) {
													self.removeClass(className);
												} else {
													self.addClass(className);
												}
											}

											// Toggle whole class name
										} else if (value === undefined || type === "boolean") {
											className = getClass(this);
											if (className) {

												// store className if set
												jQuery._data(this, "__className__", className);
											}

											// If the element has a class name or if we're passed "false",
											// then remove the whole classname (if there was one, the above saved it).
											// Otherwise bring back whatever was previously saved (if anything),
											// falling back to the empty string if nothing was stored.
											jQuery.attr(this, "class", className || value === false ? "" : jQuery._data(this, "__className__") || "");
										}
									});
								},

								hasClass: function (selector) {
									var className,
									    elem,
									    i = 0;

									className = " " + selector + " ";
									while (elem = this[i++]) {
										if (elem.nodeType === 1 && (" " + getClass(elem) + " ").replace(rclass, " ").indexOf(className) > -1) {
											return true;
										}
									}

									return false;
								}
							});

							// Return jQuery for attributes-only inclusion


							jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {

								// Handle event binding
								jQuery.fn[name] = function (data, fn) {
									return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
								};
							});

							jQuery.fn.extend({
								hover: function (fnOver, fnOut) {
									return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
								}
							});

							var location = window.location;

							var nonce = jQuery.now();

							var rquery = /\?/;

							var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

							jQuery.parseJSON = function (data) {

								// Attempt to parse using the native JSON parser first
								if (window.JSON && window.JSON.parse) {

									// Support: Android 2.3
									// Workaround failure to string-cast null input
									return window.JSON.parse(data + "");
								}

								var requireNonComma,
								    depth = null,
								    str = jQuery.trim(data + "");

								// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
								// after removing valid tokens
								return str && !jQuery.trim(str.replace(rvalidtokens, function (token, comma, open, close) {

									// Force termination if we see a misplaced comma
									if (requireNonComma && comma) {
										depth = 0;
									}

									// Perform no more replacements after returning to outermost depth
									if (depth === 0) {
										return token;
									}

									// Commas must not follow "[", "{", or ","
									requireNonComma = open || comma;

									// Determine new depth
									// array/object open ("[" or "{"): depth += true - false (increment)
									// array/object close ("]" or "}"): depth += false - true (decrement)
									// other cases ("," or primitive): depth += true - true (numeric cast)
									depth += !close - !open;

									// Remove this token
									return "";
								})) ? Function("return " + str)() : jQuery.error("Invalid JSON: " + data);
							};

							// Cross-browser xml parsing
							jQuery.parseXML = function (data) {
								var xml, tmp;
								if (!data || typeof data !== "string") {
									return null;
								}
								try {
									if (window.DOMParser) {
										// Standard
										tmp = new window.DOMParser();
										xml = tmp.parseFromString(data, "text/xml");
									} else {
										// IE
										xml = new window.ActiveXObject("Microsoft.XMLDOM");
										xml.async = "false";
										xml.loadXML(data);
									}
								} catch (e) {
									xml = undefined;
								}
								if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
									jQuery.error("Invalid XML: " + data);
								}
								return xml;
							};

							var rhash = /#.*$/,
							    rts = /([?&])_=[^&]*/,


							// IE leaves an \r character at EOL
							rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,


							// #7653, #8125, #8152: local protocol detection
							rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
							    rnoContent = /^(?:GET|HEAD)$/,
							    rprotocol = /^\/\//,
							    rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,


							/* Prefilters
        * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
        * 2) These are called:
        *    - BEFORE asking for a transport
        *    - AFTER param serialization (s.data is a string if s.processData is true)
        * 3) key is the dataType
        * 4) the catchall symbol "*" can be used
        * 5) execution will start with transport dataType and THEN continue down to "*" if needed
        */
							prefilters = {},


							/* Transports bindings
        * 1) key is the dataType
        * 2) the catchall symbol "*" can be used
        * 3) selection will start with transport dataType and THEN go to "*" if needed
        */
							transports = {},


							// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
							allTypes = "*/".concat("*"),


							// Document location
							ajaxLocation = location.href,


							// Segment location into parts
							ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

							// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
							function addToPrefiltersOrTransports(structure) {

								// dataTypeExpression is optional and defaults to "*"
								return function (dataTypeExpression, func) {

									if (typeof dataTypeExpression !== "string") {
										func = dataTypeExpression;
										dataTypeExpression = "*";
									}

									var dataType,
									    i = 0,
									    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

									if (jQuery.isFunction(func)) {

										// For each dataType in the dataTypeExpression
										while (dataType = dataTypes[i++]) {

											// Prepend if requested
											if (dataType.charAt(0) === "+") {
												dataType = dataType.slice(1) || "*";
												(structure[dataType] = structure[dataType] || []).unshift(func);

												// Otherwise append
											} else {
												(structure[dataType] = structure[dataType] || []).push(func);
											}
										}
									}
								};
							}

							// Base inspection function for prefilters and transports
							function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

								var inspected = {},
								    seekingTransport = structure === transports;

								function inspect(dataType) {
									var selected;
									inspected[dataType] = true;
									jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
										var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
										if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

											options.dataTypes.unshift(dataTypeOrTransport);
											inspect(dataTypeOrTransport);
											return false;
										} else if (seekingTransport) {
											return !(selected = dataTypeOrTransport);
										}
									});
									return selected;
								}

								return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
							}

							// A special extend for ajax options
							// that takes "flat" options (not to be deep extended)
							// Fixes #9887
							function ajaxExtend(target, src) {
								var deep,
								    key,
								    flatOptions = jQuery.ajaxSettings.flatOptions || {};

								for (key in src) {
									if (src[key] !== undefined) {
										(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
									}
								}
								if (deep) {
									jQuery.extend(true, target, deep);
								}

								return target;
							}

							/* Handles responses to an ajax request:
        * - finds the right dataType (mediates between content-type and expected dataType)
        * - returns the corresponding response
        */
							function ajaxHandleResponses(s, jqXHR, responses) {
								var firstDataType,
								    ct,
								    finalDataType,
								    type,
								    contents = s.contents,
								    dataTypes = s.dataTypes;

								// Remove auto dataType and get content-type in the process
								while (dataTypes[0] === "*") {
									dataTypes.shift();
									if (ct === undefined) {
										ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
									}
								}

								// Check if we're dealing with a known content-type
								if (ct) {
									for (type in contents) {
										if (contents[type] && contents[type].test(ct)) {
											dataTypes.unshift(type);
											break;
										}
									}
								}

								// Check to see if we have a response for the expected dataType
								if (dataTypes[0] in responses) {
									finalDataType = dataTypes[0];
								} else {

									// Try convertible dataTypes
									for (type in responses) {
										if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
											finalDataType = type;
											break;
										}
										if (!firstDataType) {
											firstDataType = type;
										}
									}

									// Or just use first one
									finalDataType = finalDataType || firstDataType;
								}

								// If we found a dataType
								// We add the dataType to the list if needed
								// and return the corresponding response
								if (finalDataType) {
									if (finalDataType !== dataTypes[0]) {
										dataTypes.unshift(finalDataType);
									}
									return responses[finalDataType];
								}
							}

							/* Chain conversions given the request and the original response
        * Also sets the responseXXX fields on the jqXHR instance
        */
							function ajaxConvert(s, response, jqXHR, isSuccess) {
								var conv2,
								    current,
								    conv,
								    tmp,
								    prev,
								    converters = {},


								// Work with a copy of dataTypes in case we need to modify it for conversion
								dataTypes = s.dataTypes.slice();

								// Create converters map with lowercased keys
								if (dataTypes[1]) {
									for (conv in s.converters) {
										converters[conv.toLowerCase()] = s.converters[conv];
									}
								}

								current = dataTypes.shift();

								// Convert to each sequential dataType
								while (current) {

									if (s.responseFields[current]) {
										jqXHR[s.responseFields[current]] = response;
									}

									// Apply the dataFilter if provided
									if (!prev && isSuccess && s.dataFilter) {
										response = s.dataFilter(response, s.dataType);
									}

									prev = current;
									current = dataTypes.shift();

									if (current) {

										// There's only work to do if current dataType is non-auto
										if (current === "*") {

											current = prev;

											// Convert response if prev dataType is non-auto and differs from current
										} else if (prev !== "*" && prev !== current) {

											// Seek a direct converter
											conv = converters[prev + " " + current] || converters["* " + current];

											// If none found, seek a pair
											if (!conv) {
												for (conv2 in converters) {

													// If conv2 outputs current
													tmp = conv2.split(" ");
													if (tmp[1] === current) {

														// If prev can be converted to accepted input
														conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
														if (conv) {

															// Condense equivalence converters
															if (conv === true) {
																conv = converters[conv2];

																// Otherwise, insert the intermediate dataType
															} else if (converters[conv2] !== true) {
																current = tmp[0];
																dataTypes.unshift(tmp[1]);
															}
															break;
														}
													}
												}
											}

											// Apply converter (if not an equivalence)
											if (conv !== true) {

												// Unless errors are allowed to bubble, catch and return them
												if (conv && s["throws"]) {
													// jscs:ignore requireDotNotation
													response = conv(response);
												} else {
													try {
														response = conv(response);
													} catch (e) {
														return {
															state: "parsererror",
															error: conv ? e : "No conversion from " + prev + " to " + current
														};
													}
												}
											}
										}
									}
								}

								return { state: "success", data: response };
							}

							jQuery.extend({

								// Counter for holding the number of active queries
								active: 0,

								// Last-Modified header cache for next request
								lastModified: {},
								etag: {},

								ajaxSettings: {
									url: ajaxLocation,
									type: "GET",
									isLocal: rlocalProtocol.test(ajaxLocParts[1]),
									global: true,
									processData: true,
									async: true,
									contentType: "application/x-www-form-urlencoded; charset=UTF-8",
									/*
         timeout: 0,
         data: null,
         dataType: null,
         username: null,
         password: null,
         cache: null,
         throws: false,
         traditional: false,
         headers: {},
         */

									accepts: {
										"*": allTypes,
										text: "text/plain",
										html: "text/html",
										xml: "application/xml, text/xml",
										json: "application/json, text/javascript"
									},

									contents: {
										xml: /\bxml\b/,
										html: /\bhtml/,
										json: /\bjson\b/
									},

									responseFields: {
										xml: "responseXML",
										text: "responseText",
										json: "responseJSON"
									},

									// Data converters
									// Keys separate source (or catchall "*") and destination types with a single space
									converters: {

										// Convert anything to text
										"* text": String,

										// Text to html (true = no transformation)
										"text html": true,

										// Evaluate text as a json expression
										"text json": jQuery.parseJSON,

										// Parse text as xml
										"text xml": jQuery.parseXML
									},

									// For options that shouldn't be deep extended:
									// you can add your own custom options here if
									// and when you create one that shouldn't be
									// deep extended (see ajaxExtend)
									flatOptions: {
										url: true,
										context: true
									}
								},

								// Creates a full fledged settings object into target
								// with both ajaxSettings and settings fields.
								// If target is omitted, writes into ajaxSettings.
								ajaxSetup: function (target, settings) {
									return settings ?

									// Building a settings object
									ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

									// Extending ajaxSettings
									ajaxExtend(jQuery.ajaxSettings, target);
								},

								ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
								ajaxTransport: addToPrefiltersOrTransports(transports),

								// Main method
								ajax: function (url, options) {

									// If url is an object, simulate pre-1.5 signature
									if (typeof url === "object") {
										options = url;
										url = undefined;
									}

									// Force options to be an object
									options = options || {};

									var

									// Cross-domain detection vars
									parts,


									// Loop variable
									i,


									// URL without anti-cache param
									cacheURL,


									// Response headers as string
									responseHeadersString,


									// timeout handle
									timeoutTimer,


									// To know if global events are to be dispatched
									fireGlobals,
									    transport,


									// Response headers
									responseHeaders,


									// Create the final options object
									s = jQuery.ajaxSetup({}, options),


									// Callbacks context
									callbackContext = s.context || s,


									// Context for global events is callbackContext if it is a DOM node or jQuery collection
									globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


									// Deferreds
									deferred = jQuery.Deferred(),
									    completeDeferred = jQuery.Callbacks("once memory"),


									// Status-dependent callbacks
									statusCode = s.statusCode || {},


									// Headers (they are sent all at once)
									requestHeaders = {},
									    requestHeadersNames = {},


									// The jqXHR state
									state = 0,


									// Default abort message
									strAbort = "canceled",


									// Fake xhr
									jqXHR = {
										readyState: 0,

										// Builds headers hashtable if needed
										getResponseHeader: function (key) {
											var match;
											if (state === 2) {
												if (!responseHeaders) {
													responseHeaders = {};
													while (match = rheaders.exec(responseHeadersString)) {
														responseHeaders[match[1].toLowerCase()] = match[2];
													}
												}
												match = responseHeaders[key.toLowerCase()];
											}
											return match == null ? null : match;
										},

										// Raw string
										getAllResponseHeaders: function () {
											return state === 2 ? responseHeadersString : null;
										},

										// Caches the header
										setRequestHeader: function (name, value) {
											var lname = name.toLowerCase();
											if (!state) {
												name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
												requestHeaders[name] = value;
											}
											return this;
										},

										// Overrides response content-type header
										overrideMimeType: function (type) {
											if (!state) {
												s.mimeType = type;
											}
											return this;
										},

										// Status-dependent callbacks
										statusCode: function (map) {
											var code;
											if (map) {
												if (state < 2) {
													for (code in map) {

														// Lazy-add the new callback in a way that preserves old ones
														statusCode[code] = [statusCode[code], map[code]];
													}
												} else {

													// Execute the appropriate callbacks
													jqXHR.always(map[jqXHR.status]);
												}
											}
											return this;
										},

										// Cancel the request
										abort: function (statusText) {
											var finalText = statusText || strAbort;
											if (transport) {
												transport.abort(finalText);
											}
											done(0, finalText);
											return this;
										}
									};

									// Attach deferreds
									deferred.promise(jqXHR).complete = completeDeferred.add;
									jqXHR.success = jqXHR.done;
									jqXHR.error = jqXHR.fail;

									// Remove hash character (#7531: and string promotion)
									// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
									// Handle falsy url in the settings object (#10093: consistency with old signature)
									// We also use the url parameter if available
									s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");

									// Alias method option to type as per ticket #12004
									s.type = options.method || options.type || s.method || s.type;

									// Extract dataTypes list
									s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

									// A cross-domain request is in order when we have a protocol:host:port mismatch
									if (s.crossDomain == null) {
										parts = rurl.exec(s.url.toLowerCase());
										s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))));
									}

									// Convert data if not already a string
									if (s.data && s.processData && typeof s.data !== "string") {
										s.data = jQuery.param(s.data, s.traditional);
									}

									// Apply prefilters
									inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

									// If request was aborted inside a prefilter, stop there
									if (state === 2) {
										return jqXHR;
									}

									// We can fire global events as of now if asked to
									// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
									fireGlobals = jQuery.event && s.global;

									// Watch for a new set of requests
									if (fireGlobals && jQuery.active++ === 0) {
										jQuery.event.trigger("ajaxStart");
									}

									// Uppercase the type
									s.type = s.type.toUpperCase();

									// Determine if request has content
									s.hasContent = !rnoContent.test(s.type);

									// Save the URL in case we're toying with the If-Modified-Since
									// and/or If-None-Match header later on
									cacheURL = s.url;

									// More options handling for requests with no content
									if (!s.hasContent) {

										// If data is available, append data to url
										if (s.data) {
											cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;

											// #9682: remove data so that it's not used in an eventual retry
											delete s.data;
										}

										// Add anti-cache in url if needed
										if (s.cache === false) {
											s.url = rts.test(cacheURL) ?

											// If there is already a '_' parameter, set its value
											cacheURL.replace(rts, "$1_=" + nonce++) :

											// Otherwise add one to the end
											cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
										}
									}

									// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
									if (s.ifModified) {
										if (jQuery.lastModified[cacheURL]) {
											jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
										}
										if (jQuery.etag[cacheURL]) {
											jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
										}
									}

									// Set the correct header, if data is being sent
									if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
										jqXHR.setRequestHeader("Content-Type", s.contentType);
									}

									// Set the Accepts header for the server, depending on the dataType
									jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

									// Check for headers option
									for (i in s.headers) {
										jqXHR.setRequestHeader(i, s.headers[i]);
									}

									// Allow custom headers/mimetypes and early abort
									if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

										// Abort if not done already and return
										return jqXHR.abort();
									}

									// aborting is no longer a cancellation
									strAbort = "abort";

									// Install callbacks on deferreds
									for (i in { success: 1, error: 1, complete: 1 }) {
										jqXHR[i](s[i]);
									}

									// Get transport
									transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

									// If no transport, we auto-abort
									if (!transport) {
										done(-1, "No Transport");
									} else {
										jqXHR.readyState = 1;

										// Send global event
										if (fireGlobals) {
											globalEventContext.trigger("ajaxSend", [jqXHR, s]);
										}

										// If request was aborted inside ajaxSend, stop there
										if (state === 2) {
											return jqXHR;
										}

										// Timeout
										if (s.async && s.timeout > 0) {
											timeoutTimer = window.setTimeout(function () {
												jqXHR.abort("timeout");
											}, s.timeout);
										}

										try {
											state = 1;
											transport.send(requestHeaders, done);
										} catch (e) {

											// Propagate exception as error if not done
											if (state < 2) {
												done(-1, e);

												// Simply rethrow otherwise
											} else {
												throw e;
											}
										}
									}

									// Callback for when everything is done
									function done(status, nativeStatusText, responses, headers) {
										var isSuccess,
										    success,
										    error,
										    response,
										    modified,
										    statusText = nativeStatusText;

										// Called once
										if (state === 2) {
											return;
										}

										// State is "done" now
										state = 2;

										// Clear timeout if it exists
										if (timeoutTimer) {
											window.clearTimeout(timeoutTimer);
										}

										// Dereference transport for early garbage collection
										// (no matter how long the jqXHR object will be used)
										transport = undefined;

										// Cache response headers
										responseHeadersString = headers || "";

										// Set readyState
										jqXHR.readyState = status > 0 ? 4 : 0;

										// Determine if successful
										isSuccess = status >= 200 && status < 300 || status === 304;

										// Get response data
										if (responses) {
											response = ajaxHandleResponses(s, jqXHR, responses);
										}

										// Convert no matter what (that way responseXXX fields are always set)
										response = ajaxConvert(s, response, jqXHR, isSuccess);

										// If successful, handle type chaining
										if (isSuccess) {

											// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
											if (s.ifModified) {
												modified = jqXHR.getResponseHeader("Last-Modified");
												if (modified) {
													jQuery.lastModified[cacheURL] = modified;
												}
												modified = jqXHR.getResponseHeader("etag");
												if (modified) {
													jQuery.etag[cacheURL] = modified;
												}
											}

											// if no content
											if (status === 204 || s.type === "HEAD") {
												statusText = "nocontent";

												// if not modified
											} else if (status === 304) {
												statusText = "notmodified";

												// If we have data, let's convert it
											} else {
												statusText = response.state;
												success = response.data;
												error = response.error;
												isSuccess = !error;
											}
										} else {

											// We extract error from statusText
											// then normalize statusText and status for non-aborts
											error = statusText;
											if (status || !statusText) {
												statusText = "error";
												if (status < 0) {
													status = 0;
												}
											}
										}

										// Set data for the fake xhr object
										jqXHR.status = status;
										jqXHR.statusText = (nativeStatusText || statusText) + "";

										// Success/Error
										if (isSuccess) {
											deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
										} else {
											deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
										}

										// Status-dependent callbacks
										jqXHR.statusCode(statusCode);
										statusCode = undefined;

										if (fireGlobals) {
											globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
										}

										// Complete
										completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

										if (fireGlobals) {
											globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

											// Handle the global AJAX counter
											if (! --jQuery.active) {
												jQuery.event.trigger("ajaxStop");
											}
										}
									}

									return jqXHR;
								},

								getJSON: function (url, data, callback) {
									return jQuery.get(url, data, callback, "json");
								},

								getScript: function (url, callback) {
									return jQuery.get(url, undefined, callback, "script");
								}
							});

							jQuery.each(["get", "post"], function (i, method) {
								jQuery[method] = function (url, data, callback, type) {

									// shift arguments if data argument was omitted
									if (jQuery.isFunction(data)) {
										type = type || callback;
										callback = data;
										data = undefined;
									}

									// The url can be an options object (which then must have .url)
									return jQuery.ajax(jQuery.extend({
										url: url,
										type: method,
										dataType: type,
										data: data,
										success: callback
									}, jQuery.isPlainObject(url) && url));
								};
							});

							jQuery._evalUrl = function (url) {
								return jQuery.ajax({
									url: url,

									// Make this explicit, since user can override this through ajaxSetup (#11264)
									type: "GET",
									dataType: "script",
									cache: true,
									async: false,
									global: false,
									"throws": true
								});
							};

							jQuery.fn.extend({
								wrapAll: function (html) {
									if (jQuery.isFunction(html)) {
										return this.each(function (i) {
											jQuery(this).wrapAll(html.call(this, i));
										});
									}

									if (this[0]) {

										// The elements to wrap the target around
										var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

										if (this[0].parentNode) {
											wrap.insertBefore(this[0]);
										}

										wrap.map(function () {
											var elem = this;

											while (elem.firstChild && elem.firstChild.nodeType === 1) {
												elem = elem.firstChild;
											}

											return elem;
										}).append(this);
									}

									return this;
								},

								wrapInner: function (html) {
									if (jQuery.isFunction(html)) {
										return this.each(function (i) {
											jQuery(this).wrapInner(html.call(this, i));
										});
									}

									return this.each(function () {
										var self = jQuery(this),
										    contents = self.contents();

										if (contents.length) {
											contents.wrapAll(html);
										} else {
											self.append(html);
										}
									});
								},

								wrap: function (html) {
									var isFunction = jQuery.isFunction(html);

									return this.each(function (i) {
										jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
									});
								},

								unwrap: function () {
									return this.parent().each(function () {
										if (!jQuery.nodeName(this, "body")) {
											jQuery(this).replaceWith(this.childNodes);
										}
									}).end();
								}
							});

							function getDisplay(elem) {
								return elem.style && elem.style.display || jQuery.css(elem, "display");
							}

							function filterHidden(elem) {
								while (elem && elem.nodeType === 1) {
									if (getDisplay(elem) === "none" || elem.type === "hidden") {
										return true;
									}
									elem = elem.parentNode;
								}
								return false;
							}

							jQuery.expr.filters.hidden = function (elem) {

								// Support: Opera <= 12.12
								// Opera reports offsetWidths and offsetHeights less than zero on some elements
								return support.reliableHiddenOffsets() ? elem.offsetWidth <= 0 && elem.offsetHeight <= 0 && !elem.getClientRects().length : filterHidden(elem);
							};

							jQuery.expr.filters.visible = function (elem) {
								return !jQuery.expr.filters.hidden(elem);
							};

							var r20 = /%20/g,
							    rbracket = /\[\]$/,
							    rCRLF = /\r?\n/g,
							    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
							    rsubmittable = /^(?:input|select|textarea|keygen)/i;

							function buildParams(prefix, obj, traditional, add) {
								var name;

								if (jQuery.isArray(obj)) {

									// Serialize array item.
									jQuery.each(obj, function (i, v) {
										if (traditional || rbracket.test(prefix)) {

											// Treat each array item as a scalar.
											add(prefix, v);
										} else {

											// Item is non-scalar (array or object), encode its numeric index.
											buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
										}
									});
								} else if (!traditional && jQuery.type(obj) === "object") {

									// Serialize object item.
									for (name in obj) {
										buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
									}
								} else {

									// Serialize scalar item.
									add(prefix, obj);
								}
							}

							// Serialize an array of form elements or a set of
							// key/values into a query string
							jQuery.param = function (a, traditional) {
								var prefix,
								    s = [],
								    add = function (key, value) {

									// If value is a function, invoke it and return its value
									value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
									s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
								};

								// Set traditional to true for jQuery <= 1.3.2 behavior.
								if (traditional === undefined) {
									traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
								}

								// If an array was passed in, assume that it is an array of form elements.
								if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

									// Serialize the form elements
									jQuery.each(a, function () {
										add(this.name, this.value);
									});
								} else {

									// If traditional, encode the "old" way (the way 1.3.2 or older
									// did it), otherwise encode params recursively.
									for (prefix in a) {
										buildParams(prefix, a[prefix], traditional, add);
									}
								}

								// Return the resulting serialization
								return s.join("&").replace(r20, "+");
							};

							jQuery.fn.extend({
								serialize: function () {
									return jQuery.param(this.serializeArray());
								},
								serializeArray: function () {
									return this.map(function () {

										// Can add propHook for "elements" to filter or add form elements
										var elements = jQuery.prop(this, "elements");
										return elements ? jQuery.makeArray(elements) : this;
									}).filter(function () {
										var type = this.type;

										// Use .is(":disabled") so that fieldset[disabled] works
										return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
									}).map(function (i, elem) {
										var val = jQuery(this).val();

										return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
											return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
										}) : { name: elem.name, value: val.replace(rCRLF, "\r\n") };
									}).get();
								}
							});

							// Create the request object
							// (This is still attached to ajaxSettings for backward compatibility)
							jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

							// Support: IE6-IE8
							function () {

								// XHR cannot access local files, always use ActiveX for that case
								if (this.isLocal) {
									return createActiveXHR();
								}

								// Support: IE 9-11
								// IE seems to error on cross-domain PATCH requests when ActiveX XHR
								// is used. In IE 9+ always use the native XHR.
								// Note: this condition won't catch Edge as it doesn't define
								// document.documentMode but it also doesn't support ActiveX so it won't
								// reach this code.
								if (document.documentMode > 8) {
									return createStandardXHR();
								}

								// Support: IE<9
								// oldIE XHR does not support non-RFC2616 methods (#13240)
								// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
								// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
								// Although this check for six methods instead of eight
								// since IE also does not support "trace" and "connect"
								return (/^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR()
								);
							} :

							// For all other browsers, use the standard XMLHttpRequest object
							createStandardXHR;

							var xhrId = 0,
							    xhrCallbacks = {},
							    xhrSupported = jQuery.ajaxSettings.xhr();

							// Support: IE<10
							// Open requests must be manually aborted on unload (#5280)
							// See https://support.microsoft.com/kb/2856746 for more info
							if (window.attachEvent) {
								window.attachEvent("onunload", function () {
									for (var key in xhrCallbacks) {
										xhrCallbacks[key](undefined, true);
									}
								});
							}

							// Determine support properties
							support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
							xhrSupported = support.ajax = !!xhrSupported;

							// Create transport if the browser can provide an xhr
							if (xhrSupported) {

								jQuery.ajaxTransport(function (options) {

									// Cross domain only allowed if supported through XMLHttpRequest
									if (!options.crossDomain || support.cors) {

										var callback;

										return {
											send: function (headers, complete) {
												var i,
												    xhr = options.xhr(),
												    id = ++xhrId;

												// Open the socket
												xhr.open(options.type, options.url, options.async, options.username, options.password);

												// Apply custom fields if provided
												if (options.xhrFields) {
													for (i in options.xhrFields) {
														xhr[i] = options.xhrFields[i];
													}
												}

												// Override mime type if needed
												if (options.mimeType && xhr.overrideMimeType) {
													xhr.overrideMimeType(options.mimeType);
												}

												// X-Requested-With header
												// For cross-domain requests, seeing as conditions for a preflight are
												// akin to a jigsaw puzzle, we simply never set it to be sure.
												// (it can always be set on a per-request basis or even using ajaxSetup)
												// For same-domain requests, won't change header if already provided.
												if (!options.crossDomain && !headers["X-Requested-With"]) {
													headers["X-Requested-With"] = "XMLHttpRequest";
												}

												// Set headers
												for (i in headers) {

													// Support: IE<9
													// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
													// request header to a null-value.
													//
													// To keep consistent with other XHR implementations, cast the value
													// to string and ignore `undefined`.
													if (headers[i] !== undefined) {
														xhr.setRequestHeader(i, headers[i] + "");
													}
												}

												// Do send the request
												// This may raise an exception which is actually
												// handled in jQuery.ajax (so no try/catch here)
												xhr.send(options.hasContent && options.data || null);

												// Listener
												callback = function (_, isAbort) {
													var status, statusText, responses;

													// Was never called and is aborted or complete
													if (callback && (isAbort || xhr.readyState === 4)) {

														// Clean up
														delete xhrCallbacks[id];
														callback = undefined;
														xhr.onreadystatechange = jQuery.noop;

														// Abort manually if needed
														if (isAbort) {
															if (xhr.readyState !== 4) {
																xhr.abort();
															}
														} else {
															responses = {};
															status = xhr.status;

															// Support: IE<10
															// Accessing binary-data responseText throws an exception
															// (#11426)
															if (typeof xhr.responseText === "string") {
																responses.text = xhr.responseText;
															}

															// Firefox throws an exception when accessing
															// statusText for faulty cross-domain requests
															try {
																statusText = xhr.statusText;
															} catch (e) {

																// We normalize with Webkit giving an empty statusText
																statusText = "";
															}

															// Filter status for non standard behaviors

															// If the request is local and we have data: assume a success
															// (success with no data won't get notified, that's the best we
															// can do given current implementations)
															if (!status && options.isLocal && !options.crossDomain) {
																status = responses.text ? 200 : 404;

																// IE - #1450: sometimes returns 1223 when it should be 204
															} else if (status === 1223) {
																status = 204;
															}
														}
													}

													// Call complete if needed
													if (responses) {
														complete(status, statusText, responses, xhr.getAllResponseHeaders());
													}
												};

												// Do send the request
												// `xhr.send` may raise an exception, but it will be
												// handled in jQuery.ajax (so no try/catch here)
												if (!options.async) {

													// If we're in sync mode we fire the callback
													callback();
												} else if (xhr.readyState === 4) {

													// (IE6 & IE7) if it's in cache and has been
													// retrieved directly we need to fire the callback
													window.setTimeout(callback);
												} else {

													// Register the callback, but delay it in case `xhr.send` throws
													// Add to the list of active xhr callbacks
													xhr.onreadystatechange = xhrCallbacks[id] = callback;
												}
											},

											abort: function () {
												if (callback) {
													callback(undefined, true);
												}
											}
										};
									}
								});
							}

							// Functions to create xhrs
							function createStandardXHR() {
								try {
									return new window.XMLHttpRequest();
								} catch (e) {}
							}

							function createActiveXHR() {
								try {
									return new window.ActiveXObject("Microsoft.XMLHTTP");
								} catch (e) {}
							}

							// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
							jQuery.ajaxPrefilter(function (s) {
								if (s.crossDomain) {
									s.contents.script = false;
								}
							});

							// Install script dataType
							jQuery.ajaxSetup({
								accepts: {
									script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
								},
								contents: {
									script: /\b(?:java|ecma)script\b/
								},
								converters: {
									"text script": function (text) {
										jQuery.globalEval(text);
										return text;
									}
								}
							});

							// Handle cache's special case and global
							jQuery.ajaxPrefilter("script", function (s) {
								if (s.cache === undefined) {
									s.cache = false;
								}
								if (s.crossDomain) {
									s.type = "GET";
									s.global = false;
								}
							});

							// Bind script tag hack transport
							jQuery.ajaxTransport("script", function (s) {

								// This transport only deals with cross domain requests
								if (s.crossDomain) {

									var script,
									    head = document.head || jQuery("head")[0] || document.documentElement;

									return {

										send: function (_, callback) {

											script = document.createElement("script");

											script.async = true;

											if (s.scriptCharset) {
												script.charset = s.scriptCharset;
											}

											script.src = s.url;

											// Attach handlers for all browsers
											script.onload = script.onreadystatechange = function (_, isAbort) {

												if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {

													// Handle memory leak in IE
													script.onload = script.onreadystatechange = null;

													// Remove the script
													if (script.parentNode) {
														script.parentNode.removeChild(script);
													}

													// Dereference the script
													script = null;

													// Callback if not abort
													if (!isAbort) {
														callback(200, "success");
													}
												}
											};

											// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
											// Use native DOM manipulation to avoid our domManip AJAX trickery
											head.insertBefore(script, head.firstChild);
										},

										abort: function () {
											if (script) {
												script.onload(undefined, true);
											}
										}
									};
								}
							});

							var oldCallbacks = [],
							    rjsonp = /(=)\?(?=&|$)|\?\?/;

							// Default jsonp settings
							jQuery.ajaxSetup({
								jsonp: "callback",
								jsonpCallback: function () {
									var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
									this[callback] = true;
									return callback;
								}
							});

							// Detect, normalize options and install callbacks for jsonp requests
							jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

								var callbackName,
								    overwritten,
								    responseContainer,
								    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

								// Handle iff the expected data type is "jsonp" or we have a parameter to set
								if (jsonProp || s.dataTypes[0] === "jsonp") {

									// Get callback name, remembering preexisting value associated with it
									callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

									// Insert callback into url or form data
									if (jsonProp) {
										s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
									} else if (s.jsonp !== false) {
										s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
									}

									// Use data converter to retrieve json after script execution
									s.converters["script json"] = function () {
										if (!responseContainer) {
											jQuery.error(callbackName + " was not called");
										}
										return responseContainer[0];
									};

									// force json dataType
									s.dataTypes[0] = "json";

									// Install callback
									overwritten = window[callbackName];
									window[callbackName] = function () {
										responseContainer = arguments;
									};

									// Clean-up function (fires after converters)
									jqXHR.always(function () {

										// If previous value didn't exist - remove it
										if (overwritten === undefined) {
											jQuery(window).removeProp(callbackName);

											// Otherwise restore preexisting value
										} else {
											window[callbackName] = overwritten;
										}

										// Save back as free
										if (s[callbackName]) {

											// make sure that re-using the options doesn't screw things around
											s.jsonpCallback = originalSettings.jsonpCallback;

											// save the callback name for future use
											oldCallbacks.push(callbackName);
										}

										// Call if it was a function and we have a response
										if (responseContainer && jQuery.isFunction(overwritten)) {
											overwritten(responseContainer[0]);
										}

										responseContainer = overwritten = undefined;
									});

									// Delegate to script
									return "script";
								}
							});

							// Support: Safari 8+
							// In Safari 8 documents created via document.implementation.createHTMLDocument
							// collapse sibling forms: the second one becomes a child of the first one.
							// Because of that, this security measure has to be disabled in Safari 8.
							// https://bugs.webkit.org/show_bug.cgi?id=137337
							support.createHTMLDocument = function () {
								if (!document.implementation.createHTMLDocument) {
									return false;
								}
								var doc = document.implementation.createHTMLDocument("");
								doc.body.innerHTML = "<form></form><form></form>";
								return doc.body.childNodes.length === 2;
							}();

							// data: string of html
							// context (optional): If specified, the fragment will be created in this context,
							// defaults to document
							// keepScripts (optional): If true, will include scripts passed in the html string
							jQuery.parseHTML = function (data, context, keepScripts) {
								if (!data || typeof data !== "string") {
									return null;
								}
								if (typeof context === "boolean") {
									keepScripts = context;
									context = false;
								}

								// document.implementation stops scripts or inline event handlers from
								// being executed immediately
								context = context || (support.createHTMLDocument ? document.implementation.createHTMLDocument("") : document);

								var parsed = rsingleTag.exec(data),
								    scripts = !keepScripts && [];

								// Single tag
								if (parsed) {
									return [context.createElement(parsed[1])];
								}

								parsed = buildFragment([data], context, scripts);

								if (scripts && scripts.length) {
									jQuery(scripts).remove();
								}

								return jQuery.merge([], parsed.childNodes);
							};

							// Keep a copy of the old load method
							var _load = jQuery.fn.load;

							/**
        * Load a url into a page
        */
							jQuery.fn.load = function (url, params, callback) {
								if (typeof url !== "string" && _load) {
									return _load.apply(this, arguments);
								}

								var selector,
								    type,
								    response,
								    self = this,
								    off = url.indexOf(" ");

								if (off > -1) {
									selector = jQuery.trim(url.slice(off, url.length));
									url = url.slice(0, off);
								}

								// If it's a function
								if (jQuery.isFunction(params)) {

									// We assume that it's the callback
									callback = params;
									params = undefined;

									// Otherwise, build a param string
								} else if (params && typeof params === "object") {
									type = "POST";
								}

								// If we have elements to modify, make the request
								if (self.length > 0) {
									jQuery.ajax({
										url: url,

										// If "type" variable is undefined, then "GET" method will be used.
										// Make value of this field explicit since
										// user can override it through ajaxSetup method
										type: type || "GET",
										dataType: "html",
										data: params
									}).done(function (responseText) {

										// Save response for use in complete callback
										response = arguments;

										self.html(selector ?

										// If a selector was specified, locate the right elements in a dummy div
										// Exclude scripts to avoid IE 'Permission Denied' errors
										jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

										// Otherwise use the full result
										responseText);

										// If the request succeeds, this function gets "data", "status", "jqXHR"
										// but they are ignored because response was set above.
										// If it fails, this function gets "jqXHR", "status", "error"
									}).always(callback && function (jqXHR, status) {
										self.each(function () {
											callback.apply(self, response || [jqXHR.responseText, status, jqXHR]);
										});
									});
								}

								return this;
							};

							// Attach a bunch of functions for handling common AJAX events
							jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
								jQuery.fn[type] = function (fn) {
									return this.on(type, fn);
								};
							});

							jQuery.expr.filters.animated = function (elem) {
								return jQuery.grep(jQuery.timers, function (fn) {
									return elem === fn.elem;
								}).length;
							};

							/**
        * Gets a window from an element
        */
							function getWindow(elem) {
								return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
							}

							jQuery.offset = {
								setOffset: function (elem, options, i) {
									var curPosition,
									    curLeft,
									    curCSSTop,
									    curTop,
									    curOffset,
									    curCSSLeft,
									    calculatePosition,
									    position = jQuery.css(elem, "position"),
									    curElem = jQuery(elem),
									    props = {};

									// set position first, in-case top/left are set even on static elem
									if (position === "static") {
										elem.style.position = "relative";
									}

									curOffset = curElem.offset();
									curCSSTop = jQuery.css(elem, "top");
									curCSSLeft = jQuery.css(elem, "left");
									calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1;

									// need to be able to calculate position if either top or left
									// is auto and position is either absolute or fixed
									if (calculatePosition) {
										curPosition = curElem.position();
										curTop = curPosition.top;
										curLeft = curPosition.left;
									} else {
										curTop = parseFloat(curCSSTop) || 0;
										curLeft = parseFloat(curCSSLeft) || 0;
									}

									if (jQuery.isFunction(options)) {

										// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
										options = options.call(elem, i, jQuery.extend({}, curOffset));
									}

									if (options.top != null) {
										props.top = options.top - curOffset.top + curTop;
									}
									if (options.left != null) {
										props.left = options.left - curOffset.left + curLeft;
									}

									if ("using" in options) {
										options.using.call(elem, props);
									} else {
										curElem.css(props);
									}
								}
							};

							jQuery.fn.extend({
								offset: function (options) {
									if (arguments.length) {
										return options === undefined ? this : this.each(function (i) {
											jQuery.offset.setOffset(this, options, i);
										});
									}

									var docElem,
									    win,
									    box = { top: 0, left: 0 },
									    elem = this[0],
									    doc = elem && elem.ownerDocument;

									if (!doc) {
										return;
									}

									docElem = doc.documentElement;

									// Make sure it's not a disconnected DOM node
									if (!jQuery.contains(docElem, elem)) {
										return box;
									}

									// If we don't have gBCR, just use 0,0 rather than error
									// BlackBerry 5, iOS 3 (original iPhone)
									if (typeof elem.getBoundingClientRect !== "undefined") {
										box = elem.getBoundingClientRect();
									}
									win = getWindow(doc);
									return {
										top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
										left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
									};
								},

								position: function () {
									if (!this[0]) {
										return;
									}

									var offsetParent,
									    offset,
									    parentOffset = { top: 0, left: 0 },
									    elem = this[0];

									// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
									// because it is its only offset parent
									if (jQuery.css(elem, "position") === "fixed") {

										// we assume that getBoundingClientRect is available when computed position is fixed
										offset = elem.getBoundingClientRect();
									} else {

										// Get *real* offsetParent
										offsetParent = this.offsetParent();

										// Get correct offsets
										offset = this.offset();
										if (!jQuery.nodeName(offsetParent[0], "html")) {
											parentOffset = offsetParent.offset();
										}

										// Add offsetParent borders
										parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
										parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true);
									}

									// Subtract parent offsets and element margins
									// note: when an element has margin: auto the offsetLeft and marginLeft
									// are the same in Safari causing offset.left to incorrectly be 0
									return {
										top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
										left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
									};
								},

								offsetParent: function () {
									return this.map(function () {
										var offsetParent = this.offsetParent;

										while (offsetParent && !jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static") {
											offsetParent = offsetParent.offsetParent;
										}
										return offsetParent || documentElement;
									});
								}
							});

							// Create scrollLeft and scrollTop methods
							jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
								var top = /Y/.test(prop);

								jQuery.fn[method] = function (val) {
									return access(this, function (elem, method, val) {
										var win = getWindow(elem);

										if (val === undefined) {
											return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
										}

										if (win) {
											win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
										} else {
											elem[method] = val;
										}
									}, method, val, arguments.length, null);
								};
							});

							// Support: Safari<7-8+, Chrome<37-44+
							// Add the top/left cssHooks using jQuery.fn.position
							// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
							// getComputedStyle returns percent when specified for top/left/bottom/right
							// rather than make the css module depend on the offset module, we just check for it here
							jQuery.each(["top", "left"], function (i, prop) {
								jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
									if (computed) {
										computed = curCSS(elem, prop);

										// if curCSS returns percentage, fallback to offset
										return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
									}
								});
							});

							// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
							jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
								jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

									// margin is only for outerHeight, outerWidth
									jQuery.fn[funcName] = function (margin, value) {
										var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
										    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

										return access(this, function (elem, type, value) {
											var doc;

											if (jQuery.isWindow(elem)) {

												// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
												// isn't a whole lot we can do. See pull request at this URL for discussion:
												// https://github.com/jquery/jquery/pull/764
												return elem.document.documentElement["client" + name];
											}

											// Get document width or height
											if (elem.nodeType === 9) {
												doc = elem.documentElement;

												// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
												// whichever is greatest
												// unfortunately, this causes bug #3838 in IE6/8 only,
												// but there is currently no good, small way to fix it.
												return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
											}

											return value === undefined ?

											// Get width or height on the element, requesting but not forcing parseFloat
											jQuery.css(elem, type, extra) :

											// Set width or height on the element
											jQuery.style(elem, type, value, extra);
										}, type, chainable ? margin : undefined, chainable, null);
									};
								});
							});

							jQuery.fn.extend({

								bind: function (types, data, fn) {
									return this.on(types, null, data, fn);
								},
								unbind: function (types, fn) {
									return this.off(types, null, fn);
								},

								delegate: function (selector, types, data, fn) {
									return this.on(types, selector, data, fn);
								},
								undelegate: function (selector, types, fn) {

									// ( namespace ) or ( selector, types [, fn] )
									return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
								}
							});

							// The number of elements contained in the matched element set
							jQuery.fn.size = function () {
								return this.length;
							};

							jQuery.fn.andSelf = jQuery.fn.addBack;

							// Register as a named AMD module, since jQuery can be concatenated with other
							// files that may use define, but not via a proper concatenation script that
							// understands anonymous AMD modules. A named AMD is safest and most robust
							// way to register. Lowercase jquery is used because AMD module names are
							// derived from file names, and jQuery is normally delivered in a lowercase
							// file name. Do this after creating the global so that if an AMD module wants
							// to call noConflict to hide this version of jQuery, it will work.

							// Note that for maximum portability, libraries that are not jQuery should
							// declare themselves as anonymous modules, and avoid setting a global if an
							// AMD loader is present. jQuery is a special case. For more information, see
							// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

							if (typeof define === "function" && define.amd) {
								define("jquery", [], function () {
									return jQuery;
								});
							}

							var

							// Map over jQuery in case of overwrite
							_jQuery = window.jQuery,


							// Map over the $ in case of overwrite
							_$ = window.$;

							jQuery.noConflict = function (deep) {
								if (window.$ === jQuery) {
									window.$ = _$;
								}

								if (deep && window.jQuery === jQuery) {
									window.jQuery = _jQuery;
								}

								return jQuery;
							};

							// Expose jQuery and $ identifiers, even in
							// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
							// and CommonJS for browser emulators (#13566)
							if (!noGlobal) {
								window.jQuery = window.$ = jQuery;
							}

							return jQuery;
						});

						/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					} } } } }, {
		"extensions": [".js", ".json"]
	});

	var _exports2 = _require2("/node_modules/meteor/jquery/main.js");

	/* Exports */
	Package._define("jquery", _exports2, {
		$: $,
		jQuery: jQuery
	});
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Package-scope variables */
  var _exports, _;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/pre.js                                                                            //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Define an object named exports. This will cause underscore.js to put `_` as a
    // field on it, instead of in the global namespace.  See also post.js.
    _exports = {};

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/underscore.js                                                                     //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //     Underscore.js 1.5.2
    //     http://underscorejs.org
    //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.

    (function () {

      // Baseline setup
      // --------------

      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;

      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;

      // Establish the object that gets returned to break out of a loop iteration.
      var breaker = {};

      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype,
          ObjProto = Object.prototype,
          FuncProto = Function.prototype;

      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push,
          slice = ArrayProto.slice,
          concat = ArrayProto.concat,
          toString = ObjProto.toString,
          hasOwnProperty = ObjProto.hasOwnProperty;

      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeForEach = ArrayProto.forEach,
          nativeMap = ArrayProto.map,
          nativeReduce = ArrayProto.reduce,
          nativeReduceRight = ArrayProto.reduceRight,
          nativeFilter = ArrayProto.filter,
          nativeEvery = ArrayProto.every,
          nativeSome = ArrayProto.some,
          nativeIndexOf = ArrayProto.indexOf,
          nativeLastIndexOf = ArrayProto.lastIndexOf,
          nativeIsArray = Array.isArray,
          nativeKeys = Object.keys,
          nativeBind = FuncProto.bind;

      // Create a safe reference to the Underscore object for use below.
      var _ = function (obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
      };

      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object via a string identifier,
      // for Closure Compiler "advanced" mode.
      if (typeof _exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          _exports = module.exports = _;
        }
        _exports._ = _;
      } else {
        root._ = _;
      }

      // Current version.
      _.VERSION = '1.5.2';

      // Collection Functions
      // --------------------

      // METEOR CHANGE: Define _isArguments instead of depending on
      // _.isArguments which is defined using each. In looksLikeArray
      // (which each depends on), we then use _isArguments instead of
      // _.isArguments.
      var _isArguments = function (obj) {
        return toString.call(obj) === '[object Arguments]';
      };
      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_isArguments(arguments)) {
        _isArguments = function (obj) {
          return !!(obj && hasOwnProperty.call(obj, 'callee') && typeof obj.callee === 'function');
        };
      }

      // METEOR CHANGE: _.each({length: 5}) should be treated like an object, not an
      // array. This looksLikeArray function is introduced by Meteor, and replaces
      // all instances of `obj.length === +obj.length`.
      // https://github.com/meteor/meteor/issues/594
      // https://github.com/jashkenas/underscore/issues/770
      var looksLikeArray = function (obj) {
        return obj.length === +obj.length
        // _.isArguments not yet necessarily defined here
        && (_isArguments(obj) || obj.constructor !== Object);
      };

      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles objects with the built-in `forEach`, arrays, and raw objects.
      // Delegates to **ECMAScript 5**'s native `forEach` if available.
      var each = _.each = _.forEach = function (obj, iterator, context) {
        if (obj == null) return;
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (looksLikeArray(obj)) {
          for (var i = 0, length = obj.length; i < length; i++) {
            if (iterator.call(context, obj[i], i, obj) === breaker) return;
          }
        } else {
          var keys = _.keys(obj);
          for (var i = 0, length = keys.length; i < length; i++) {
            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
          }
        }
      };

      // Return the results of applying the iterator to each element.
      // Delegates to **ECMAScript 5**'s native `map` if available.
      _.map = _.collect = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
        each(obj, function (value, index, list) {
          results.push(iterator.call(context, value, index, list));
        });
        return results;
      };

      var reduceError = 'Reduce of empty array with no initial value';

      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
      _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduce && obj.reduce === nativeReduce) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        }
        each(obj, function (value, index, list) {
          if (!initial) {
            memo = value;
            initial = true;
          } else {
            memo = iterator.call(context, memo, value, index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // The right-associative version of reduce, also known as `foldr`.
      // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
      _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (obj == null) obj = [];
        if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
          if (context) iterator = _.bind(iterator, context);
          return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        }
        var length = obj.length;
        if (!looksLikeArray(obj)) {
          var keys = _.keys(obj);
          length = keys.length;
        }
        each(obj, function (value, index, list) {
          index = keys ? keys[--length] : --length;
          if (!initial) {
            memo = obj[index];
            initial = true;
          } else {
            memo = iterator.call(context, memo, obj[index], index, list);
          }
        });
        if (!initial) throw new TypeError(reduceError);
        return memo;
      };

      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function (obj, iterator, context) {
        var result;
        any(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) {
            result = value;
            return true;
          }
        });
        return result;
      };

      // Return all the elements that pass a truth test.
      // Delegates to **ECMAScript 5**'s native `filter` if available.
      // Aliased as `select`.
      _.filter = _.select = function (obj, iterator, context) {
        var results = [];
        if (obj == null) return results;
        if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
        each(obj, function (value, index, list) {
          if (iterator.call(context, value, index, list)) results.push(value);
        });
        return results;
      };

      // Return all the elements for which a truth test fails.
      _.reject = function (obj, iterator, context) {
        return _.filter(obj, function (value, index, list) {
          return !iterator.call(context, value, index, list);
        }, context);
      };

      // Determine whether all of the elements match a truth test.
      // Delegates to **ECMAScript 5**'s native `every` if available.
      // Aliased as `all`.
      _.every = _.all = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = true;
        if (obj == null) return result;
        if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
        each(obj, function (value, index, list) {
          if (!(result = result && iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if at least one element in the object matches a truth test.
      // Delegates to **ECMAScript 5**'s native `some` if available.
      // Aliased as `any`.
      var any = _.some = _.any = function (obj, iterator, context) {
        iterator || (iterator = _.identity);
        var result = false;
        if (obj == null) return result;
        if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
        each(obj, function (value, index, list) {
          if (result || (result = iterator.call(context, value, index, list))) return breaker;
        });
        return !!result;
      };

      // Determine if the array or object contains a given value (using `===`).
      // Aliased as `include`.
      _.contains = _.include = function (obj, target) {
        if (obj == null) return false;
        if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
        return any(obj, function (value) {
          return value === target;
        });
      };

      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          return (isFunc ? method : value[method]).apply(value, args);
        });
      };

      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function (obj, key) {
        return _.map(obj, function (value) {
          return value[key];
        });
      };

      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function (obj, attrs, first) {
        if (_.isEmpty(attrs)) return first ? void 0 : [];
        return _[first ? 'find' : 'filter'](obj, function (value) {
          for (var key in attrs) {
            if (attrs[key] !== value[key]) return false;
          }
          return true;
        });
      };

      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function (obj, attrs) {
        return _.where(obj, attrs, true);
      };

      // Return the maximum element or (element-based computation).
      // Can't optimize arrays of integers longer than 65,535 elements.
      // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
      _.max = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.max.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return -Infinity;
        var result = { computed: -Infinity, value: -Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed > result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Return the minimum element (or element-based computation).
      _.min = function (obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
          return Math.min.apply(Math, obj);
        }
        if (!iterator && _.isEmpty(obj)) return Infinity;
        var result = { computed: Infinity, value: Infinity };
        each(obj, function (value, index, list) {
          var computed = iterator ? iterator.call(context, value, index, list) : value;
          computed < result.computed && (result = { value: value, computed: computed });
        });
        return result.value;
      };

      // Shuffle an array, using the modern version of the 
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      _.shuffle = function (obj) {
        var rand;
        var index = 0;
        var shuffled = [];
        each(obj, function (value) {
          rand = _.random(index++);
          shuffled[index - 1] = shuffled[rand];
          shuffled[rand] = value;
        });
        return shuffled;
      };

      // Sample **n** random values from an array.
      // If **n** is not specified, returns a single random element from the array.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function (obj, n, guard) {
        if (arguments.length < 2 || guard) {
          return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
      };

      // An internal function to generate lookup iterators.
      var lookupIterator = function (value) {
        return _.isFunction(value) ? value : function (obj) {
          return obj[value];
        };
      };

      // Sort the object's values by a criterion produced by an iterator.
      _.sortBy = function (obj, value, context) {
        var iterator = lookupIterator(value);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iterator.call(context, value, index, list)
          };
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0) return 1;
            if (a < b || b === void 0) return -1;
          }
          return left.index - right.index;
        }), 'value');
      };

      // An internal function used for aggregate "group by" operations.
      var group = function (behavior) {
        return function (obj, value, context) {
          var result = {};
          var iterator = value == null ? _.identity : lookupIterator(value);
          each(obj, function (value, index) {
            var key = iterator.call(context, value, index, obj);
            behavior(result, key, value);
          });
          return result;
        };
      };

      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function (result, key, value) {
        (_.has(result, key) ? result[key] : result[key] = []).push(value);
      });

      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function (result, key, value) {
        result[key] = value;
      });

      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function (result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
      });

      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function (array, obj, iterator, context) {
        iterator = iterator == null ? _.identity : lookupIterator(iterator);
        var value = iterator.call(context, obj);
        var low = 0,
            high = array.length;
        while (low < high) {
          var mid = low + high >>> 1;
          iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
      };

      // Safely create a real, live array from anything iterable.
      _.toArray = function (obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (looksLikeArray(obj)) return _.map(obj, _.identity);
        return _.values(obj);
      };

      // Return the number of elements in an object.
      _.size = function (obj) {
        if (obj == null) return 0;
        return looksLikeArray(obj) ? obj.length : _.keys(obj).length;
      };

      // Array Functions
      // ---------------

      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null) return void 0;
        return n == null || guard ? array[0] : slice.call(array, 0, n);
      };

      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N. The **guard** check allows it to work with
      // `_.map`.
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
      };

      // Get the last element of an array. Passing **n** will return the last N
      // values in the array. The **guard** check allows it to work with `_.map`.
      _.last = function (array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) {
          return array[array.length - 1];
        } else {
          return slice.call(array, Math.max(array.length - n, 0));
        }
      };

      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array. The **guard**
      // check allows it to work with `_.map`.
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };

      // Trim out all falsy values from an array.
      _.compact = function (array) {
        return _.filter(array, _.identity);
      };

      // Internal implementation of a recursive `flatten` function.
      var flatten = function (input, shallow, output) {
        if (shallow && _.every(input, _.isArray)) {
          return concat.apply(output, input);
        }
        each(input, function (value) {
          if (_.isArray(value) || _.isArguments(value)) {
            shallow ? push.apply(output, value) : flatten(value, shallow, output);
          } else {
            output.push(value);
          }
        });
        return output;
      };

      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, []);
      };

      // Return a version of the array that does not contain the specified value(s).
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1));
      };

      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function (array, isSorted, iterator, context) {
        if (_.isFunction(isSorted)) {
          context = iterator;
          iterator = isSorted;
          isSorted = false;
        }
        var initial = iterator ? _.map(array, iterator, context) : array;
        var results = [];
        var seen = [];
        each(initial, function (value, index) {
          if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
            seen.push(value);
            results.push(array[index]);
          }
        });
        return results;
      };

      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function () {
        return _.uniq(_.flatten(arguments, true));
      };

      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function (array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function (item) {
          return _.every(rest, function (other) {
            return _.indexOf(other, item) >= 0;
          });
        });
      };

      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function (array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function (value) {
          return !_.contains(rest, value);
        });
      };

      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function () {
        var length = _.max(_.pluck(arguments, "length").concat(0));
        var results = new Array(length);
        for (var i = 0; i < length; i++) {
          results[i] = _.pluck(arguments, '' + i);
        }
        return results;
      };

      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function (list, values) {
        if (list == null) return {};
        var result = {};
        for (var i = 0, length = list.length; i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };

      // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
      // we need this function. Return the position of the first occurrence of an
      // item in an array, or -1 if the item is not included in the array.
      // Delegates to **ECMAScript 5**'s native `indexOf` if available.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = function (array, item, isSorted) {
        if (array == null) return -1;
        var i = 0,
            length = array.length;
        if (isSorted) {
          if (typeof isSorted == 'number') {
            i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
          } else {
            i = _.sortedIndex(array, item);
            return array[i] === item ? i : -1;
          }
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (; i < length; i++) if (array[i] === item) return i;
        return -1;
      };

      // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
      _.lastIndexOf = function (array, item, from) {
        if (array == null) return -1;
        var hasIndex = from != null;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
          return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        }
        var i = hasIndex ? from : array.length;
        while (i--) if (array[i] === item) return i;
        return -1;
      };

      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function (start, stop, step) {
        if (arguments.length <= 1) {
          stop = start || 0;
          start = 0;
        }
        step = arguments[2] || 1;

        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var idx = 0;
        var range = new Array(length);

        while (idx < length) {
          range[idx++] = start;
          start += step;
        }

        return range;
      };

      // Function (ahem) Functions
      // ------------------

      // Reusable constructor function for prototype setting.
      var ctor = function () {};

      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function (func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        args = slice.call(arguments, 2);
        return bound = function () {
          if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
          ctor.prototype = func.prototype;
          var self = new ctor();
          ctor.prototype = null;
          var result = func.apply(self, args.concat(slice.call(arguments)));
          if (Object(result) === result) return result;
          return self;
        };
      };

      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context.
      _.partial = function (func) {
        var args = slice.call(arguments, 1);
        return function () {
          return func.apply(this, args.concat(slice.call(arguments)));
        };
      };

      // Bind all of an object's methods to that object. Useful for ensuring that
      // all callbacks defined on an object belong to it.
      _.bindAll = function (obj) {
        var funcs = slice.call(arguments, 1);
        if (funcs.length === 0) throw new Error("bindAll must be passed function names");
        each(funcs, function (f) {
          obj[f] = _.bind(obj[f], obj);
        });
        return obj;
      };

      // Memoize an expensive function by storing its results.
      _.memoize = function (func, hasher) {
        var memo = {};
        hasher || (hasher = _.identity);
        return function () {
          var key = hasher.apply(this, arguments);
          return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
      };

      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args);
        }, wait);
      };

      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = function (func) {
        return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
      };

      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        options || (options = {});
        var later = function () {
          previous = options.leading === false ? 0 : new Date();
          timeout = null;
          result = func.apply(context, args);
        };
        return function () {
          var now = new Date();
          if (!previous && options.leading === false) previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
      };

      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function () {
          context = this;
          args = arguments;
          timestamp = new Date();
          var later = function () {
            var last = new Date() - timestamp;
            if (last < wait) {
              timeout = setTimeout(later, wait - last);
            } else {
              timeout = null;
              if (!immediate) result = func.apply(context, args);
            }
          };
          var callNow = immediate && !timeout;
          if (!timeout) {
            timeout = setTimeout(later, wait);
          }
          if (callNow) result = func.apply(context, args);
          return result;
        };
      };

      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = function (func) {
        var ran = false,
            memo;
        return function () {
          if (ran) return memo;
          ran = true;
          memo = func.apply(this, arguments);
          func = null;
          return memo;
        };
      };

      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function (func, wrapper) {
        return function () {
          var args = [func];
          push.apply(args, arguments);
          return wrapper.apply(this, args);
        };
      };

      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function () {
        var funcs = arguments;
        return function () {
          var args = arguments;
          for (var i = funcs.length - 1; i >= 0; i--) {
            args = [funcs[i].apply(this, args)];
          }
          return args[0];
        };
      };

      // Returns a function that will only be executed after being called N times.
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };

      // Object Functions
      // ----------------

      // Retrieve the names of an object's properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = nativeKeys || function (obj) {
        if (obj !== Object(obj)) throw new TypeError('Invalid object');
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        return keys;
      };

      // Retrieve the values of an object's properties.
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = new Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };

      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = new Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };

      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };

      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
      };

      // Extend a given object with all the properties in passed-in object(s).
      _.extend = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        each(keys, function (key) {
          if (key in obj) copy[key] = obj[key];
        });
        return copy;
      };

      // Return a copy of the object without the blacklisted properties.
      _.omit = function (obj) {
        var copy = {};
        var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) {
          if (!_.contains(keys, key)) copy[key] = obj[key];
        }
        return copy;
      };

      // Fill in a given object with default properties.
      _.defaults = function (obj) {
        each(slice.call(arguments, 1), function (source) {
          if (source) {
            for (var prop in source) {
              if (obj[prop] === void 0) obj[prop] = source[prop];
            }
          }
        });
        return obj;
      };

      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function (obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };

      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj;
      };

      // Internal recursive comparison function for `isEqual`.
      var eq = function (a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a == 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null) return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;
        switch (className) {
          // Strings, numbers, dates, and booleans are compared by value.
          case '[object String]':
            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
            // equivalent to `new String("5")`.
            return a == String(b);
          case '[object Number]':
            // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
            // other numeric values.
            return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
          case '[object Date]':
          case '[object Boolean]':
            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
            // millisecond representations. Note that invalid dates with millisecond representations
            // of `NaN` are not equivalent.
            return +a == +b;
          // RegExps are compared by their source patterns and flags.
          case '[object RegExp]':
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') return false;
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] == a) return bStack[length] == b;
        }
        // Objects with different constructors are not equivalent, but `Object`s
        // from different frames are.
        var aCtor = a.constructor,
            bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
          return false;
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        var size = 0,
            result = true;
        // Recursively compare objects and arrays.
        if (className == '[object Array]') {
          // Compare array lengths to determine if a deep comparison is necessary.
          size = a.length;
          result = size == b.length;
          if (result) {
            // Deep compare the contents, ignoring non-numeric properties.
            while (size--) {
              if (!(result = eq(a[size], b[size], aStack, bStack))) break;
            }
          }
        } else {
          // Deep compare objects.
          for (var key in a) {
            if (_.has(a, key)) {
              // Count the expected number of properties.
              size++;
              // Deep compare each member.
              if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
            }
          }
          // Ensure that both objects contain the same number of properties.
          if (result) {
            for (key in b) {
              if (_.has(b, key) && !size--) break;
            }
            result = !size;
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return result;
      };

      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function (a, b) {
        return eq(a, b, [], []);
      };

      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function (obj) {
        if (obj == null) return true;
        if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
        for (var key in obj) if (_.has(obj, key)) return false;
        return true;
      };

      // Is a given value a DOM element?
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1);
      };

      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) == '[object Array]';
      };

      // Is a given variable an object?
      _.isObject = function (obj) {
        return obj === Object(obj);
      };

      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
      each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) == '[object ' + name + ']';
        };
      });

      // Define a fallback version of the method in browsers (ahem, IE), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return !!(obj && _.has(obj, 'callee'));
        };
      }

      // Optimize `isFunction` if appropriate.
      if (typeof /./ !== 'function') {
        _.isFunction = function (obj) {
          return typeof obj === 'function';
        };
      }

      // Is a given object a finite number?
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
      };

      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj != +obj;
      };

      // Is a given value a boolean?
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
      };

      // Is a given value equal to null?
      _.isNull = function (obj) {
        return obj === null;
      };

      // Is a given variable undefined?
      _.isUndefined = function (obj) {
        return obj === void 0;
      };

      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function (obj, key) {
        return hasOwnProperty.call(obj, key);
      };

      // Utility Functions
      // -----------------

      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this;
      };

      // Keep the identity function around for default iterators.
      _.identity = function (value) {
        return value;
      };

      // Run a function **n** times.
      _.times = function (n, iterator, context) {
        var accum = Array(Math.max(0, n));
        for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
        return accum;
      };

      // Return a random integer between min and max (inclusive).
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };

      // List of HTML entities for escaping.
      var entityMap = {
        escape: {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;'
        }
      };
      entityMap.unescape = _.invert(entityMap.escape);

      // Regexes containing the keys and values listed immediately above.
      var entityRegexes = {
        escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
        unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
      };

      // Functions for escaping and unescaping strings to/from HTML interpolation.
      _.each(['escape', 'unescape'], function (method) {
        _[method] = function (string) {
          if (string == null) return '';
          return ('' + string).replace(entityRegexes[method], function (match) {
            return entityMap[method][match];
          });
        };
      });

      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function (object, property) {
        if (object == null) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
      };

      // Add your own custom functions to the Underscore object.
      _.mixin = function (obj) {
        each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result.call(this, func.apply(_, args));
          };
        });
      };

      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
      };

      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };

      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;

      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\t': 't',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      _.template = function (text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = new RegExp([(settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, function (match) {
            return '\\' + escapes[match];
          });

          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";

        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }

        if (data) return render(data, _);
        var template = function (data) {
          return render.call(this, data, _);
        };

        // Provide the compiled function source as a convenience for precompilation.
        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

        return template;
      };

      // Add a "chain" function, which will delegate to the wrapper.
      _.chain = function (obj) {
        return _(obj).chain();
      };

      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.

      // Helper function to continue chaining intermediate results.
      var result = function (obj) {
        return this._chain ? _(obj).chain() : obj;
      };

      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);

      // Add all mutator Array functions to the wrapper.
      each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
          return result.call(this, obj);
        };
      });

      // Add all accessor Array functions to the wrapper.
      each(['concat', 'join', 'slice'], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result.call(this, method.apply(this._wrapped, arguments));
        };
      });

      _.extend(_.prototype, {

        // Start chaining a wrapped Underscore object.
        chain: function () {
          this._chain = true;
          return this;
        },

        // Extracts the result from a wrapped and chained object.
        value: function () {
          return this._wrapped;
        }

      });
    }).call(this);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                       //
    // packages/underscore/post.js                                                                           //
    //                                                                                                       //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // This exports object was created in pre.js.  Now copy the `_` object from it
    // into the package-scope variable `_`, which will get exported.
    _ = _exports._;

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("underscore", {
    _: _
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var MongoID = Package['mongo-id'].MongoID;
  var DiffSequence = Package['diff-sequence'].DiffSequence;
  var _ = Package.underscore._;
  var Random = Package.random.Random;

  /* Package-scope variables */
  var ObserveSequence, seqChangedToEmpty, seqChangedToArray, seqChangedToCursor;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/observe-sequence/observe_sequence.js                                 //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    var warn = function () {
      if (ObserveSequence._suppressWarnings) {
        ObserveSequence._suppressWarnings--;
      } else {
        if (typeof console !== 'undefined' && console.warn) console.warn.apply(console, arguments);

        ObserveSequence._loggedWarnings++;
      }
    };

    // isArray returns true for arrays of these types:
    // standard arrays: instanceof Array === true, _.isArray(arr) === true
    // vm generated arrays: instanceOf Array === false, _.isArray(arr) === true
    // subclassed arrays: instanceof Array === true, _.isArray(arr) === false
    // see specific tests
    function isArray(arr) {
      return arr instanceof Array || _.isArray(arr);
    }

    var idStringify = MongoID.idStringify;
    var idParse = MongoID.idParse;

    ObserveSequence = {
      _suppressWarnings: 0,
      _loggedWarnings: 0,

      // A mechanism similar to cursor.observe which receives a reactive
      // function returning a sequence type and firing appropriate callbacks
      // when the value changes.
      //
      // @param sequenceFunc {Function} a reactive function returning a
      //     sequence type. The currently supported sequence types are:
      //     Array, Cursor, and null.
      //
      // @param callbacks {Object} similar to a specific subset of
      //     callbacks passed to `cursor.observe`
      //     (http://docs.meteor.com/#observe), with minor variations to
      //     support the fact that not all sequences contain objects with
      //     _id fields.  Specifically:
      //
      //     * addedAt(id, item, atIndex, beforeId)
      //     * changedAt(id, newItem, oldItem, atIndex)
      //     * removedAt(id, oldItem, atIndex)
      //     * movedTo(id, item, fromIndex, toIndex, beforeId)
      //
      // @returns {Object(stop: Function)} call 'stop' on the return value
      //     to stop observing this sequence function.
      //
      // We don't make any assumptions about our ability to compare sequence
      // elements (ie, we don't assume EJSON.equals works; maybe there is extra
      // state/random methods on the objects) so unlike cursor.observe, we may
      // sometimes call changedAt() when nothing actually changed.
      // XXX consider if we *can* make the stronger assumption and avoid
      //     no-op changedAt calls (in some cases?)
      //
      // XXX currently only supports the callbacks used by our
      // implementation of {{#each}}, but this can be expanded.
      //
      // XXX #each doesn't use the indices (though we'll eventually need
      // a way to get them when we support `@index`), but calling
      // `cursor.observe` causes the index to be calculated on every
      // callback using a linear scan (unless you turn it off by passing
      // `_no_indices`).  Any way to avoid calculating indices on a pure
      // cursor observe like we used to?
      observe: function (sequenceFunc, callbacks) {
        var lastSeq = null;
        var activeObserveHandle = null;

        // 'lastSeqArray' contains the previous value of the sequence
        // we're observing. It is an array of objects with '_id' and
        // 'item' fields.  'item' is the element in the array, or the
        // document in the cursor.
        //
        // '_id' is whichever of the following is relevant, unless it has
        // already appeared -- in which case it's randomly generated.
        //
        // * if 'item' is an object:
        //   * an '_id' field, if present
        //   * otherwise, the index in the array
        //
        // * if 'item' is a number or string, use that value
        //
        // XXX this can be generalized by allowing {{#each}} to accept a
        // general 'key' argument which could be a function, a dotted
        // field name, or the special @index value.
        var lastSeqArray = []; // elements are objects of form {_id, item}
        var computation = Tracker.autorun(function () {
          var seq = sequenceFunc();

          Tracker.nonreactive(function () {
            var seqArray; // same structure as `lastSeqArray` above.

            if (activeObserveHandle) {
              // If we were previously observing a cursor, replace lastSeqArray with
              // more up-to-date information.  Then stop the old observe.
              lastSeqArray = _.map(lastSeq.fetch(), function (doc) {
                return { _id: doc._id, item: doc };
              });
              activeObserveHandle.stop();
              activeObserveHandle = null;
            }

            if (!seq) {
              seqArray = seqChangedToEmpty(lastSeqArray, callbacks);
            } else if (isArray(seq)) {
              seqArray = seqChangedToArray(lastSeqArray, seq, callbacks);
            } else if (isStoreCursor(seq)) {
              var result /* [seqArray, activeObserveHandle] */ = seqChangedToCursor(lastSeqArray, seq, callbacks);
              seqArray = result[0];
              activeObserveHandle = result[1];
            } else {
              throw badSequenceError();
            }

            diffArray(lastSeqArray, seqArray, callbacks);
            lastSeq = seq;
            lastSeqArray = seqArray;
          });
        });

        return {
          stop: function () {
            computation.stop();
            if (activeObserveHandle) activeObserveHandle.stop();
          }
        };
      },

      // Fetch the items of `seq` into an array, where `seq` is of one of the
      // sequence types accepted by `observe`.  If `seq` is a cursor, a
      // dependency is established.
      fetch: function (seq) {
        if (!seq) {
          return [];
        } else if (isArray(seq)) {
          return seq;
        } else if (isStoreCursor(seq)) {
          return seq.fetch();
        } else {
          throw badSequenceError();
        }
      }
    };

    var badSequenceError = function () {
      return new Error("{{#each}} currently only accepts " + "arrays, cursors or falsey values.");
    };

    var isStoreCursor = function (cursor) {
      return cursor && _.isObject(cursor) && _.isFunction(cursor.observe) && _.isFunction(cursor.fetch);
    };

    // Calculates the differences between `lastSeqArray` and
    // `seqArray` and calls appropriate functions from `callbacks`.
    // Reuses Minimongo's diff algorithm implementation.
    var diffArray = function (lastSeqArray, seqArray, callbacks) {
      var diffFn = Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;
      var oldIdObjects = [];
      var newIdObjects = [];
      var posOld = {}; // maps from idStringify'd ids
      var posNew = {}; // ditto
      var posCur = {};
      var lengthCur = lastSeqArray.length;

      _.each(seqArray, function (doc, i) {
        newIdObjects.push({ _id: doc._id });
        posNew[idStringify(doc._id)] = i;
      });
      _.each(lastSeqArray, function (doc, i) {
        oldIdObjects.push({ _id: doc._id });
        posOld[idStringify(doc._id)] = i;
        posCur[idStringify(doc._id)] = i;
      });

      // Arrays can contain arbitrary objects. We don't diff the
      // objects. Instead we always fire 'changedAt' callback on every
      // object. The consumer of `observe-sequence` should deal with
      // it appropriately.
      diffFn(oldIdObjects, newIdObjects, {
        addedBefore: function (id, doc, before) {
          var position = before ? posCur[idStringify(before)] : lengthCur;

          if (before) {
            // If not adding at the end, we need to update indexes.
            // XXX this can still be improved greatly!
            _.each(posCur, function (pos, id) {
              if (pos >= position) posCur[id]++;
            });
          }

          lengthCur++;
          posCur[idStringify(id)] = position;

          callbacks.addedAt(id, seqArray[posNew[idStringify(id)]].item, position, before);
        },
        movedBefore: function (id, before) {
          if (id === before) return;

          var oldPosition = posCur[idStringify(id)];
          var newPosition = before ? posCur[idStringify(before)] : lengthCur;

          // Moving the item forward. The new element is losing one position as it
          // was removed from the old position before being inserted at the new
          // position.
          // Ex.:   0  *1*  2   3   4
          //        0   2   3  *1*  4
          // The original issued callback is "1" before "4".
          // The position of "1" is 1, the position of "4" is 4.
          // The generated move is (1) -> (3)
          if (newPosition > oldPosition) {
            newPosition--;
          }

          // Fix up the positions of elements between the old and the new positions
          // of the moved element.
          //
          // There are two cases:
          //   1. The element is moved forward. Then all the positions in between
          //   are moved back.
          //   2. The element is moved back. Then the positions in between *and* the
          //   element that is currently standing on the moved element's future
          //   position are moved forward.
          _.each(posCur, function (elCurPosition, id) {
            if (oldPosition < elCurPosition && elCurPosition < newPosition) posCur[id]--;else if (newPosition <= elCurPosition && elCurPosition < oldPosition) posCur[id]++;
          });

          // Finally, update the position of the moved element.
          posCur[idStringify(id)] = newPosition;

          callbacks.movedTo(id, seqArray[posNew[idStringify(id)]].item, oldPosition, newPosition, before);
        },
        removed: function (id) {
          var prevPosition = posCur[idStringify(id)];

          _.each(posCur, function (pos, id) {
            if (pos >= prevPosition) posCur[id]--;
          });

          delete posCur[idStringify(id)];
          lengthCur--;

          callbacks.removedAt(id, lastSeqArray[posOld[idStringify(id)]].item, prevPosition);
        }
      });

      _.each(posNew, function (pos, idString) {
        var id = idParse(idString);
        if (_.has(posOld, idString)) {
          // specifically for primitive types, compare equality before
          // firing the 'changedAt' callback. otherwise, always fire it
          // because doing a deep EJSON comparison is not guaranteed to
          // work (an array can contain arbitrary objects, and 'transform'
          // can be used on cursors). also, deep diffing is not
          // necessarily the most efficient (if only a specific subfield
          // of the object is later accessed).
          var newItem = seqArray[pos].item;
          var oldItem = lastSeqArray[posOld[idString]].item;

          if (typeof newItem === 'object' || newItem !== oldItem) callbacks.changedAt(id, newItem, oldItem, pos);
        }
      });
    };

    seqChangedToEmpty = function (lastSeqArray, callbacks) {
      return [];
    };

    seqChangedToArray = function (lastSeqArray, array, callbacks) {
      var idsUsed = {};
      var seqArray = _.map(array, function (item, index) {
        var id;
        if (typeof item === 'string') {
          // ensure not empty, since other layers (eg DomRange) assume this as well
          id = "-" + item;
        } else if (typeof item === 'number' || typeof item === 'boolean' || item === undefined || item === null) {
          id = item;
        } else if (typeof item === 'object') {
          id = item && '_id' in item ? item._id : index;
        } else {
          throw new Error("{{#each}} doesn't support arrays with " + "elements of type " + typeof item);
        }

        var idString = idStringify(id);
        if (idsUsed[idString]) {
          if (item && typeof item === 'object' && '_id' in item) warn("duplicate id " + id + " in", array);
          id = Random.id();
        } else {
          idsUsed[idString] = true;
        }

        return { _id: id, item: item };
      });

      return seqArray;
    };

    seqChangedToCursor = function (lastSeqArray, cursor, callbacks) {
      var initial = true; // are we observing initial data from cursor?
      var seqArray = [];

      var observeHandle = cursor.observe({
        addedAt: function (document, atIndex, before) {
          if (initial) {
            // keep track of initial data so that we can diff once
            // we exit `observe`.
            if (before !== null) throw new Error("Expected initial data from observe in order");
            seqArray.push({ _id: document._id, item: document });
          } else {
            callbacks.addedAt(document._id, document, atIndex, before);
          }
        },
        changedAt: function (newDocument, oldDocument, atIndex) {
          callbacks.changedAt(newDocument._id, newDocument, oldDocument, atIndex);
        },
        removedAt: function (oldDocument, atIndex) {
          callbacks.removedAt(oldDocument._id, oldDocument, atIndex);
        },
        movedTo: function (document, fromIndex, toIndex, before) {
          callbacks.movedTo(document._id, document, fromIndex, toIndex, before);
        }
      });
      initial = false;

      return [seqArray, observeHandle];
    };

    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("observe-sequence", {
    ObserveSequence: ObserveSequence
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Exports */
  Package._define("deps", {
    Tracker: Tracker,
    Deps: Deps
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;

  /* Package-scope variables */
  var HTML, IDENTITY, SLICE;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/preamble.js                                                        //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    HTML = {};

    IDENTITY = function (x) {
      return x;
    };
    SLICE = Array.prototype.slice;

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/visitors.js                                                        //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    ////////////////////////////// VISITORS

    // _assign is like _.extend or the upcoming Object.assign.
    // Copy src's own, enumerable properties onto tgt and return
    // tgt.
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _assign = function (tgt, src) {
      for (var k in src) {
        if (_hasOwnProperty.call(src, k)) tgt[k] = src[k];
      }
      return tgt;
    };

    HTML.Visitor = function (props) {
      _assign(this, props);
    };

    HTML.Visitor.def = function (options) {
      _assign(this.prototype, options);
    };

    HTML.Visitor.extend = function (options) {
      var curType = this;
      var subType = function HTMLVisitorSubtype() /*arguments*/{
        HTML.Visitor.apply(this, arguments);
      };
      subType.prototype = new curType();
      subType.extend = curType.extend;
      subType.def = curType.def;
      if (options) _assign(subType.prototype, options);
      return subType;
    };

    HTML.Visitor.def({
      visit: function (content /*, ...*/) {
        if (content == null)
          // null or undefined.
          return this.visitNull.apply(this, arguments);

        if (typeof content === 'object') {
          if (content.htmljsType) {
            switch (content.htmljsType) {
              case HTML.Tag.htmljsType:
                return this.visitTag.apply(this, arguments);
              case HTML.CharRef.htmljsType:
                return this.visitCharRef.apply(this, arguments);
              case HTML.Comment.htmljsType:
                return this.visitComment.apply(this, arguments);
              case HTML.Raw.htmljsType:
                return this.visitRaw.apply(this, arguments);
              default:
                throw new Error("Unknown htmljs type: " + content.htmljsType);
            }
          }

          if (HTML.isArray(content)) return this.visitArray.apply(this, arguments);

          return this.visitObject.apply(this, arguments);
        } else if (typeof content === 'string' || typeof content === 'boolean' || typeof content === 'number') {
          return this.visitPrimitive.apply(this, arguments);
        } else if (typeof content === 'function') {
          return this.visitFunction.apply(this, arguments);
        }

        throw new Error("Unexpected object in htmljs: " + content);
      },
      visitNull: function (nullOrUndefined /*, ...*/) {},
      visitPrimitive: function (stringBooleanOrNumber /*, ...*/) {},
      visitArray: function (array /*, ...*/) {},
      visitComment: function (comment /*, ...*/) {},
      visitCharRef: function (charRef /*, ...*/) {},
      visitRaw: function (raw /*, ...*/) {},
      visitTag: function (tag /*, ...*/) {},
      visitObject: function (obj /*, ...*/) {
        throw new Error("Unexpected object in htmljs: " + obj);
      },
      visitFunction: function (fn /*, ...*/) {
        throw new Error("Unexpected function in htmljs: " + fn);
      }
    });

    HTML.TransformingVisitor = HTML.Visitor.extend();
    HTML.TransformingVisitor.def({
      visitNull: IDENTITY,
      visitPrimitive: IDENTITY,
      visitArray: function (array /*, ...*/) {
        var argsCopy = SLICE.call(arguments);
        var result = array;
        for (var i = 0; i < array.length; i++) {
          var oldItem = array[i];
          argsCopy[0] = oldItem;
          var newItem = this.visit.apply(this, argsCopy);
          if (newItem !== oldItem) {
            // copy `array` on write
            if (result === array) result = array.slice();
            result[i] = newItem;
          }
        }
        return result;
      },
      visitComment: IDENTITY,
      visitCharRef: IDENTITY,
      visitRaw: IDENTITY,
      visitObject: IDENTITY,
      visitFunction: IDENTITY,
      visitTag: function (tag /*, ...*/) {
        var oldChildren = tag.children;
        var argsCopy = SLICE.call(arguments);
        argsCopy[0] = oldChildren;
        var newChildren = this.visitChildren.apply(this, argsCopy);

        var oldAttrs = tag.attrs;
        argsCopy[0] = oldAttrs;
        var newAttrs = this.visitAttributes.apply(this, argsCopy);

        if (newAttrs === oldAttrs && newChildren === oldChildren) return tag;

        var newTag = HTML.getTag(tag.tagName).apply(null, newChildren);
        newTag.attrs = newAttrs;
        return newTag;
      },
      visitChildren: function (children /*, ...*/) {
        return this.visitArray.apply(this, arguments);
      },
      // Transform the `.attrs` property of a tag, which may be a dictionary,
      // an array, or in some uses, a foreign object (such as
      // a template tag).
      visitAttributes: function (attrs /*, ...*/) {
        if (HTML.isArray(attrs)) {
          var argsCopy = SLICE.call(arguments);
          var result = attrs;
          for (var i = 0; i < attrs.length; i++) {
            var oldItem = attrs[i];
            argsCopy[0] = oldItem;
            var newItem = this.visitAttributes.apply(this, argsCopy);
            if (newItem !== oldItem) {
              // copy on write
              if (result === attrs) result = attrs.slice();
              result[i] = newItem;
            }
          }
          return result;
        }

        if (attrs && HTML.isConstructedObject(attrs)) {
          throw new Error("The basic HTML.TransformingVisitor does not support " + "foreign objects in attributes.  Define a custom " + "visitAttributes for this case.");
        }

        var oldAttrs = attrs;
        var newAttrs = oldAttrs;
        if (oldAttrs) {
          var attrArgs = [null, null];
          attrArgs.push.apply(attrArgs, arguments);
          for (var k in oldAttrs) {
            var oldValue = oldAttrs[k];
            attrArgs[0] = k;
            attrArgs[1] = oldValue;
            var newValue = this.visitAttribute.apply(this, attrArgs);
            if (newValue !== oldValue) {
              // copy on write
              if (newAttrs === oldAttrs) newAttrs = _assign({}, oldAttrs);
              newAttrs[k] = newValue;
            }
          }
        }

        return newAttrs;
      },
      // Transform the value of one attribute name/value in an
      // attributes dictionary.
      visitAttribute: function (name, value, tag /*, ...*/) {
        var args = SLICE.call(arguments, 2);
        args[0] = value;
        return this.visit.apply(this, args);
      }
    });

    HTML.ToTextVisitor = HTML.Visitor.extend();
    HTML.ToTextVisitor.def({
      visitNull: function (nullOrUndefined) {
        return '';
      },
      visitPrimitive: function (stringBooleanOrNumber) {
        var str = String(stringBooleanOrNumber);
        if (this.textMode === HTML.TEXTMODE.RCDATA) {
          return str.replace(/&/g, '&amp;').replace(/</g, '&lt;');
        } else if (this.textMode === HTML.TEXTMODE.ATTRIBUTE) {
          // escape `&` and `"` this time, not `&` and `<`
          return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;');
        } else {
          return str;
        }
      },
      visitArray: function (array) {
        var parts = [];
        for (var i = 0; i < array.length; i++) parts.push(this.visit(array[i]));
        return parts.join('');
      },
      visitComment: function (comment) {
        throw new Error("Can't have a comment here");
      },
      visitCharRef: function (charRef) {
        if (this.textMode === HTML.TEXTMODE.RCDATA || this.textMode === HTML.TEXTMODE.ATTRIBUTE) {
          return charRef.html;
        } else {
          return charRef.str;
        }
      },
      visitRaw: function (raw) {
        return raw.value;
      },
      visitTag: function (tag) {
        // Really we should just disallow Tags here.  However, at the
        // moment it's useful to stringify any HTML we find.  In
        // particular, when you include a template within `{{#markdown}}`,
        // we render the template as text, and since there's currently
        // no way to make the template be *parsed* as text (e.g. `<template
        // type="text">`), we hackishly support HTML tags in markdown
        // in templates by parsing them and stringifying them.
        return this.visit(this.toHTML(tag));
      },
      visitObject: function (x) {
        throw new Error("Unexpected object in htmljs in toText: " + x);
      },
      toHTML: function (node) {
        return HTML.toHTML(node);
      }
    });

    HTML.ToHTMLVisitor = HTML.Visitor.extend();
    HTML.ToHTMLVisitor.def({
      visitNull: function (nullOrUndefined) {
        return '';
      },
      visitPrimitive: function (stringBooleanOrNumber) {
        var str = String(stringBooleanOrNumber);
        return str.replace(/&/g, '&amp;').replace(/</g, '&lt;');
      },
      visitArray: function (array) {
        var parts = [];
        for (var i = 0; i < array.length; i++) parts.push(this.visit(array[i]));
        return parts.join('');
      },
      visitComment: function (comment) {
        return '<!--' + comment.sanitizedValue + '-->';
      },
      visitCharRef: function (charRef) {
        return charRef.html;
      },
      visitRaw: function (raw) {
        return raw.value;
      },
      visitTag: function (tag) {
        var attrStrs = [];

        var tagName = tag.tagName;
        var children = tag.children;

        var attrs = tag.attrs;
        if (attrs) {
          attrs = HTML.flattenAttributes(attrs);
          for (var k in attrs) {
            if (k === 'value' && tagName === 'textarea') {
              children = [attrs[k], children];
            } else {
              var v = this.toText(attrs[k], HTML.TEXTMODE.ATTRIBUTE);
              attrStrs.push(' ' + k + '="' + v + '"');
            }
          }
        }

        var startTag = '<' + tagName + attrStrs.join('') + '>';

        var childStrs = [];
        var content;
        if (tagName === 'textarea') {

          for (var i = 0; i < children.length; i++) childStrs.push(this.toText(children[i], HTML.TEXTMODE.RCDATA));

          content = childStrs.join('');
          if (content.slice(0, 1) === '\n')
            // TEXTAREA will absorb a newline, so if we see one, add
            // another one.
            content = '\n' + content;
        } else {
          for (var i = 0; i < children.length; i++) childStrs.push(this.visit(children[i]));

          content = childStrs.join('');
        }

        var result = startTag + content;

        if (children.length || !HTML.isVoidElement(tagName)) {
          // "Void" elements like BR are the only ones that don't get a close
          // tag in HTML5.  They shouldn't have contents, either, so we could
          // throw an error upon seeing contents here.
          result += '</' + tagName + '>';
        }

        return result;
      },
      visitObject: function (x) {
        throw new Error("Unexpected object in htmljs in toHTML: " + x);
      },
      toText: function (node, textMode) {
        return HTML.toText(node, textMode);
      }
    });

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/htmljs/html.js                                                            //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //


    HTML.Tag = function () {};
    HTML.Tag.prototype.tagName = ''; // this will be set per Tag subclass
    HTML.Tag.prototype.attrs = null;
    HTML.Tag.prototype.children = Object.freeze ? Object.freeze([]) : [];
    HTML.Tag.prototype.htmljsType = HTML.Tag.htmljsType = ['Tag'];

    // Given "p" create the function `HTML.P`.
    var makeTagConstructor = function (tagName) {
      // HTMLTag is the per-tagName constructor of a HTML.Tag subclass
      var HTMLTag = function () /*arguments*/{
        // Work with or without `new`.  If not called with `new`,
        // perform instantiation by recursively calling this constructor.
        // We can't pass varargs, so pass no args.
        var instance = this instanceof HTML.Tag ? this : new HTMLTag();

        var i = 0;
        var attrs = arguments.length && arguments[0];
        if (attrs && typeof attrs === 'object') {
          // Treat vanilla JS object as an attributes dictionary.
          if (!HTML.isConstructedObject(attrs)) {
            instance.attrs = attrs;
            i++;
          } else if (attrs instanceof HTML.Attrs) {
            var array = attrs.value;
            if (array.length === 1) {
              instance.attrs = array[0];
            } else if (array.length > 1) {
              instance.attrs = array;
            }
            i++;
          }
        }

        // If no children, don't create an array at all, use the prototype's
        // (frozen, empty) array.  This way we don't create an empty array
        // every time someone creates a tag without `new` and this constructor
        // calls itself with no arguments (above).
        if (i < arguments.length) instance.children = SLICE.call(arguments, i);

        return instance;
      };
      HTMLTag.prototype = new HTML.Tag();
      HTMLTag.prototype.constructor = HTMLTag;
      HTMLTag.prototype.tagName = tagName;

      return HTMLTag;
    };

    // Not an HTMLjs node, but a wrapper to pass multiple attrs dictionaries
    // to a tag (for the purpose of implementing dynamic attributes).
    var Attrs = HTML.Attrs = function () /*attrs dictionaries*/{
      // Work with or without `new`.  If not called with `new`,
      // perform instantiation by recursively calling this constructor.
      // We can't pass varargs, so pass no args.
      var instance = this instanceof Attrs ? this : new Attrs();

      instance.value = SLICE.call(arguments);

      return instance;
    };

    ////////////////////////////// KNOWN ELEMENTS

    HTML.getTag = function (tagName) {
      var symbolName = HTML.getSymbolName(tagName);
      if (symbolName === tagName) // all-caps tagName
        throw new Error("Use the lowercase or camelCase form of '" + tagName + "' here");

      if (!HTML[symbolName]) HTML[symbolName] = makeTagConstructor(tagName);

      return HTML[symbolName];
    };

    HTML.ensureTag = function (tagName) {
      HTML.getTag(tagName); // don't return it
    };

    HTML.isTagEnsured = function (tagName) {
      return HTML.isKnownElement(tagName);
    };

    HTML.getSymbolName = function (tagName) {
      // "foo-bar" -> "FOO_BAR"
      return tagName.toUpperCase().replace(/-/g, '_');
    };

    HTML.knownElementNames = 'a abbr acronym address applet area article aside audio b base basefont bdi bdo big blockquote body br button canvas caption center cite code col colgroup command data datagrid datalist dd del details dfn dir div dl dt em embed eventsource fieldset figcaption figure font footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins isindex kbd keygen label legend li link main map mark menu meta meter nav noframes noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr track tt u ul var video wbr'.split(' ');
    // (we add the SVG ones below)

    HTML.knownSVGElementNames = 'altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform circle clipPath color-profile cursor defs desc ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph path pattern polygon polyline radialGradient rect set stop style svg switch symbol text textPath title tref tspan use view vkern'.split(' ');
    // Append SVG element names to list of known element names
    HTML.knownElementNames = HTML.knownElementNames.concat(HTML.knownSVGElementNames);

    HTML.voidElementNames = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');

    // Speed up search through lists of known elements by creating internal "sets"
    // of strings.
    var YES = { yes: true };
    var makeSet = function (array) {
      var set = {};
      for (var i = 0; i < array.length; i++) set[array[i]] = YES;
      return set;
    };
    var voidElementSet = makeSet(HTML.voidElementNames);
    var knownElementSet = makeSet(HTML.knownElementNames);
    var knownSVGElementSet = makeSet(HTML.knownSVGElementNames);

    HTML.isKnownElement = function (tagName) {
      return knownElementSet[tagName] === YES;
    };

    HTML.isKnownSVGElement = function (tagName) {
      return knownSVGElementSet[tagName] === YES;
    };

    HTML.isVoidElement = function (tagName) {
      return voidElementSet[tagName] === YES;
    };

    // Ensure tags for all known elements
    for (var i = 0; i < HTML.knownElementNames.length; i++) HTML.ensureTag(HTML.knownElementNames[i]);

    var CharRef = HTML.CharRef = function (attrs) {
      if (!(this instanceof CharRef))
        // called without `new`
        return new CharRef(attrs);

      if (!(attrs && attrs.html && attrs.str)) throw new Error("HTML.CharRef must be constructed with ({html:..., str:...})");

      this.html = attrs.html;
      this.str = attrs.str;
    };
    CharRef.prototype.htmljsType = CharRef.htmljsType = ['CharRef'];

    var Comment = HTML.Comment = function (value) {
      if (!(this instanceof Comment))
        // called without `new`
        return new Comment(value);

      if (typeof value !== 'string') throw new Error('HTML.Comment must be constructed with a string');

      this.value = value;
      // Kill illegal hyphens in comment value (no way to escape them in HTML)
      this.sanitizedValue = value.replace(/^-|--+|-$/g, '');
    };
    Comment.prototype.htmljsType = Comment.htmljsType = ['Comment'];

    var Raw = HTML.Raw = function (value) {
      if (!(this instanceof Raw))
        // called without `new`
        return new Raw(value);

      if (typeof value !== 'string') throw new Error('HTML.Raw must be constructed with a string');

      this.value = value;
    };
    Raw.prototype.htmljsType = Raw.htmljsType = ['Raw'];

    HTML.isArray = function (x) {
      // could change this to use the more convoluted Object.prototype.toString
      // approach that works when objects are passed between frames, but does
      // it matter?
      return x instanceof Array;
    };

    HTML.isConstructedObject = function (x) {
      // Figure out if `x` is "an instance of some class" or just a plain
      // object literal.  It correctly treats an object literal like
      // `{ constructor: ... }` as an object literal.  It won't detect
      // instances of classes that lack a `constructor` property (e.g.
      // if you assign to a prototype when setting up the class as in:
      // `Foo = function () { ... }; Foo.prototype = { ... }`, then
      // `(new Foo).constructor` is `Object`, not `Foo`).
      return x && typeof x === 'object' && x.constructor !== Object && typeof x.constructor === 'function' && x instanceof x.constructor;
    };

    HTML.isNully = function (node) {
      if (node == null)
        // null or undefined
        return true;

      if (HTML.isArray(node)) {
        // is it an empty array or an array of all nully items?
        for (var i = 0; i < node.length; i++) if (!HTML.isNully(node[i])) return false;
        return true;
      }

      return false;
    };

    HTML.isValidAttributeName = function (name) {
      return (/^[:_A-Za-z][:_A-Za-z0-9.\-]*/.test(name)
      );
    };

    // If `attrs` is an array of attributes dictionaries, combines them
    // into one.  Removes attributes that are "nully."
    HTML.flattenAttributes = function (attrs) {
      if (!attrs) return attrs;

      var isArray = HTML.isArray(attrs);
      if (isArray && attrs.length === 0) return null;

      var result = {};
      for (var i = 0, N = isArray ? attrs.length : 1; i < N; i++) {
        var oneAttrs = isArray ? attrs[i] : attrs;
        if (typeof oneAttrs !== 'object' || HTML.isConstructedObject(oneAttrs)) throw new Error("Expected plain JS object as attrs, found: " + oneAttrs);
        for (var name in oneAttrs) {
          if (!HTML.isValidAttributeName(name)) throw new Error("Illegal HTML attribute name: " + name);
          var value = oneAttrs[name];
          if (!HTML.isNully(value)) result[name] = value;
        }
      }

      return result;
    };

    ////////////////////////////// TOHTML

    HTML.toHTML = function (content) {
      return new HTML.ToHTMLVisitor().visit(content);
    };

    // Escaping modes for outputting text when generating HTML.
    HTML.TEXTMODE = {
      STRING: 1,
      RCDATA: 2,
      ATTRIBUTE: 3
    };

    HTML.toText = function (content, textMode) {
      if (!textMode) throw new Error("textMode required for HTML.toText");
      if (!(textMode === HTML.TEXTMODE.STRING || textMode === HTML.TEXTMODE.RCDATA || textMode === HTML.TEXTMODE.ATTRIBUTE)) throw new Error("Unknown textMode: " + textMode);

      var visitor = new HTML.ToTextVisitor({ textMode: textMode });;
      return visitor.visit(content);
    };

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("htmljs", {
    HTML: HTML
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var $ = Package.jquery.$;
  var jQuery = Package.jquery.jQuery;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var check = Package.check.check;
  var Match = Package.check.Match;
  var _ = Package.underscore._;
  var ObserveSequence = Package['observe-sequence'].ObserveSequence;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var OrderedDict = Package['ordered-dict'].OrderedDict;
  var HTML = Package.htmljs.HTML;

  /* Package-scope variables */
  var Blaze, AttributeHandler, ElementAttributesUpdater, UI, Handlebars;

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/preamble.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /**
     * @namespace Blaze
     * @summary The namespace for all Blaze-related methods and classes.
     */
    Blaze = {};

    // Utility to HTML-escape a string.  Included for legacy reasons.
    // TODO: Should be replaced with _.escape once underscore is upgraded to a newer
    //       version which escapes ` (backtick) as well. Underscore 1.5.2 does not.
    Blaze._escape = function () {
      var escape_map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "/": "&#x2F;",
        "`": "&#x60;", /* IE allows backtick-delimited attributes?? */
        "&": "&amp;"
      };
      var escape_one = function (c) {
        return escape_map[c];
      };

      return function (x) {
        return x.replace(/[&<>"'`]/g, escape_one);
      };
    }();

    Blaze._warn = function (msg) {
      msg = 'Warning: ' + msg;

      if (typeof console !== 'undefined' && console.warn) {
        console.warn(msg);
      }
    };

    var nativeBind = Function.prototype.bind;

    // An implementation of _.bind which allows better optimization.
    // See: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
    if (nativeBind) {
      Blaze._bind = function (func, obj) {
        if (arguments.length === 2) {
          return nativeBind.call(func, obj);
        }

        // Copy the arguments so this function can be optimized.
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        return nativeBind.apply(func, args.slice(1));
      };
    } else {
      // A slower but backwards compatible version.
      Blaze._bind = _.bind;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/dombackend.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var DOMBackend = {};
    Blaze._DOMBackend = DOMBackend;

    var $jq = typeof jQuery !== 'undefined' ? jQuery : typeof Package !== 'undefined' ? Package.jquery && Package.jquery.jQuery : null;
    if (!$jq) throw new Error("jQuery not found");

    DOMBackend._$jq = $jq;

    DOMBackend.parseHTML = function (html) {
      // Return an array of nodes.
      //
      // jQuery does fancy stuff like creating an appropriate
      // container element and setting innerHTML on it, as well
      // as working around various IE quirks.
      return $jq.parseHTML(html) || [];
    };

    DOMBackend.Events = {
      // `selector` is non-null.  `type` is one type (but
      // may be in backend-specific form, e.g. have namespaces).
      // Order fired must be order bound.
      delegateEvents: function (elem, type, selector, handler) {
        $jq(elem).on(type, selector, handler);
      },

      undelegateEvents: function (elem, type, handler) {
        $jq(elem).off(type, '**', handler);
      },

      bindEventCapturer: function (elem, type, selector, handler) {
        var $elem = $jq(elem);

        var wrapper = function (event) {
          event = $jq.event.fix(event);
          event.currentTarget = event.target;

          // Note: It might improve jQuery interop if we called into jQuery
          // here somehow.  Since we don't use jQuery to dispatch the event,
          // we don't fire any of jQuery's event hooks or anything.  However,
          // since jQuery can't bind capturing handlers, it's not clear
          // where we would hook in.  Internal jQuery functions like `dispatch`
          // are too high-level.
          var $target = $jq(event.currentTarget);
          if ($target.is($elem.find(selector))) handler.call(elem, event);
        };

        handler._meteorui_wrapper = wrapper;

        type = DOMBackend.Events.parseEventType(type);
        // add *capturing* event listener
        elem.addEventListener(type, wrapper, true);
      },

      unbindEventCapturer: function (elem, type, handler) {
        type = DOMBackend.Events.parseEventType(type);
        elem.removeEventListener(type, handler._meteorui_wrapper, true);
      },

      parseEventType: function (type) {
        // strip off namespaces
        var dotLoc = type.indexOf('.');
        if (dotLoc >= 0) return type.slice(0, dotLoc);
        return type;
      }
    };

    ///// Removal detection and interoperability.

    // For an explanation of this technique, see:
    // http://bugs.jquery.com/ticket/12213#comment:23 .
    //
    // In short, an element is considered "removed" when jQuery
    // cleans up its *private* userdata on the element,
    // which we can detect using a custom event with a teardown
    // hook.

    var NOOP = function () {};

    // Circular doubly-linked list
    var TeardownCallback = function (func) {
      this.next = this;
      this.prev = this;
      this.func = func;
    };

    // Insert newElt before oldElt in the circular list
    TeardownCallback.prototype.linkBefore = function (oldElt) {
      this.prev = oldElt.prev;
      this.next = oldElt;
      oldElt.prev.next = this;
      oldElt.prev = this;
    };

    TeardownCallback.prototype.unlink = function () {
      this.prev.next = this.next;
      this.next.prev = this.prev;
    };

    TeardownCallback.prototype.go = function () {
      var func = this.func;
      func && func();
    };

    TeardownCallback.prototype.stop = TeardownCallback.prototype.unlink;

    DOMBackend.Teardown = {
      _JQUERY_EVENT_NAME: 'blaze_teardown_watcher',
      _CB_PROP: '$blaze_teardown_callbacks',
      // Registers a callback function to be called when the given element or
      // one of its ancestors is removed from the DOM via the backend library.
      // The callback function is called at most once, and it receives the element
      // in question as an argument.
      onElementTeardown: function (elem, func) {
        var elt = new TeardownCallback(func);

        var propName = DOMBackend.Teardown._CB_PROP;
        if (!elem[propName]) {
          // create an empty node that is never unlinked
          elem[propName] = new TeardownCallback();

          // Set up the event, only the first time.
          $jq(elem).on(DOMBackend.Teardown._JQUERY_EVENT_NAME, NOOP);
        }

        elt.linkBefore(elem[propName]);

        return elt; // so caller can call stop()
      },
      // Recursively call all teardown hooks, in the backend and registered
      // through DOMBackend.onElementTeardown.
      tearDownElement: function (elem) {
        var elems = [];
        // Array.prototype.slice.call doesn't work when given a NodeList in
        // IE8 ("JScript object expected").
        var nodeList = elem.getElementsByTagName('*');
        for (var i = 0; i < nodeList.length; i++) {
          elems.push(nodeList[i]);
        }
        elems.push(elem);
        $jq.cleanData(elems);
      }
    };

    $jq.event.special[DOMBackend.Teardown._JQUERY_EVENT_NAME] = {
      setup: function () {
        // This "setup" callback is important even though it is empty!
        // Without it, jQuery will call addEventListener, which is a
        // performance hit, especially with Chrome's async stack trace
        // feature enabled.
      },
      teardown: function () {
        var elem = this;
        var callbacks = elem[DOMBackend.Teardown._CB_PROP];
        if (callbacks) {
          var elt = callbacks.next;
          while (elt !== callbacks) {
            elt.go();
            elt = elt.next;
          }
          callbacks.go();

          elem[DOMBackend.Teardown._CB_PROP] = null;
        }
      }
    };

    // Must use jQuery semantics for `context`, not
    // querySelectorAll's.  In other words, all the parts
    // of `selector` must be found under `context`.
    DOMBackend.findBySelector = function (selector, context) {
      return $jq(selector, context);
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/domrange.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //

    // A constant empty array (frozen if the JS engine supports it).
    var _emptyArray = Object.freeze ? Object.freeze([]) : [];

    // `[new] Blaze._DOMRange([nodeAndRangeArray])`
    //
    // A DOMRange consists of an array of consecutive nodes and DOMRanges,
    // which may be replaced at any time with a new array.  If the DOMRange
    // has been attached to the DOM at some location, then updating
    // the array will cause the DOM to be updated at that location.
    Blaze._DOMRange = function (nodeAndRangeArray) {
      if (!(this instanceof DOMRange))
        // called without `new`
        return new DOMRange(nodeAndRangeArray);

      var members = nodeAndRangeArray || _emptyArray;
      if (!(members && typeof members.length === 'number')) throw new Error("Expected array");

      for (var i = 0; i < members.length; i++) this._memberIn(members[i]);

      this.members = members;
      this.emptyRangePlaceholder = null;
      this.attached = false;
      this.parentElement = null;
      this.parentRange = null;
      this.attachedCallbacks = _emptyArray;
    };
    var DOMRange = Blaze._DOMRange;

    // In IE 8, don't use empty text nodes as placeholders
    // in empty DOMRanges, use comment nodes instead.  Using
    // empty text nodes in modern browsers is great because
    // it doesn't clutter the web inspector.  In IE 8, however,
    // it seems to lead in some roundabout way to the OAuth
    // pop-up crashing the browser completely.  In the past,
    // we didn't use empty text nodes on IE 8 because they
    // don't accept JS properties, so just use the same logic
    // even though we don't need to set properties on the
    // placeholder anymore.
    DOMRange._USE_COMMENT_PLACEHOLDERS = function () {
      var result = false;
      var textNode = document.createTextNode("");
      try {
        textNode.someProp = true;
      } catch (e) {
        // IE 8
        result = true;
      }
      return result;
    }();

    // static methods
    DOMRange._insert = function (rangeOrNode, parentElement, nextNode, _isMove) {
      var m = rangeOrNode;
      if (m instanceof DOMRange) {
        m.attach(parentElement, nextNode, _isMove);
      } else {
        if (_isMove) DOMRange._moveNodeWithHooks(m, parentElement, nextNode);else DOMRange._insertNodeWithHooks(m, parentElement, nextNode);
      }
    };

    DOMRange._remove = function (rangeOrNode) {
      var m = rangeOrNode;
      if (m instanceof DOMRange) {
        m.detach();
      } else {
        DOMRange._removeNodeWithHooks(m);
      }
    };

    DOMRange._removeNodeWithHooks = function (n) {
      if (!n.parentNode) return;
      if (n.nodeType === 1 && n.parentNode._uihooks && n.parentNode._uihooks.removeElement) {
        n.parentNode._uihooks.removeElement(n);
      } else {
        n.parentNode.removeChild(n);
      }
    };

    DOMRange._insertNodeWithHooks = function (n, parent, next) {
      // `|| null` because IE throws an error if 'next' is undefined
      next = next || null;
      if (n.nodeType === 1 && parent._uihooks && parent._uihooks.insertElement) {
        parent._uihooks.insertElement(n, next);
      } else {
        parent.insertBefore(n, next);
      }
    };

    DOMRange._moveNodeWithHooks = function (n, parent, next) {
      if (n.parentNode !== parent) return;
      // `|| null` because IE throws an error if 'next' is undefined
      next = next || null;
      if (n.nodeType === 1 && parent._uihooks && parent._uihooks.moveElement) {
        parent._uihooks.moveElement(n, next);
      } else {
        parent.insertBefore(n, next);
      }
    };

    DOMRange.forElement = function (elem) {
      if (elem.nodeType !== 1) throw new Error("Expected element, found: " + elem);
      var range = null;
      while (elem && !range) {
        range = elem.$blaze_range || null;
        if (!range) elem = elem.parentNode;
      }
      return range;
    };

    DOMRange.prototype.attach = function (parentElement, nextNode, _isMove, _isReplace) {
      // This method is called to insert the DOMRange into the DOM for
      // the first time, but it's also used internally when
      // updating the DOM.
      //
      // If _isMove is true, move this attached range to a different
      // location under the same parentElement.
      if (_isMove || _isReplace) {
        if (!(this.parentElement === parentElement && this.attached)) throw new Error("Can only move or replace an attached DOMRange, and only under the same parent element");
      }

      var members = this.members;
      if (members.length) {
        this.emptyRangePlaceholder = null;
        for (var i = 0; i < members.length; i++) {
          DOMRange._insert(members[i], parentElement, nextNode, _isMove);
        }
      } else {
        var placeholder = DOMRange._USE_COMMENT_PLACEHOLDERS ? document.createComment("") : document.createTextNode("");
        this.emptyRangePlaceholder = placeholder;
        parentElement.insertBefore(placeholder, nextNode || null);
      }
      this.attached = true;
      this.parentElement = parentElement;

      if (!(_isMove || _isReplace)) {
        for (var i = 0; i < this.attachedCallbacks.length; i++) {
          var obj = this.attachedCallbacks[i];
          obj.attached && obj.attached(this, parentElement);
        }
      }
    };

    DOMRange.prototype.setMembers = function (newNodeAndRangeArray) {
      var newMembers = newNodeAndRangeArray;
      if (!(newMembers && typeof newMembers.length === 'number')) throw new Error("Expected array");

      var oldMembers = this.members;

      for (var i = 0; i < oldMembers.length; i++) this._memberOut(oldMembers[i]);
      for (var i = 0; i < newMembers.length; i++) this._memberIn(newMembers[i]);

      if (!this.attached) {
        this.members = newMembers;
      } else {
        // don't do anything if we're going from empty to empty
        if (newMembers.length || oldMembers.length) {
          // detach the old members and insert the new members
          var nextNode = this.lastNode().nextSibling;
          var parentElement = this.parentElement;
          // Use detach/attach, but don't fire attached/detached hooks
          this.detach(true /*_isReplace*/);
          this.members = newMembers;
          this.attach(parentElement, nextNode, false, true /*_isReplace*/);
        }
      }
    };

    DOMRange.prototype.firstNode = function () {
      if (!this.attached) throw new Error("Must be attached");

      if (!this.members.length) return this.emptyRangePlaceholder;

      var m = this.members[0];
      return m instanceof DOMRange ? m.firstNode() : m;
    };

    DOMRange.prototype.lastNode = function () {
      if (!this.attached) throw new Error("Must be attached");

      if (!this.members.length) return this.emptyRangePlaceholder;

      var m = this.members[this.members.length - 1];
      return m instanceof DOMRange ? m.lastNode() : m;
    };

    DOMRange.prototype.detach = function (_isReplace) {
      if (!this.attached) throw new Error("Must be attached");

      var oldParentElement = this.parentElement;
      var members = this.members;
      if (members.length) {
        for (var i = 0; i < members.length; i++) {
          DOMRange._remove(members[i]);
        }
      } else {
        var placeholder = this.emptyRangePlaceholder;
        this.parentElement.removeChild(placeholder);
        this.emptyRangePlaceholder = null;
      }

      if (!_isReplace) {
        this.attached = false;
        this.parentElement = null;

        for (var i = 0; i < this.attachedCallbacks.length; i++) {
          var obj = this.attachedCallbacks[i];
          obj.detached && obj.detached(this, oldParentElement);
        }
      }
    };

    DOMRange.prototype.addMember = function (newMember, atIndex, _isMove) {
      var members = this.members;
      if (!(atIndex >= 0 && atIndex <= members.length)) throw new Error("Bad index in range.addMember: " + atIndex);

      if (!_isMove) this._memberIn(newMember);

      if (!this.attached) {
        // currently detached; just updated members
        members.splice(atIndex, 0, newMember);
      } else if (members.length === 0) {
        // empty; use the empty-to-nonempty handling of setMembers
        this.setMembers([newMember]);
      } else {
        var nextNode;
        if (atIndex === members.length) {
          // insert at end
          nextNode = this.lastNode().nextSibling;
        } else {
          var m = members[atIndex];
          nextNode = m instanceof DOMRange ? m.firstNode() : m;
        }
        members.splice(atIndex, 0, newMember);
        DOMRange._insert(newMember, this.parentElement, nextNode, _isMove);
      }
    };

    DOMRange.prototype.removeMember = function (atIndex, _isMove) {
      var members = this.members;
      if (!(atIndex >= 0 && atIndex < members.length)) throw new Error("Bad index in range.removeMember: " + atIndex);

      if (_isMove) {
        members.splice(atIndex, 1);
      } else {
        var oldMember = members[atIndex];
        this._memberOut(oldMember);

        if (members.length === 1) {
          // becoming empty; use the logic in setMembers
          this.setMembers(_emptyArray);
        } else {
          members.splice(atIndex, 1);
          if (this.attached) DOMRange._remove(oldMember);
        }
      }
    };

    DOMRange.prototype.moveMember = function (oldIndex, newIndex) {
      var member = this.members[oldIndex];
      this.removeMember(oldIndex, true /*_isMove*/);
      this.addMember(member, newIndex, true /*_isMove*/);
    };

    DOMRange.prototype.getMember = function (atIndex) {
      var members = this.members;
      if (!(atIndex >= 0 && atIndex < members.length)) throw new Error("Bad index in range.getMember: " + atIndex);
      return this.members[atIndex];
    };

    DOMRange.prototype._memberIn = function (m) {
      if (m instanceof DOMRange) m.parentRange = this;else if (m.nodeType === 1) // DOM Element
        m.$blaze_range = this;
    };

    DOMRange._destroy = function (m, _skipNodes) {
      if (m instanceof DOMRange) {
        if (m.view) Blaze._destroyView(m.view, _skipNodes);
      } else if (!_skipNodes && m.nodeType === 1) {
        // DOM Element
        if (m.$blaze_range) {
          Blaze._destroyNode(m);
          m.$blaze_range = null;
        }
      }
    };

    DOMRange.prototype._memberOut = DOMRange._destroy;

    // Tear down, but don't remove, the members.  Used when chunks
    // of DOM are being torn down or replaced.
    DOMRange.prototype.destroyMembers = function (_skipNodes) {
      var members = this.members;
      for (var i = 0; i < members.length; i++) this._memberOut(members[i], _skipNodes);
    };

    DOMRange.prototype.destroy = function (_skipNodes) {
      DOMRange._destroy(this, _skipNodes);
    };

    DOMRange.prototype.containsElement = function (elem) {
      if (!this.attached) throw new Error("Must be attached");

      // An element is contained in this DOMRange if it's possible to
      // reach it by walking parent pointers, first through the DOM and
      // then parentRange pointers.  In other words, the element or some
      // ancestor of it is at our level of the DOM (a child of our
      // parentElement), and this element is one of our members or
      // is a member of a descendant Range.

      // First check that elem is a descendant of this.parentElement,
      // according to the DOM.
      if (!Blaze._elementContains(this.parentElement, elem)) return false;

      // If elem is not an immediate child of this.parentElement,
      // walk up to its ancestor that is.
      while (elem.parentNode !== this.parentElement) elem = elem.parentNode;

      var range = elem.$blaze_range;
      while (range && range !== this) range = range.parentRange;

      return range === this;
    };

    DOMRange.prototype.containsRange = function (range) {
      if (!this.attached) throw new Error("Must be attached");

      if (!range.attached) return false;

      // A DOMRange is contained in this DOMRange if it's possible
      // to reach this range by following parent pointers.  If the
      // DOMRange has the same parentElement, then it should be
      // a member, or a member of a member etc.  Otherwise, we must
      // contain its parentElement.

      if (range.parentElement !== this.parentElement) return this.containsElement(range.parentElement);

      if (range === this) return false; // don't contain self

      while (range && range !== this) range = range.parentRange;

      return range === this;
    };

    DOMRange.prototype.onAttached = function (attached) {
      this.onAttachedDetached({ attached: attached });
    };

    // callbacks are `attached(range, element)` and
    // `detached(range, element)`, and they may
    // access the `callbacks` object in `this`.
    // The arguments to `detached` are the same
    // range and element that were passed to `attached`.
    DOMRange.prototype.onAttachedDetached = function (callbacks) {
      if (this.attachedCallbacks === _emptyArray) this.attachedCallbacks = [];
      this.attachedCallbacks.push(callbacks);
    };

    DOMRange.prototype.$ = function (selector) {
      var self = this;

      var parentNode = this.parentElement;
      if (!parentNode) throw new Error("Can't select in removed DomRange");

      // Strategy: Find all selector matches under parentNode,
      // then filter out the ones that aren't in this DomRange
      // using `DOMRange#containsElement`.  This is
      // asymptotically slow in the presence of O(N) sibling
      // content that is under parentNode but not in our range,
      // so if performance is an issue, the selector should be
      // run on a child element.

      // Since jQuery can't run selectors on a DocumentFragment,
      // we don't expect findBySelector to work.
      if (parentNode.nodeType === 11 /* DocumentFragment */) throw new Error("Can't use $ on an offscreen range");

      var results = Blaze._DOMBackend.findBySelector(selector, parentNode);

      // We don't assume `results` has jQuery API; a plain array
      // should do just as well.  However, if we do have a jQuery
      // array, we want to end up with one also, so we use
      // `.filter`.

      // Function that selects only elements that are actually
      // in this DomRange, rather than simply descending from
      // `parentNode`.
      var filterFunc = function (elem) {
        // handle jQuery's arguments to filter, where the node
        // is in `this` and the index is the first argument.
        if (typeof elem === 'number') elem = this;

        return self.containsElement(elem);
      };

      if (!results.filter) {
        // not a jQuery array, and not a browser with
        // Array.prototype.filter (e.g. IE <9)
        var newResults = [];
        for (var i = 0; i < results.length; i++) {
          var x = results[i];
          if (filterFunc(x)) newResults.push(x);
        }
        results = newResults;
      } else {
        // `results.filter` is either jQuery's or ECMAScript's `filter`
        results = results.filter(filterFunc);
      }

      return results;
    };

    // Returns true if element a contains node b and is not node b.
    //
    // The restriction that `a` be an element (not a document fragment,
    // say) is based on what's easy to implement cross-browser.
    Blaze._elementContains = function (a, b) {
      if (a.nodeType !== 1) // ELEMENT
        return false;
      if (a === b) return false;

      if (a.compareDocumentPosition) {
        return a.compareDocumentPosition(b) & 0x10;
      } else {
        // Should be only old IE and maybe other old browsers here.
        // Modern Safari has both functions but seems to get contains() wrong.
        // IE can't handle b being a text node.  We work around this
        // by doing a direct parent test now.
        b = b.parentNode;
        if (!(b && b.nodeType === 1)) // ELEMENT
          return false;
        if (a === b) return true;

        return a.contains(b);
      }
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/events.js                                                                                            //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var EventSupport = Blaze._EventSupport = {};

    var DOMBackend = Blaze._DOMBackend;

    // List of events to always delegate, never capture.
    // Since jQuery fakes bubbling for certain events in
    // certain browsers (like `submit`), we don't want to
    // get in its way.
    //
    // We could list all known bubbling
    // events here to avoid creating speculative capturers
    // for them, but it would only be an optimization.
    var eventsToDelegate = EventSupport.eventsToDelegate = {
      blur: 1, change: 1, click: 1, focus: 1, focusin: 1,
      focusout: 1, reset: 1, submit: 1
    };

    var EVENT_MODE = EventSupport.EVENT_MODE = {
      TBD: 0,
      BUBBLING: 1,
      CAPTURING: 2
    };

    var NEXT_HANDLERREC_ID = 1;

    var HandlerRec = function (elem, type, selector, handler, recipient) {
      this.elem = elem;
      this.type = type;
      this.selector = selector;
      this.handler = handler;
      this.recipient = recipient;
      this.id = NEXT_HANDLERREC_ID++;

      this.mode = EVENT_MODE.TBD;

      // It's important that delegatedHandler be a different
      // instance for each handlerRecord, because its identity
      // is used to remove it.
      //
      // It's also important that the closure have access to
      // `this` when it is not called with it set.
      this.delegatedHandler = function (h) {
        return function (evt) {
          if (!h.selector && evt.currentTarget !== evt.target)
            // no selector means only fire on target
            return;
          return h.handler.apply(h.recipient, arguments);
        };
      }(this);

      // WHY CAPTURE AND DELEGATE: jQuery can't delegate
      // non-bubbling events, because
      // event capture doesn't work in IE 8.  However, there
      // are all sorts of new-fangled non-bubbling events
      // like "play" and "touchenter".  We delegate these
      // events using capture in all browsers except IE 8.
      // IE 8 doesn't support these events anyway.

      var tryCapturing = elem.addEventListener && !_.has(eventsToDelegate, DOMBackend.Events.parseEventType(type));

      if (tryCapturing) {
        this.capturingHandler = function (h) {
          return function (evt) {
            if (h.mode === EVENT_MODE.TBD) {
              // must be first time we're called.
              if (evt.bubbles) {
                // this type of event bubbles, so don't
                // get called again.
                h.mode = EVENT_MODE.BUBBLING;
                DOMBackend.Events.unbindEventCapturer(h.elem, h.type, h.capturingHandler);
                return;
              } else {
                // this type of event doesn't bubble,
                // so unbind the delegation, preventing
                // it from ever firing.
                h.mode = EVENT_MODE.CAPTURING;
                DOMBackend.Events.undelegateEvents(h.elem, h.type, h.delegatedHandler);
              }
            }

            h.delegatedHandler(evt);
          };
        }(this);
      } else {
        this.mode = EVENT_MODE.BUBBLING;
      }
    };
    EventSupport.HandlerRec = HandlerRec;

    HandlerRec.prototype.bind = function () {
      // `this.mode` may be EVENT_MODE_TBD, in which case we bind both. in
      // this case, 'capturingHandler' is in charge of detecting the
      // correct mode and turning off one or the other handlers.
      if (this.mode !== EVENT_MODE.BUBBLING) {
        DOMBackend.Events.bindEventCapturer(this.elem, this.type, this.selector || '*', this.capturingHandler);
      }

      if (this.mode !== EVENT_MODE.CAPTURING) DOMBackend.Events.delegateEvents(this.elem, this.type, this.selector || '*', this.delegatedHandler);
    };

    HandlerRec.prototype.unbind = function () {
      if (this.mode !== EVENT_MODE.BUBBLING) DOMBackend.Events.unbindEventCapturer(this.elem, this.type, this.capturingHandler);

      if (this.mode !== EVENT_MODE.CAPTURING) DOMBackend.Events.undelegateEvents(this.elem, this.type, this.delegatedHandler);
    };

    EventSupport.listen = function (element, events, selector, handler, recipient, getParentRecipient) {

      // Prevent this method from being JITed by Safari.  Due to a
      // presumed JIT bug in Safari -- observed in Version 7.0.6
      // (9537.78.2) -- this method may crash the Safari render process if
      // it is JITed.
      // Repro: https://github.com/dgreensp/public/tree/master/safari-crash
      try {
        element = element;
      } finally {}

      var eventTypes = [];
      events.replace(/[^ /]+/g, function (e) {
        eventTypes.push(e);
      });

      var newHandlerRecs = [];
      for (var i = 0, N = eventTypes.length; i < N; i++) {
        var type = eventTypes[i];

        var eventDict = element.$blaze_events;
        if (!eventDict) eventDict = element.$blaze_events = {};

        var info = eventDict[type];
        if (!info) {
          info = eventDict[type] = {};
          info.handlers = [];
        }
        var handlerList = info.handlers;
        var handlerRec = new HandlerRec(element, type, selector, handler, recipient);
        newHandlerRecs.push(handlerRec);
        handlerRec.bind();
        handlerList.push(handlerRec);
        // Move handlers of enclosing ranges to end, by unbinding and rebinding
        // them.  In jQuery (or other DOMBackend) this causes them to fire
        // later when the backend dispatches event handlers.
        if (getParentRecipient) {
          for (var r = getParentRecipient(recipient); r; r = getParentRecipient(r)) {
            // r is an enclosing range (recipient)
            for (var j = 0, Nj = handlerList.length; j < Nj; j++) {
              var h = handlerList[j];
              if (h.recipient === r) {
                h.unbind();
                h.bind();
                handlerList.splice(j, 1); // remove handlerList[j]
                handlerList.push(h);
                j--; // account for removed handler
                Nj--; // don't visit appended handlers
              }
            }
          }
        }
      }

      return {
        // closes over just `element` and `newHandlerRecs`
        stop: function () {
          var eventDict = element.$blaze_events;
          if (!eventDict) return;
          // newHandlerRecs has only one item unless you specify multiple
          // event types.  If this code is slow, it's because we have to
          // iterate over handlerList here.  Clearing a whole handlerList
          // via stop() methods is O(N^2) in the number of handlers on
          // an element.
          for (var i = 0; i < newHandlerRecs.length; i++) {
            var handlerToRemove = newHandlerRecs[i];
            var info = eventDict[handlerToRemove.type];
            if (!info) continue;
            var handlerList = info.handlers;
            for (var j = handlerList.length - 1; j >= 0; j--) {
              if (handlerList[j] === handlerToRemove) {
                handlerToRemove.unbind();
                handlerList.splice(j, 1); // remove handlerList[j]
              }
            }
          }
          newHandlerRecs.length = 0;
        }
      };
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/attrs.js                                                                                             //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var jsUrlsAllowed = false;
    Blaze._allowJavascriptUrls = function () {
      jsUrlsAllowed = true;
    };
    Blaze._javascriptUrlsAllowed = function () {
      return jsUrlsAllowed;
    };

    // An AttributeHandler object is responsible for updating a particular attribute
    // of a particular element.  AttributeHandler subclasses implement
    // browser-specific logic for dealing with particular attributes across
    // different browsers.
    //
    // To define a new type of AttributeHandler, use
    // `var FooHandler = AttributeHandler.extend({ update: function ... })`
    // where the `update` function takes arguments `(element, oldValue, value)`.
    // The `element` argument is always the same between calls to `update` on
    // the same instance.  `oldValue` and `value` are each either `null` or
    // a Unicode string of the type that might be passed to the value argument
    // of `setAttribute` (i.e. not an HTML string with character references).
    // When an AttributeHandler is installed, an initial call to `update` is
    // always made with `oldValue = null`.  The `update` method can access
    // `this.name` if the AttributeHandler class is a generic one that applies
    // to multiple attribute names.
    //
    // AttributeHandlers can store custom properties on `this`, as long as they
    // don't use the names `element`, `name`, `value`, and `oldValue`.
    //
    // AttributeHandlers can't influence how attributes appear in rendered HTML,
    // only how they are updated after materialization as DOM.

    AttributeHandler = function (name, value) {
      this.name = name;
      this.value = value;
    };
    Blaze._AttributeHandler = AttributeHandler;

    AttributeHandler.prototype.update = function (element, oldValue, value) {
      if (value === null) {
        if (oldValue !== null) element.removeAttribute(this.name);
      } else {
        element.setAttribute(this.name, value);
      }
    };

    AttributeHandler.extend = function (options) {
      var curType = this;
      var subType = function AttributeHandlerSubtype() /*arguments*/{
        AttributeHandler.apply(this, arguments);
      };
      subType.prototype = new curType();
      subType.extend = curType.extend;
      if (options) _.extend(subType.prototype, options);
      return subType;
    };

    /// Apply the diff between the attributes of "oldValue" and "value" to "element."
    //
    // Each subclass must implement a parseValue method which takes a string
    // as an input and returns an ordered dict of attributes. The keys of the dict
    // are unique identifiers (ie. css properties in the case of styles), and the
    // values are the entire attribute which will be injected into the element.
    //
    // Extended below to support classes, SVG elements and styles.

    Blaze._DiffingAttributeHandler = AttributeHandler.extend({
      update: function (element, oldValue, value) {
        if (!this.getCurrentValue || !this.setValue || !this.parseValue || !this.joinValues) throw new Error("Missing methods in subclass of 'DiffingAttributeHandler'");

        var oldAttrsMap = oldValue ? this.parseValue(oldValue) : new OrderedDict();
        var attrsMap = value ? this.parseValue(value) : new OrderedDict();

        // the current attributes on the element, which we will mutate.

        var currentAttrString = this.getCurrentValue(element);
        var currentAttrsMap = currentAttrString ? this.parseValue(currentAttrString) : new OrderedDict();

        // Any outside changes to attributes we add at the end.
        currentAttrsMap.forEach(function (value, key, i) {
          // If the key already exists, we do not use the current value, but the new value.
          if (attrsMap.has(key)) {
            return;
          }

          // Key does not already exist, but it existed before. Which means it was explicitly
          // removed, so we do not add it.
          if (oldAttrsMap.has(key)) {
            return;
          }

          attrsMap.append(key, value);
        });

        var values = [];
        attrsMap.forEach(function (value, key, i) {
          values.push(value);
        });

        this.setValue(element, this.joinValues(values));
      }
    });

    var ClassHandler = Blaze._DiffingAttributeHandler.extend({
      // @param rawValue {String}
      getCurrentValue: function (element) {
        return element.className;
      },
      setValue: function (element, className) {
        element.className = className;
      },
      parseValue: function (attrString) {
        var tokens = new OrderedDict();

        _.each(attrString.split(' '), function (token) {
          if (token) {
            // Ordered dict requires unique keys.
            if (!tokens.has(token)) {
              tokens.append(token, token);
            }
          }
        });
        return tokens;
      },
      joinValues: function (values) {
        return values.join(' ');
      }
    });

    var SVGClassHandler = ClassHandler.extend({
      getCurrentValue: function (element) {
        return element.className.baseVal;
      },
      setValue: function (element, className) {
        element.setAttribute('class', className);
      }
    });

    var StyleHandler = Blaze._DiffingAttributeHandler.extend({
      getCurrentValue: function (element) {
        return element.getAttribute('style');
      },
      setValue: function (element, style) {
        if (style === '') {
          element.removeAttribute('style');
        } else {
          element.setAttribute('style', style);
        }
      },

      // Parse a string to produce a map from property to attribute string.
      //
      // Example:
      // "color:red; foo:12px" produces a token {color: "color:red", foo:"foo:12px"}
      parseValue: function (attrString) {
        var tokens = new OrderedDict();

        // Regex for parsing a css attribute declaration, taken from css-parse:
        // https://github.com/reworkcss/css-parse/blob/7cef3658d0bba872cde05a85339034b187cb3397/index.js#L219
        var regex = /(\*?[-#\/\*\\\w]+(?:\[[0-9a-z_-]+\])?)\s*:\s*(?:\'(?:\\\'|.)*?\'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+[;\s]*/g;
        var match = regex.exec(attrString);
        while (match) {
          // match[0] = entire matching string
          // match[1] = css property
          // Prefix the token to prevent conflicts with existing properties.

          // We use the last value for the same key.
          if (tokens.has(match[1])) {
            tokens.remove(match[1]);
          }

          // XXX No `String.trim` on Safari 4. Swap out $.trim if we want to
          // remove strong dep on jquery.
          tokens.append(match[1], match[0].trim ? match[0].trim() : $.trim(match[0]));

          match = regex.exec(attrString);
        }

        return tokens;
      },

      joinValues: function (values) {
        // TODO: Assure that there is always ; between values. But what is an example where it breaks?
        return values.join(' ');
      }
    });

    var BooleanHandler = AttributeHandler.extend({
      update: function (element, oldValue, value) {
        var name = this.name;
        if (value == null) {
          if (oldValue != null) element[name] = false;
        } else {
          element[name] = true;
        }
      }
    });

    var DOMPropertyHandler = AttributeHandler.extend({
      update: function (element, oldValue, value) {
        var name = this.name;
        if (value !== element[name]) element[name] = value;
      }
    });

    // attributes of the type 'xlink:something' should be set using
    // the correct namespace in order to work
    var XlinkHandler = AttributeHandler.extend({
      update: function (element, oldValue, value) {
        var NS = 'http://www.w3.org/1999/xlink';
        if (value === null) {
          if (oldValue !== null) element.removeAttributeNS(NS, this.name);
        } else {
          element.setAttributeNS(NS, this.name, this.value);
        }
      }
    });

    // cross-browser version of `instanceof SVGElement`
    var isSVGElement = function (elem) {
      return 'ownerSVGElement' in elem;
    };

    var isUrlAttribute = function (tagName, attrName) {
      // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html
      // and
      // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1
      var urlAttrs = {
        FORM: ['action'],
        BODY: ['background'],
        BLOCKQUOTE: ['cite'],
        Q: ['cite'],
        DEL: ['cite'],
        INS: ['cite'],
        OBJECT: ['classid', 'codebase', 'data', 'usemap'],
        APPLET: ['codebase'],
        A: ['href'],
        AREA: ['href'],
        LINK: ['href'],
        BASE: ['href'],
        IMG: ['longdesc', 'src', 'usemap'],
        FRAME: ['longdesc', 'src'],
        IFRAME: ['longdesc', 'src'],
        HEAD: ['profile'],
        SCRIPT: ['src'],
        INPUT: ['src', 'usemap', 'formaction'],
        BUTTON: ['formaction'],
        BASE: ['href'],
        MENUITEM: ['icon'],
        HTML: ['manifest'],
        VIDEO: ['poster']
      };

      if (attrName === 'itemid') {
        return true;
      }

      var urlAttrNames = urlAttrs[tagName] || [];
      return _.contains(urlAttrNames, attrName);
    };

    // To get the protocol for a URL, we let the browser normalize it for
    // us, by setting it as the href for an anchor tag and then reading out
    // the 'protocol' property.
    if (Meteor.isClient) {
      var anchorForNormalization = document.createElement('A');
    }

    var getUrlProtocol = function (url) {
      if (Meteor.isClient) {
        anchorForNormalization.href = url;
        return (anchorForNormalization.protocol || "").toLowerCase();
      } else {
        throw new Error('getUrlProtocol not implemented on the server');
      }
    };

    // UrlHandler is an attribute handler for all HTML attributes that take
    // URL values. It disallows javascript: URLs, unless
    // Blaze._allowJavascriptUrls() has been called. To detect javascript:
    // urls, we set the attribute on a dummy anchor element and then read
    // out the 'protocol' property of the attribute.
    var origUpdate = AttributeHandler.prototype.update;
    var UrlHandler = AttributeHandler.extend({
      update: function (element, oldValue, value) {
        var self = this;
        var args = arguments;

        if (Blaze._javascriptUrlsAllowed()) {
          origUpdate.apply(self, args);
        } else {
          var isJavascriptProtocol = getUrlProtocol(value) === "javascript:";
          var isVBScriptProtocol = getUrlProtocol(value) === "vbscript:";
          if (isJavascriptProtocol || isVBScriptProtocol) {
            Blaze._warn("URLs that use the 'javascript:' or 'vbscript:' protocol are not " + "allowed in URL attribute values. " + "Call Blaze._allowJavascriptUrls() " + "to enable them.");
            origUpdate.apply(self, [element, oldValue, null]);
          } else {
            origUpdate.apply(self, args);
          }
        }
      }
    });

    // XXX make it possible for users to register attribute handlers!
    Blaze._makeAttributeHandler = function (elem, name, value) {
      // generally, use setAttribute but certain attributes need to be set
      // by directly setting a JavaScript property on the DOM element.
      if (name === 'class') {
        if (isSVGElement(elem)) {
          return new SVGClassHandler(name, value);
        } else {
          return new ClassHandler(name, value);
        }
      } else if (name === 'style') {
        return new StyleHandler(name, value);
      } else if (elem.tagName === 'OPTION' && name === 'selected' || elem.tagName === 'INPUT' && name === 'checked' || elem.tagName === 'VIDEO' && name === 'muted') {
        return new BooleanHandler(name, value);
      } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT') && name === 'value') {
        // internally, TEXTAREAs tracks their value in the 'value'
        // attribute just like INPUTs.
        return new DOMPropertyHandler(name, value);
      } else if (name.substring(0, 6) === 'xlink:') {
        return new XlinkHandler(name.substring(6), value);
      } else if (isUrlAttribute(elem.tagName, name)) {
        return new UrlHandler(name, value);
      } else {
        return new AttributeHandler(name, value);
      }

      // XXX will need one for 'style' on IE, though modern browsers
      // seem to handle setAttribute ok.
    };

    ElementAttributesUpdater = function (elem) {
      this.elem = elem;
      this.handlers = {};
    };

    // Update attributes on `elem` to the dictionary `attrs`, whose
    // values are strings.
    ElementAttributesUpdater.prototype.update = function (newAttrs) {
      var elem = this.elem;
      var handlers = this.handlers;

      for (var k in handlers) {
        if (!_.has(newAttrs, k)) {
          // remove attributes (and handlers) for attribute names
          // that don't exist as keys of `newAttrs` and so won't
          // be visited when traversing it.  (Attributes that
          // exist in the `newAttrs` object but are `null`
          // are handled later.)
          var handler = handlers[k];
          var oldValue = handler.value;
          handler.value = null;
          handler.update(elem, oldValue, null);
          delete handlers[k];
        }
      }

      for (var k in newAttrs) {
        var handler = null;
        var oldValue = null;
        var value = newAttrs[k];
        if (!_.has(handlers, k)) {
          if (value !== null) {
            // make new handler
            handler = Blaze._makeAttributeHandler(elem, k, value);
            handlers[k] = handler;
          }
        } else {
          handler = handlers[k];
          oldValue = handler.value;
        }
        if (oldValue !== value) {
          handler.value = value;
          handler.update(elem, oldValue, value);
          if (value === null) delete handlers[k];
        }
      }
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/materializer.js                                                                                      //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Turns HTMLjs into DOM nodes and DOMRanges.
    //
    // - `htmljs`: the value to materialize, which may be any of the htmljs
    //   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,
    //   null, or undefined) or a View or Template (which will be used to
    //   construct a View).
    // - `intoArray`: the array of DOM nodes and DOMRanges to push the output
    //   into (required)
    // - `parentView`: the View we are materializing content for (optional)
    // - `_existingWorkStack`: optional argument, only used for recursive
    //   calls when there is some other _materializeDOM on the call stack.
    //   If _materializeDOM called your function and passed in a workStack,
    //   pass it back when you call _materializeDOM (such as from a workStack
    //   task).
    //
    // Returns `intoArray`, which is especially useful if you pass in `[]`.
    Blaze._materializeDOM = function (htmljs, intoArray, parentView, _existingWorkStack) {
      // In order to use fewer stack frames, materializeDOMInner can push
      // tasks onto `workStack`, and they will be popped off
      // and run, last first, after materializeDOMInner returns.  The
      // reason we use a stack instead of a queue is so that we recurse
      // depth-first, doing newer tasks first.
      var workStack = _existingWorkStack || [];
      materializeDOMInner(htmljs, intoArray, parentView, workStack);

      if (!_existingWorkStack) {
        // We created the work stack, so we are responsible for finishing
        // the work.  Call each "task" function, starting with the top
        // of the stack.
        while (workStack.length) {
          // Note that running task() may push new items onto workStack.
          var task = workStack.pop();
          task();
        }
      }

      return intoArray;
    };

    var materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {
      if (htmljs == null) {
        // null or undefined
        return;
      }

      switch (typeof htmljs) {
        case 'string':case 'boolean':case 'number':
          intoArray.push(document.createTextNode(String(htmljs)));
          return;
        case 'object':
          if (htmljs.htmljsType) {
            switch (htmljs.htmljsType) {
              case HTML.Tag.htmljsType:
                intoArray.push(materializeTag(htmljs, parentView, workStack));
                return;
              case HTML.CharRef.htmljsType:
                intoArray.push(document.createTextNode(htmljs.str));
                return;
              case HTML.Comment.htmljsType:
                intoArray.push(document.createComment(htmljs.sanitizedValue));
                return;
              case HTML.Raw.htmljsType:
                // Get an array of DOM nodes by using the browser's HTML parser
                // (like innerHTML).
                var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);
                for (var i = 0; i < nodes.length; i++) intoArray.push(nodes[i]);
                return;
            }
          } else if (HTML.isArray(htmljs)) {
            for (var i = htmljs.length - 1; i >= 0; i--) {
              workStack.push(Blaze._bind(Blaze._materializeDOM, null, htmljs[i], intoArray, parentView, workStack));
            }
            return;
          } else {
            if (htmljs instanceof Blaze.Template) {
              htmljs = htmljs.constructView();
              // fall through to Blaze.View case below
            }
            if (htmljs instanceof Blaze.View) {
              Blaze._materializeView(htmljs, parentView, workStack, intoArray);
              return;
            }
          }
      }

      throw new Error("Unexpected object in htmljs: " + htmljs);
    };

    var materializeTag = function (tag, parentView, workStack) {
      var tagName = tag.tagName;
      var elem;
      if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag)) && document.createElementNS) {
        // inline SVG
        elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);
      } else {
        // normal elements
        elem = document.createElement(tagName);
      }

      var rawAttrs = tag.attrs;
      var children = tag.children;
      if (tagName === 'textarea' && tag.children.length && !(rawAttrs && 'value' in rawAttrs)) {
        // Provide very limited support for TEXTAREA tags with children
        // rather than a "value" attribute.
        // Reactivity in the form of Views nested in the tag's children
        // won't work.  Compilers should compile textarea contents into
        // the "value" attribute of the tag, wrapped in a function if there
        // is reactivity.
        if (typeof rawAttrs === 'function' || HTML.isArray(rawAttrs)) {
          throw new Error("Can't have reactive children of TEXTAREA node; " + "use the 'value' attribute instead.");
        }
        rawAttrs = _.extend({}, rawAttrs || null);
        rawAttrs.value = Blaze._expand(children, parentView);
        children = [];
      }

      if (rawAttrs) {
        var attrUpdater = new ElementAttributesUpdater(elem);
        var updateAttributes = function () {
          var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);
          var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);
          var stringAttrs = {};
          for (var attrName in flattenedAttrs) {
            // map `null`, `undefined`, and `false` to null, which is important
            // so that attributes with nully values are considered absent.
            // stringify anything else (e.g. strings, booleans, numbers including 0).
            if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false) stringAttrs[attrName] = null;else stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName], parentView, HTML.TEXTMODE.STRING);
          }
          attrUpdater.update(stringAttrs);
        };
        var updaterComputation;
        if (parentView) {
          updaterComputation = parentView.autorun(updateAttributes, undefined, 'updater');
        } else {
          updaterComputation = Tracker.nonreactive(function () {
            return Tracker.autorun(function () {
              Tracker._withCurrentView(parentView, updateAttributes);
            });
          });
        }
        Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {
          updaterComputation.stop();
        });
      }

      if (children.length) {
        var childNodesAndRanges = [];
        // push this function first so that it's done last
        workStack.push(function () {
          for (var i = 0; i < childNodesAndRanges.length; i++) {
            var x = childNodesAndRanges[i];
            if (x instanceof Blaze._DOMRange) x.attach(elem);else elem.appendChild(x);
          }
        });
        // now push the task that calculates childNodesAndRanges
        workStack.push(Blaze._bind(Blaze._materializeDOM, null, children, childNodesAndRanges, parentView, workStack));
      }

      return elem;
    };

    var isSVGAnchor = function (node) {
      // We generally aren't able to detect SVG <a> elements because
      // if "A" were in our list of known svg element names, then all
      // <a> nodes would be created using
      // `document.createElementNS`. But in the special case of <a
      // xlink:href="...">, we can at least detect that attribute and
      // create an SVG <a> tag in that case.
      //
      // However, we still have a general problem of knowing when to
      // use document.createElementNS and when to use
      // document.createElement; for example, font tags will always
      // be created as SVG elements which can cause other
      // problems. #1977
      return node.tagName === "a" && node.attrs && node.attrs["xlink:href"] !== undefined;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/exceptions.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var debugFunc;

    // We call into user code in many places, and it's nice to catch exceptions
    // propagated from user code immediately so that the whole system doesn't just
    // break.  Catching exceptions is easy; reporting them is hard.  This helper
    // reports exceptions.
    //
    // Usage:
    //
    // ```
    // try {
    //   // ... someStuff ...
    // } catch (e) {
    //   reportUIException(e);
    // }
    // ```
    //
    // An optional second argument overrides the default message.

    // Set this to `true` to cause `reportException` to throw
    // the next exception rather than reporting it.  This is
    // useful in unit tests that test error messages.
    Blaze._throwNextException = false;

    Blaze._reportException = function (e, msg) {
      if (Blaze._throwNextException) {
        Blaze._throwNextException = false;
        throw e;
      }

      if (!debugFunc)
        // adapted from Tracker
        debugFunc = function () {
          return typeof Meteor !== "undefined" ? Meteor._debug : typeof console !== "undefined" && console.log ? console.log : function () {};
        };

      // In Chrome, `e.stack` is a multiline string that starts with the message
      // and contains a stack trace.  Furthermore, `console.log` makes it clickable.
      // `console.log` supplies the space between the two arguments.
      debugFunc()(msg || 'Exception caught in template:', e.stack || e.message || e);
    };

    Blaze._wrapCatchingExceptions = function (f, where) {
      if (typeof f !== 'function') return f;

      return function () {
        try {
          return f.apply(this, arguments);
        } catch (e) {
          Blaze._reportException(e, 'Exception in ' + where + ':');
        }
      };
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/view.js                                                                                              //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    /// [new] Blaze.View([name], renderMethod)
    ///
    /// Blaze.View is the building block of reactive DOM.  Views have
    /// the following features:
    ///
    /// * lifecycle callbacks - Views are created, rendered, and destroyed,
    ///   and callbacks can be registered to fire when these things happen.
    ///
    /// * parent pointer - A View points to its parentView, which is the
    ///   View that caused it to be rendered.  These pointers form a
    ///   hierarchy or tree of Views.
    ///
    /// * render() method - A View's render() method specifies the DOM
    ///   (or HTML) content of the View.  If the method establishes
    ///   reactive dependencies, it may be re-run.
    ///
    /// * a DOMRange - If a View is rendered to DOM, its position and
    ///   extent in the DOM are tracked using a DOMRange object.
    ///
    /// When a View is constructed by calling Blaze.View, the View is
    /// not yet considered "created."  It doesn't have a parentView yet,
    /// and no logic has been run to initialize the View.  All real
    /// work is deferred until at least creation time, when the onViewCreated
    /// callbacks are fired, which happens when the View is "used" in
    /// some way that requires it to be rendered.
    ///
    /// ...more lifecycle stuff
    ///
    /// `name` is an optional string tag identifying the View.  The only
    /// time it's used is when looking in the View tree for a View of a
    /// particular name; for example, data contexts are stored on Views
    /// of name "with".  Names are also useful when debugging, so in
    /// general it's good for functions that create Views to set the name.
    /// Views associated with templates have names of the form "Template.foo".

    /**
     * @class
     * @summary Constructor for a View, which represents a reactive region of DOM.
     * @locus Client
     * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).
     * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  In this function, `this` is bound to the View.
     */
    Blaze.View = function (name, render) {
      if (!(this instanceof Blaze.View))
        // called without `new`
        return new Blaze.View(name, render);

      if (typeof name === 'function') {
        // omitted "name" argument
        render = name;
        name = '';
      }
      this.name = name;
      this._render = render;

      this._callbacks = {
        created: null,
        rendered: null,
        destroyed: null
      };

      // Setting all properties here is good for readability,
      // and also may help Chrome optimize the code by keeping
      // the View object from changing shape too much.
      this.isCreated = false;
      this._isCreatedForExpansion = false;
      this.isRendered = false;
      this._isAttached = false;
      this.isDestroyed = false;
      this._isInRender = false;
      this.parentView = null;
      this._domrange = null;
      // This flag is normally set to false except for the cases when view's parent
      // was generated as part of expanding some syntactic sugar expressions or
      // methods.
      // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular
      // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the
      // users don't know anything about these generated parent views, Blaze needs
      // this information to be available on views to make smarter decisions. For
      // example: removing the generated parent view with the view on Blaze.remove.
      this._hasGeneratedParent = false;
      // Bindings accessible to children views (via view.lookup('name')) within the
      // closest template view.
      this._scopeBindings = {};

      this.renderCount = 0;
    };

    Blaze.View.prototype._render = function () {
      return null;
    };

    Blaze.View.prototype.onViewCreated = function (cb) {
      this._callbacks.created = this._callbacks.created || [];
      this._callbacks.created.push(cb);
    };

    Blaze.View.prototype._onViewRendered = function (cb) {
      this._callbacks.rendered = this._callbacks.rendered || [];
      this._callbacks.rendered.push(cb);
    };

    Blaze.View.prototype.onViewReady = function (cb) {
      var self = this;
      var fire = function () {
        Tracker.afterFlush(function () {
          if (!self.isDestroyed) {
            Blaze._withCurrentView(self, function () {
              cb.call(self);
            });
          }
        });
      };
      self._onViewRendered(function onViewRendered() {
        if (self.isDestroyed) return;
        if (!self._domrange.attached) self._domrange.onAttached(fire);else fire();
      });
    };

    Blaze.View.prototype.onViewDestroyed = function (cb) {
      this._callbacks.destroyed = this._callbacks.destroyed || [];
      this._callbacks.destroyed.push(cb);
    };
    Blaze.View.prototype.removeViewDestroyedListener = function (cb) {
      var destroyed = this._callbacks.destroyed;
      if (!destroyed) return;
      var index = _.lastIndexOf(destroyed, cb);
      if (index !== -1) {
        // XXX You'd think the right thing to do would be splice, but _fireCallbacks
        // gets sad if you remove callbacks while iterating over the list.  Should
        // change this to use callback-hook or EventEmitter or something else that
        // properly supports removal.
        destroyed[index] = null;
      }
    };

    /// View#autorun(func)
    ///
    /// Sets up a Tracker autorun that is "scoped" to this View in two
    /// important ways: 1) Blaze.currentView is automatically set
    /// on every re-run, and 2) the autorun is stopped when the
    /// View is destroyed.  As with Tracker.autorun, the first run of
    /// the function is immediate, and a Computation object that can
    /// be used to stop the autorun is returned.
    ///
    /// View#autorun is meant to be called from View callbacks like
    /// onViewCreated, or from outside the rendering process.  It may not
    /// be called before the onViewCreated callbacks are fired (too early),
    /// or from a render() method (too confusing).
    ///
    /// Typically, autoruns that update the state
    /// of the View (as in Blaze.With) should be started from an onViewCreated
    /// callback.  Autoruns that update the DOM should be started
    /// from either onViewCreated (guarded against the absence of
    /// view._domrange), or onViewReady.
    Blaze.View.prototype.autorun = function (f, _inViewScope, displayName) {
      var self = this;

      // The restrictions on when View#autorun can be called are in order
      // to avoid bad patterns, like creating a Blaze.View and immediately
      // calling autorun on it.  A freshly created View is not ready to
      // have logic run on it; it doesn't have a parentView, for example.
      // It's when the View is materialized or expanded that the onViewCreated
      // handlers are fired and the View starts up.
      //
      // Letting the render() method call `this.autorun()` is problematic
      // because of re-render.  The best we can do is to stop the old
      // autorun and start a new one for each render, but that's a pattern
      // we try to avoid internally because it leads to helpers being
      // called extra times, in the case where the autorun causes the
      // view to re-render (and thus the autorun to be torn down and a
      // new one established).
      //
      // We could lift these restrictions in various ways.  One interesting
      // idea is to allow you to call `view.autorun` after instantiating
      // `view`, and automatically wrap it in `view.onViewCreated`, deferring
      // the autorun so that it starts at an appropriate time.  However,
      // then we can't return the Computation object to the caller, because
      // it doesn't exist yet.
      if (!self.isCreated) {
        throw new Error("View#autorun must be called from the created callback at the earliest");
      }
      if (this._isInRender) {
        throw new Error("Can't call View#autorun from inside render(); try calling it from the created or rendered callback");
      }

      var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;

      var func = function viewAutorun(c) {
        return Blaze._withCurrentView(_inViewScope || self, function () {
          return Blaze.Template._withTemplateInstanceFunc(templateInstanceFunc, function () {
            return f.call(self, c);
          });
        });
      };

      // Give the autorun function a better name for debugging and profiling.
      // The `displayName` property is not part of the spec but browsers like Chrome
      // and Firefox prefer it in debuggers over the name function was declared by.
      func.displayName = (self.name || 'anonymous') + ':' + (displayName || 'anonymous');
      var comp = Tracker.autorun(func);

      var stopComputation = function () {
        comp.stop();
      };
      self.onViewDestroyed(stopComputation);
      comp.onStop(function () {
        self.removeViewDestroyedListener(stopComputation);
      });

      return comp;
    };

    Blaze.View.prototype._errorIfShouldntCallSubscribe = function () {
      var self = this;

      if (!self.isCreated) {
        throw new Error("View#subscribe must be called from the created callback at the earliest");
      }
      if (self._isInRender) {
        throw new Error("Can't call View#subscribe from inside render(); try calling it from the created or rendered callback");
      }
      if (self.isDestroyed) {
        throw new Error("Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.");
      }
    };

    /**
     * Just like Blaze.View#autorun, but with Meteor.subscribe instead of
     * Tracker.autorun. Stop the subscription when the view is destroyed.
     * @return {SubscriptionHandle} A handle to the subscription so that you can
     * see if it is ready, or stop it manually
     */
    Blaze.View.prototype.subscribe = function (args, options) {
      var self = this;
      options = options || {};

      self._errorIfShouldntCallSubscribe();

      var subHandle;
      if (options.connection) {
        subHandle = options.connection.subscribe.apply(options.connection, args);
      } else {
        subHandle = Meteor.subscribe.apply(Meteor, args);
      }

      self.onViewDestroyed(function () {
        subHandle.stop();
      });

      return subHandle;
    };

    Blaze.View.prototype.firstNode = function () {
      if (!this._isAttached) throw new Error("View must be attached before accessing its DOM");

      return this._domrange.firstNode();
    };

    Blaze.View.prototype.lastNode = function () {
      if (!this._isAttached) throw new Error("View must be attached before accessing its DOM");

      return this._domrange.lastNode();
    };

    Blaze._fireCallbacks = function (view, which) {
      Blaze._withCurrentView(view, function () {
        Tracker.nonreactive(function fireCallbacks() {
          var cbs = view._callbacks[which];
          for (var i = 0, N = cbs && cbs.length; i < N; i++) cbs[i] && cbs[i].call(view);
        });
      });
    };

    Blaze._createView = function (view, parentView, forExpansion) {
      if (view.isCreated) throw new Error("Can't render the same View twice");

      view.parentView = parentView || null;
      view.isCreated = true;
      if (forExpansion) view._isCreatedForExpansion = true;

      Blaze._fireCallbacks(view, 'created');
    };

    var doFirstRender = function (view, initialContent) {
      var domrange = new Blaze._DOMRange(initialContent);
      view._domrange = domrange;
      domrange.view = view;
      view.isRendered = true;
      Blaze._fireCallbacks(view, 'rendered');

      var teardownHook = null;

      domrange.onAttached(function attached(range, element) {
        view._isAttached = true;

        teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(element, function teardown() {
          Blaze._destroyView(view, true /* _skipNodes */);
        });
      });

      // tear down the teardown hook
      view.onViewDestroyed(function () {
        teardownHook && teardownHook.stop();
        teardownHook = null;
      });

      return domrange;
    };

    // Take an uncreated View `view` and create and render it to DOM,
    // setting up the autorun that updates the View.  Returns a new
    // DOMRange, which has been associated with the View.
    //
    // The private arguments `_workStack` and `_intoArray` are passed in
    // by Blaze._materializeDOM and are only present for recursive calls
    // (when there is some other _materializeView on the stack).  If
    // provided, then we avoid the mutual recursion of calling back into
    // Blaze._materializeDOM so that deep View hierarchies don't blow the
    // stack.  Instead, we push tasks onto workStack for the initial
    // rendering and subsequent setup of the View, and they are done after
    // we return.  When there is a _workStack, we do not return the new
    // DOMRange, but instead push it into _intoArray from a _workStack
    // task.
    Blaze._materializeView = function (view, parentView, _workStack, _intoArray) {
      Blaze._createView(view, parentView);

      var domrange;
      var lastHtmljs;
      // We don't expect to be called in a Computation, but just in case,
      // wrap in Tracker.nonreactive.
      Tracker.nonreactive(function () {
        view.autorun(function doRender(c) {
          // `view.autorun` sets the current view.
          view.renderCount++;
          view._isInRender = true;
          // Any dependencies that should invalidate this Computation come
          // from this line:
          var htmljs = view._render();
          view._isInRender = false;

          if (!c.firstRun && !Blaze._isContentEqual(lastHtmljs, htmljs)) {
            Tracker.nonreactive(function doMaterialize() {
              // re-render
              var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);
              domrange.setMembers(rangesAndNodes);
              Blaze._fireCallbacks(view, 'rendered');
            });
          }
          lastHtmljs = htmljs;

          // Causes any nested views to stop immediately, not when we call
          // `setMembers` the next time around the autorun.  Otherwise,
          // helpers in the DOM tree to be replaced might be scheduled
          // to re-run before we have a chance to stop them.
          Tracker.onInvalidate(function () {
            if (domrange) {
              domrange.destroyMembers();
            }
          });
        }, undefined, 'materialize');

        // first render.  lastHtmljs is the first htmljs.
        var initialContents;
        if (!_workStack) {
          initialContents = Blaze._materializeDOM(lastHtmljs, [], view);
          domrange = doFirstRender(view, initialContents);
          initialContents = null; // help GC because we close over this scope a lot
        } else {
          // We're being called from Blaze._materializeDOM, so to avoid
          // recursion and save stack space, provide a description of the
          // work to be done instead of doing it.  Tasks pushed onto
          // _workStack will be done in LIFO order after we return.
          // The work will still be done within a Tracker.nonreactive,
          // because it will be done by some call to Blaze._materializeDOM
          // (which is always called in a Tracker.nonreactive).
          initialContents = [];
          // push this function first so that it happens last
          _workStack.push(function () {
            domrange = doFirstRender(view, initialContents);
            initialContents = null; // help GC because of all the closures here
            _intoArray.push(domrange);
          });
          // now push the task that calculates initialContents
          _workStack.push(Blaze._bind(Blaze._materializeDOM, null, lastHtmljs, initialContents, view, _workStack));
        }
      });

      if (!_workStack) {
        return domrange;
      } else {
        return null;
      }
    };

    // Expands a View to HTMLjs, calling `render` recursively on all
    // Views and evaluating any dynamic attributes.  Calls the `created`
    // callback, but not the `materialized` or `rendered` callbacks.
    // Destroys the view immediately, unless called in a Tracker Computation,
    // in which case the view will be destroyed when the Computation is
    // invalidated.  If called in a Tracker Computation, the result is a
    // reactive string; that is, the Computation will be invalidated
    // if any changes are made to the view or subviews that might affect
    // the HTML.
    Blaze._expandView = function (view, parentView) {
      Blaze._createView(view, parentView, true /*forExpansion*/);

      view._isInRender = true;
      var htmljs = Blaze._withCurrentView(view, function () {
        return view._render();
      });
      view._isInRender = false;

      var result = Blaze._expand(htmljs, view);

      if (Tracker.active) {
        Tracker.onInvalidate(function () {
          Blaze._destroyView(view);
        });
      } else {
        Blaze._destroyView(view);
      }

      return result;
    };

    // Options: `parentView`
    Blaze._HTMLJSExpander = HTML.TransformingVisitor.extend();
    Blaze._HTMLJSExpander.def({
      visitObject: function (x) {
        if (x instanceof Blaze.Template) x = x.constructView();
        if (x instanceof Blaze.View) return Blaze._expandView(x, this.parentView);

        // this will throw an error; other objects are not allowed!
        return HTML.TransformingVisitor.prototype.visitObject.call(this, x);
      },
      visitAttributes: function (attrs) {
        // expand dynamic attributes
        if (typeof attrs === 'function') attrs = Blaze._withCurrentView(this.parentView, attrs);

        // call super (e.g. for case where `attrs` is an array)
        return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);
      },
      visitAttribute: function (name, value, tag) {
        // expand attribute values that are functions.  Any attribute value
        // that contains Views must be wrapped in a function.
        if (typeof value === 'function') value = Blaze._withCurrentView(this.parentView, value);

        return HTML.TransformingVisitor.prototype.visitAttribute.call(this, name, value, tag);
      }
    });

    // Return Blaze.currentView, but only if it is being rendered
    // (i.e. we are in its render() method).
    var currentViewIfRendering = function () {
      var view = Blaze.currentView;
      return view && view._isInRender ? view : null;
    };

    Blaze._expand = function (htmljs, parentView) {
      parentView = parentView || currentViewIfRendering();
      return new Blaze._HTMLJSExpander({ parentView: parentView }).visit(htmljs);
    };

    Blaze._expandAttributes = function (attrs, parentView) {
      parentView = parentView || currentViewIfRendering();
      return new Blaze._HTMLJSExpander({ parentView: parentView }).visitAttributes(attrs);
    };

    Blaze._destroyView = function (view, _skipNodes) {
      if (view.isDestroyed) return;
      view.isDestroyed = true;

      Blaze._fireCallbacks(view, 'destroyed');

      // Destroy views and elements recursively.  If _skipNodes,
      // only recurse up to views, not elements, for the case where
      // the backend (jQuery) is recursing over the elements already.

      if (view._domrange) view._domrange.destroyMembers(_skipNodes);
    };

    Blaze._destroyNode = function (node) {
      if (node.nodeType === 1) Blaze._DOMBackend.Teardown.tearDownElement(node);
    };

    // Are the HTMLjs entities `a` and `b` the same?  We could be
    // more elaborate here but the point is to catch the most basic
    // cases.
    Blaze._isContentEqual = function (a, b) {
      if (a instanceof HTML.Raw) {
        return b instanceof HTML.Raw && a.value === b.value;
      } else if (a == null) {
        return b == null;
      } else {
        return a === b && (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string');
      }
    };

    /**
     * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
     * @locus Client
     * @type {Blaze.View}
     */
    Blaze.currentView = null;

    Blaze._withCurrentView = function (view, func) {
      var oldView = Blaze.currentView;
      try {
        Blaze.currentView = view;
        return func();
      } finally {
        Blaze.currentView = oldView;
      }
    };

    // Blaze.render publicly takes a View or a Template.
    // Privately, it takes any HTMLJS (extended with Views and Templates)
    // except null or undefined, or a function that returns any extended
    // HTMLJS.
    var checkRenderContent = function (content) {
      if (content === null) throw new Error("Can't render null");
      if (typeof content === 'undefined') throw new Error("Can't render undefined");

      if (content instanceof Blaze.View || content instanceof Blaze.Template || typeof content === 'function') return;

      try {
        // Throw if content doesn't look like HTMLJS at the top level
        // (i.e. verify that this is an HTML.Tag, or an array,
        // or a primitive, etc.)
        new HTML.Visitor().visit(content);
      } catch (e) {
        // Make error message suitable for public API
        throw new Error("Expected Template or View");
      }
    };

    // For Blaze.render and Blaze.toHTML, take content and
    // wrap it in a View, unless it's a single View or
    // Template already.
    var contentAsView = function (content) {
      checkRenderContent(content);

      if (content instanceof Blaze.Template) {
        return content.constructView();
      } else if (content instanceof Blaze.View) {
        return content;
      } else {
        var func = content;
        if (typeof func !== 'function') {
          func = function () {
            return content;
          };
        }
        return Blaze.View('render', func);
      }
    };

    // For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content
    // in a function, if necessary, so it can be a content arg to
    // a Blaze.With.
    var contentAsFunc = function (content) {
      checkRenderContent(content);

      if (typeof content !== 'function') {
        return function () {
          return content;
        };
      } else {
        return content;
      }
    };

    /**
     * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#Blaze-View) which can be passed to [`Blaze.remove`](#Blaze-remove).
     * @locus Client
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.
     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
     */
    Blaze.render = function (content, parentElement, nextNode, parentView) {
      if (!parentElement) {
        Blaze._warn("Blaze.render without a parent element is deprecated. " + "You must specify where to insert the rendered content.");
      }

      if (nextNode instanceof Blaze.View) {
        // handle omitted nextNode
        parentView = nextNode;
        nextNode = null;
      }

      // parentElement must be a DOM node. in particular, can't be the
      // result of a call to `$`. Can't check if `parentElement instanceof
      // Node` since 'Node' is undefined in IE8.
      if (parentElement && typeof parentElement.nodeType !== 'number') throw new Error("'parentElement' must be a DOM node");
      if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional
        throw new Error("'nextNode' must be a DOM node");

      parentView = parentView || currentViewIfRendering();

      var view = contentAsView(content);
      Blaze._materializeView(view, parentView);

      if (parentElement) {
        view._domrange.attach(parentElement, nextNode);
      }

      return view;
    };

    Blaze.insert = function (view, parentElement, nextNode) {
      Blaze._warn("Blaze.insert has been deprecated.  Specify where to insert the " + "rendered content in the call to Blaze.render.");

      if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error("Expected template rendered with Blaze.render");

      view._domrange.attach(parentElement, nextNode);
    };

    /**
     * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.
     * @locus Client
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.
     * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.
     * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
     * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
     * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
     */
    Blaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {
      // We defer the handling of optional arguments to Blaze.render.  At this point,
      // `nextNode` may actually be `parentView`.
      return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)), parentElement, nextNode, parentView);
    };

    /**
     * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.
     * @locus Client
     * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.
     */
    Blaze.remove = function (view) {
      if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error("Expected template rendered with Blaze.render");

      while (view) {
        if (!view.isDestroyed) {
          var range = view._domrange;
          if (range.attached && !range.parentRange) range.detach();
          range.destroy();
        }

        view = view._hasGeneratedParent && view.parentView;
      }
    };

    /**
     * @summary Renders a template or View to a string of HTML.
     * @locus Client
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
     */
    Blaze.toHTML = function (content, parentView) {
      parentView = parentView || currentViewIfRendering();

      return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));
    };

    /**
     * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.
     * @locus Client
     * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
     * @param {Object|Function} data The data context to use, or a function returning a data context.
     */
    Blaze.toHTMLWithData = function (content, data, parentView) {
      parentView = parentView || currentViewIfRendering();

      return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(data, contentAsFunc(content)), parentView));
    };

    Blaze._toText = function (htmljs, parentView, textMode) {
      if (typeof htmljs === 'function') throw new Error("Blaze._toText doesn't take a function, just HTMLjs");

      if (parentView != null && !(parentView instanceof Blaze.View)) {
        // omitted parentView argument
        textMode = parentView;
        parentView = null;
      }
      parentView = parentView || currentViewIfRendering();

      if (!textMode) throw new Error("textMode required");
      if (!(textMode === HTML.TEXTMODE.STRING || textMode === HTML.TEXTMODE.RCDATA || textMode === HTML.TEXTMODE.ATTRIBUTE)) throw new Error("Unknown textMode: " + textMode);

      return HTML.toText(Blaze._expand(htmljs, parentView), textMode);
    };

    /**
     * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.
     * @locus Client
     * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.
     */
    Blaze.getData = function (elementOrView) {
      var theWith;

      if (!elementOrView) {
        theWith = Blaze.getView('with');
      } else if (elementOrView instanceof Blaze.View) {
        var view = elementOrView;
        theWith = view.name === 'with' ? view : Blaze.getView(view, 'with');
      } else if (typeof elementOrView.nodeType === 'number') {
        if (elementOrView.nodeType !== 1) throw new Error("Expected DOM element");
        theWith = Blaze.getView(elementOrView, 'with');
      } else {
        throw new Error("Expected DOM element or View");
      }

      return theWith ? theWith.dataVar.get() : null;
    };

    // For back-compat
    Blaze.getElementData = function (element) {
      Blaze._warn("Blaze.getElementData has been deprecated.  Use " + "Blaze.getData(element) instead.");

      if (element.nodeType !== 1) throw new Error("Expected DOM element");

      return Blaze.getData(element);
    };

    // Both arguments are optional.

    /**
     * @summary Gets either the current View, or the View enclosing the given DOM element.
     * @locus Client
     * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.
     */
    Blaze.getView = function (elementOrView, _viewName) {
      var viewName = _viewName;

      if (typeof elementOrView === 'string') {
        // omitted elementOrView; viewName present
        viewName = elementOrView;
        elementOrView = null;
      }

      // We could eventually shorten the code by folding the logic
      // from the other methods into this method.
      if (!elementOrView) {
        return Blaze._getCurrentView(viewName);
      } else if (elementOrView instanceof Blaze.View) {
        return Blaze._getParentView(elementOrView, viewName);
      } else if (typeof elementOrView.nodeType === 'number') {
        return Blaze._getElementView(elementOrView, viewName);
      } else {
        throw new Error("Expected DOM element or View");
      }
    };

    // Gets the current view or its nearest ancestor of name
    // `name`.
    Blaze._getCurrentView = function (name) {
      var view = Blaze.currentView;
      // Better to fail in cases where it doesn't make sense
      // to use Blaze._getCurrentView().  There will be a current
      // view anywhere it does.  You can check Blaze.currentView
      // if you want to know whether there is one or not.
      if (!view) throw new Error("There is no current view");

      if (name) {
        while (view && view.name !== name) view = view.parentView;
        return view || null;
      } else {
        // Blaze._getCurrentView() with no arguments just returns
        // Blaze.currentView.
        return view;
      }
    };

    Blaze._getParentView = function (view, name) {
      var v = view.parentView;

      if (name) {
        while (v && v.name !== name) v = v.parentView;
      }

      return v || null;
    };

    Blaze._getElementView = function (elem, name) {
      var range = Blaze._DOMRange.forElement(elem);
      var view = null;
      while (range && !view) {
        view = range.view || null;
        if (!view) {
          if (range.parentRange) range = range.parentRange;else range = Blaze._DOMRange.forElement(range.parentElement);
        }
      }

      if (name) {
        while (view && view.name !== name) view = view.parentView;
        return view || null;
      } else {
        return view;
      }
    };

    Blaze._addEventMap = function (view, eventMap, thisInHandler) {
      thisInHandler = thisInHandler || null;
      var handles = [];

      if (!view._domrange) throw new Error("View must have a DOMRange");

      view._domrange.onAttached(function attached_eventMaps(range, element) {
        _.each(eventMap, function (handler, spec) {
          var clauses = spec.split(/,\s+/);
          // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']
          _.each(clauses, function (clause) {
            var parts = clause.split(/\s+/);
            if (parts.length === 0) return;

            var newEvents = parts.shift();
            var selector = parts.join(' ');
            handles.push(Blaze._EventSupport.listen(element, newEvents, selector, function (evt) {
              if (!range.containsElement(evt.currentTarget)) return null;
              var handlerThis = thisInHandler || this;
              var handlerArgs = arguments;
              return Blaze._withCurrentView(view, function () {
                return handler.apply(handlerThis, handlerArgs);
              });
            }, range, function (r) {
              return r.parentRange;
            }));
          });
        });
      });

      view.onViewDestroyed(function () {
        _.each(handles, function (h) {
          h.stop();
        });
        handles.length = 0;
      });
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/builtins.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    Blaze._calculateCondition = function (cond) {
      if (cond instanceof Array && cond.length === 0) cond = false;
      return !!cond;
    };

    /**
     * @summary Constructs a View that renders content with a data context.
     * @locus Client
     * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).
     */
    Blaze.With = function (data, contentFunc) {
      var view = Blaze.View('with', contentFunc);

      view.dataVar = new ReactiveVar();

      view.onViewCreated(function () {
        if (typeof data === 'function') {
          // `data` is a reactive function
          view.autorun(function () {
            view.dataVar.set(data());
          }, view.parentView, 'setData');
        } else {
          view.dataVar.set(data);
        }
      });

      return view;
    };

    /**
     * Attaches bindings to the instantiated view.
     * @param {Object} bindings A dictionary of bindings, each binding name
     * corresponds to a value or a function that will be reactively re-run.
     * @param {View} view The target.
     */
    Blaze._attachBindingsToView = function (bindings, view) {
      view.onViewCreated(function () {
        _.each(bindings, function (binding, name) {
          view._scopeBindings[name] = new ReactiveVar();
          if (typeof binding === 'function') {
            view.autorun(function () {
              view._scopeBindings[name].set(binding());
            }, view.parentView);
          } else {
            view._scopeBindings[name].set(binding);
          }
        });
      });
    };

    /**
     * @summary Constructs a View setting the local lexical scope in the block.
     * @param {Function} bindings Dictionary mapping names of bindings to
     * values or computations to reactively re-run.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).
     */
    Blaze.Let = function (bindings, contentFunc) {
      var view = Blaze.View('let', contentFunc);
      Blaze._attachBindingsToView(bindings, view);

      return view;
    };

    /**
     * @summary Constructs a View that renders content conditionally.
     * @locus Client
     * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).
     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
     */
    Blaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {
      var conditionVar = new ReactiveVar();

      var view = Blaze.View(_not ? 'unless' : 'if', function () {
        return conditionVar.get() ? contentFunc() : elseFunc ? elseFunc() : null;
      });
      view.__conditionVar = conditionVar;
      view.onViewCreated(function () {
        this.autorun(function () {
          var cond = Blaze._calculateCondition(conditionFunc());
          conditionVar.set(_not ? !cond : cond);
        }, this.parentView, 'condition');
      });

      return view;
    };

    /**
     * @summary An inverted [`Blaze.If`](#Blaze-If).
     * @locus Client
     * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.
     * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).
     * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
     */
    Blaze.Unless = function (conditionFunc, contentFunc, elseFunc) {
      return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);
    };

    /**
     * @summary Constructs a View that renders `contentFunc` for each item in a sequence.
     * @locus Client
     * @param {Function} argFunc A function to reactively re-run. The function can
     * return one of two options:
     *
     * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over
     *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the
     *   Each body you will be able to get the current item from the sequence using
     *   the name specified in the '_variable' field.
     *
     * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an
     *   object. Inside the Each body, the current item will be set as the data
     *   context.
     * @param {Function} contentFunc A Function that returns  [*renderable
     * content*](#Renderable-Content).
     * @param {Function} [elseFunc] A Function that returns [*renderable
     * content*](#Renderable-Content) to display in the case when there are no items
     * in the sequence.
     */
    Blaze.Each = function (argFunc, contentFunc, elseFunc) {
      var eachView = Blaze.View('each', function () {
        var subviews = this.initialSubviews;
        this.initialSubviews = null;
        if (this._isCreatedForExpansion) {
          this.expandedValueDep = new Tracker.Dependency();
          this.expandedValueDep.depend();
        }
        return subviews;
      });
      eachView.initialSubviews = [];
      eachView.numItems = 0;
      eachView.inElseMode = false;
      eachView.stopHandle = null;
      eachView.contentFunc = contentFunc;
      eachView.elseFunc = elseFunc;
      eachView.argVar = new ReactiveVar();
      eachView.variableName = null;

      // update the @index value in the scope of all subviews in the range
      var updateIndices = function (from, to) {
        if (to === undefined) {
          to = eachView.numItems - 1;
        }

        for (var i = from; i <= to; i++) {
          var view = eachView._domrange.members[i].view;
          view._scopeBindings['@index'].set(i);
        }
      };

      eachView.onViewCreated(function () {
        // We evaluate argFunc in an autorun to make sure
        // Blaze.currentView is always set when it runs (rather than
        // passing argFunc straight to ObserveSequence).
        eachView.autorun(function () {
          // argFunc can return either a sequence as is or a wrapper object with a
          // _sequence and _variable fields set.
          var arg = argFunc();
          if (_.isObject(arg) && _.has(arg, '_sequence')) {
            eachView.variableName = arg._variable || null;
            arg = arg._sequence;
          }

          eachView.argVar.set(arg);
        }, eachView.parentView, 'collection');

        eachView.stopHandle = ObserveSequence.observe(function () {
          return eachView.argVar.get();
        }, {
          addedAt: function (id, item, index) {
            Tracker.nonreactive(function () {
              var newItemView;
              if (eachView.variableName) {
                // new-style #each (as in {{#each item in items}})
                // doesn't create a new data context
                newItemView = Blaze.View('item', eachView.contentFunc);
              } else {
                newItemView = Blaze.With(item, eachView.contentFunc);
              }

              eachView.numItems++;

              var bindings = {};
              bindings['@index'] = index;
              if (eachView.variableName) {
                bindings[eachView.variableName] = item;
              }
              Blaze._attachBindingsToView(bindings, newItemView);

              if (eachView.expandedValueDep) {
                eachView.expandedValueDep.changed();
              } else if (eachView._domrange) {
                if (eachView.inElseMode) {
                  eachView._domrange.removeMember(0);
                  eachView.inElseMode = false;
                }

                var range = Blaze._materializeView(newItemView, eachView);
                eachView._domrange.addMember(range, index);
                updateIndices(index);
              } else {
                eachView.initialSubviews.splice(index, 0, newItemView);
              }
            });
          },
          removedAt: function (id, item, index) {
            Tracker.nonreactive(function () {
              eachView.numItems--;
              if (eachView.expandedValueDep) {
                eachView.expandedValueDep.changed();
              } else if (eachView._domrange) {
                eachView._domrange.removeMember(index);
                updateIndices(index);
                if (eachView.elseFunc && eachView.numItems === 0) {
                  eachView.inElseMode = true;
                  eachView._domrange.addMember(Blaze._materializeView(Blaze.View('each_else', eachView.elseFunc), eachView), 0);
                }
              } else {
                eachView.initialSubviews.splice(index, 1);
              }
            });
          },
          changedAt: function (id, newItem, oldItem, index) {
            Tracker.nonreactive(function () {
              if (eachView.expandedValueDep) {
                eachView.expandedValueDep.changed();
              } else {
                var itemView;
                if (eachView._domrange) {
                  itemView = eachView._domrange.getMember(index).view;
                } else {
                  itemView = eachView.initialSubviews[index];
                }
                if (eachView.variableName) {
                  itemView._scopeBindings[eachView.variableName].set(newItem);
                } else {
                  itemView.dataVar.set(newItem);
                }
              }
            });
          },
          movedTo: function (id, item, fromIndex, toIndex) {
            Tracker.nonreactive(function () {
              if (eachView.expandedValueDep) {
                eachView.expandedValueDep.changed();
              } else if (eachView._domrange) {
                eachView._domrange.moveMember(fromIndex, toIndex);
                updateIndices(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));
              } else {
                var subviews = eachView.initialSubviews;
                var itemView = subviews[fromIndex];
                subviews.splice(fromIndex, 1);
                subviews.splice(toIndex, 0, itemView);
              }
            });
          }
        });

        if (eachView.elseFunc && eachView.numItems === 0) {
          eachView.inElseMode = true;
          eachView.initialSubviews[0] = Blaze.View('each_else', eachView.elseFunc);
        }
      });

      eachView.onViewDestroyed(function () {
        if (eachView.stopHandle) eachView.stopHandle.stop();
      });

      return eachView;
    };

    Blaze._TemplateWith = function (arg, contentFunc) {
      var w;

      var argFunc = arg;
      if (typeof arg !== 'function') {
        argFunc = function () {
          return arg;
        };
      }

      // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we
      // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate
      // parent Views in the current template.  However, when there's an argument
      // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated
      // in the original scope.  There's no good order to nest
      // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,
      // so we wrap argFunc to run it in the "original parentView" of the
      // Blaze._InOuterTemplateScope.
      //
      // To make this better, reconsider _InOuterTemplateScope as a primitive.
      // Longer term, evaluate expressions in the proper lexical scope.
      var wrappedArgFunc = function () {
        var viewToEvaluateArg = null;
        if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {
          viewToEvaluateArg = w.parentView.originalParentView;
        }
        if (viewToEvaluateArg) {
          return Blaze._withCurrentView(viewToEvaluateArg, argFunc);
        } else {
          return argFunc();
        }
      };

      var wrappedContentFunc = function () {
        var content = contentFunc.call(this);

        // Since we are generating the Blaze._TemplateWith view for the
        // user, set the flag on the child view.  If `content` is a template,
        // construct the View so that we can set the flag.
        if (content instanceof Blaze.Template) {
          content = content.constructView();
        }
        if (content instanceof Blaze.View) {
          content._hasGeneratedParent = true;
        }

        return content;
      };

      w = Blaze.With(wrappedArgFunc, wrappedContentFunc);
      w.__isTemplateWith = true;
      return w;
    };

    Blaze._InOuterTemplateScope = function (templateView, contentFunc) {
      var view = Blaze.View('InOuterTemplateScope', contentFunc);
      var parentView = templateView.parentView;

      // Hack so that if you call `{{> foo bar}}` and it expands into
      // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template
      // that inserts `{{> Template.contentBlock}}`, the data context for
      // `Template.contentBlock` is not `bar` but the one enclosing that.
      if (parentView.__isTemplateWith) parentView = parentView.parentView;

      view.onViewCreated(function () {
        this.originalParentView = this.parentView;
        this.parentView = parentView;
        this.__childDoesntStartNewLexicalScope = true;
      });
      return view;
    };

    // XXX COMPAT WITH 0.9.0
    Blaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/lookup.js                                                                                            //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    Blaze._globalHelpers = {};

    // Documented as Template.registerHelper.
    // This definition also provides back-compat for `UI.registerHelper`.
    Blaze.registerHelper = function (name, func) {
      Blaze._globalHelpers[name] = func;
    };

    // Also documented as Template.deregisterHelper
    Blaze.deregisterHelper = function (name) {
      delete Blaze._globalHelpers[name];
    };

    var bindIfIsFunction = function (x, target) {
      if (typeof x !== 'function') return x;
      return Blaze._bind(x, target);
    };

    // If `x` is a function, binds the value of `this` for that function
    // to the current data context.
    var bindDataContext = function (x) {
      if (typeof x === 'function') {
        return function () {
          var data = Blaze.getData();
          if (data == null) data = {};
          return x.apply(data, arguments);
        };
      }
      return x;
    };

    Blaze._OLDSTYLE_HELPER = {};

    Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {
      // XXX COMPAT WITH 0.9.3
      var isKnownOldStyleHelper = false;

      if (template.__helpers.has(name)) {
        var helper = template.__helpers.get(name);
        if (helper === Blaze._OLDSTYLE_HELPER) {
          isKnownOldStyleHelper = true;
        } else if (helper != null) {
          return wrapHelper(bindDataContext(helper), tmplInstanceFunc);
        } else {
          return null;
        }
      }

      // old-style helper
      if (name in template) {
        // Only warn once per helper
        if (!isKnownOldStyleHelper) {
          template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);
          if (!template._NOWARN_OLDSTYLE_HELPERS) {
            Blaze._warn('Assigning helper with `' + template.viewName + '.' + name + ' = ...` is deprecated.  Use `' + template.viewName + '.helpers(...)` instead.');
          }
        }
        if (template[name] != null) {
          return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);
        }
      }

      return null;
    };

    var wrapHelper = function (f, templateFunc) {
      if (typeof f !== "function") {
        return f;
      }

      return function () {
        var self = this;
        var args = arguments;

        return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {
          return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);
        });
      };
    };

    Blaze._lexicalBindingLookup = function (view, name) {
      var currentView = view;
      var blockHelpersStack = [];

      // walk up the views stopping at a Spacebars.include or Template view that
      // doesn't have an InOuterTemplateScope view as a parent
      do {
        // skip block helpers views
        // if we found the binding on the scope, return it
        if (_.has(currentView._scopeBindings, name)) {
          var bindingReactiveVar = currentView._scopeBindings[name];
          return function () {
            return bindingReactiveVar.get();
          };
        }
      } while (!(currentView.__startsNewLexicalScope && !(currentView.parentView && currentView.parentView.__childDoesntStartNewLexicalScope)) && (currentView = currentView.parentView));

      return null;
    };

    // templateInstance argument is provided to be available for possible
    // alternative implementations of this function by 3rd party packages.
    Blaze._getTemplate = function (name, templateInstance) {
      if (name in Blaze.Template && Blaze.Template[name] instanceof Blaze.Template) {
        return Blaze.Template[name];
      }
      return null;
    };

    Blaze._getGlobalHelper = function (name, templateInstance) {
      if (Blaze._globalHelpers[name] != null) {
        return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);
      }
      return null;
    };

    // Looks up a name, like "foo" or "..", as a helper of the
    // current template; the name of a template; a global helper;
    // or a property of the data context.  Called on the View of
    // a template (i.e. a View with a `.template` property,
    // where the helpers are).  Used for the first name in a
    // "path" in a template tag, like "foo" in `{{foo.bar}}` or
    // ".." in `{{frobulate ../blah}}`.
    //
    // Returns a function, a non-function value, or null.  If
    // a function is found, it is bound appropriately.
    //
    // NOTE: This function must not establish any reactive
    // dependencies itself.  If there is any reactivity in the
    // value, lookup should return a function.
    Blaze.View.prototype.lookup = function (name, _options) {
      var template = this.template;
      var lookupTemplate = _options && _options.template;
      var helper;
      var binding;
      var boundTmplInstance;
      var foundTemplate;

      if (this.templateInstance) {
        boundTmplInstance = Blaze._bind(this.templateInstance, this);
      }

      // 0. looking up the parent data context with the special "../" syntax
      if (/^\./.test(name)) {
        // starts with a dot. must be a series of dots which maps to an
        // ancestor of the appropriate height.
        if (!/^(\.)+$/.test(name)) throw new Error("id starting with dot must be a series of dots");

        return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);
      }

      // 1. look up a helper on the current template
      if (template && (helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null) {
        return helper;
      }

      // 2. look up a binding by traversing the lexical view hierarchy inside the
      // current template
      if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {
        return binding;
      }

      // 3. look up a template by name
      if (lookupTemplate && (foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null) {
        return foundTemplate;
      }

      // 4. look up a global helper
      if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {
        return helper;
      }

      // 5. look up in a data context
      return function () {
        var isCalledAsFunction = arguments.length > 0;
        var data = Blaze.getData();
        var x = data && data[name];
        if (!x) {
          if (lookupTemplate) {
            throw new Error("No such template: " + name);
          } else if (isCalledAsFunction) {
            throw new Error("No such function: " + name);
          } else if (name.charAt(0) === '@' && (x === null || x === undefined)) {
            // Throw an error if the user tries to use a `@directive`
            // that doesn't exist.  We don't implement all directives
            // from Handlebars, so there's a potential for confusion
            // if we fail silently.  On the other hand, we want to
            // throw late in case some app or package wants to provide
            // a missing directive.
            throw new Error("Unsupported directive: " + name);
          }
        }
        if (!data) {
          return null;
        }
        if (typeof x !== 'function') {
          if (isCalledAsFunction) {
            throw new Error("Can't call non-function: " + x);
          }
          return x;
        }
        return x.apply(data, arguments);
      };
    };

    // Implement Spacebars' {{../..}}.
    // @param height {Number} The number of '..'s
    Blaze._parentData = function (height, _functionWrapped) {
      // If height is null or undefined, we default to 1, the first parent.
      if (height == null) {
        height = 1;
      }
      var theWith = Blaze.getView('with');
      for (var i = 0; i < height && theWith; i++) {
        theWith = Blaze.getView(theWith, 'with');
      }

      if (!theWith) return null;
      if (_functionWrapped) return function () {
        return theWith.dataVar.get();
      };
      return theWith.dataVar.get();
    };

    Blaze.View.prototype.lookupTemplate = function (name) {
      return this.lookup(name, { template: true });
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/template.js                                                                                          //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // [new] Blaze.Template([viewName], renderFunction)
    //
    // `Blaze.Template` is the class of templates, like `Template.foo` in
    // Meteor, which is `instanceof Template`.
    //
    // `viewKind` is a string that looks like "Template.foo" for templates
    // defined by the compiler.

    /**
     * @class
     * @summary Constructor for a Template, which is used to construct Views with particular name and content.
     * @locus Client
     * @param {String} [viewName] Optional.  A name for Views constructed by this Template.  See [`view.name`](#view_name).
     * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  This function is used as the `renderFunction` for Views constructed by this Template.
     */
    Blaze.Template = function (viewName, renderFunction) {
      if (!(this instanceof Blaze.Template))
        // called without `new`
        return new Blaze.Template(viewName, renderFunction);

      if (typeof viewName === 'function') {
        // omitted "viewName" argument
        renderFunction = viewName;
        viewName = '';
      }
      if (typeof viewName !== 'string') throw new Error("viewName must be a String (or omitted)");
      if (typeof renderFunction !== 'function') throw new Error("renderFunction must be a function");

      this.viewName = viewName;
      this.renderFunction = renderFunction;

      this.__helpers = new HelperMap();
      this.__eventMaps = [];

      this._callbacks = {
        created: [],
        rendered: [],
        destroyed: []
      };
    };
    var Template = Blaze.Template;

    var HelperMap = function () {};
    HelperMap.prototype.get = function (name) {
      return this[' ' + name];
    };
    HelperMap.prototype.set = function (name, helper) {
      this[' ' + name] = helper;
    };
    HelperMap.prototype.has = function (name) {
      return typeof this[' ' + name] !== 'undefined';
    };

    /**
     * @summary Returns true if `value` is a template object like `Template.myTemplate`.
     * @locus Client
     * @param {Any} value The value to test.
     */
    Blaze.isTemplate = function (t) {
      return t instanceof Blaze.Template;
    };

    /**
     * @name  onCreated
     * @instance
     * @memberOf Template
     * @summary Register a function to be called when an instance of this template is created.
     * @param {Function} callback A function to be added as a callback.
     * @locus Client
     * @importFromPackage templating
     */
    Template.prototype.onCreated = function (cb) {
      this._callbacks.created.push(cb);
    };

    /**
     * @name  onRendered
     * @instance
     * @memberOf Template
     * @summary Register a function to be called when an instance of this template is inserted into the DOM.
     * @param {Function} callback A function to be added as a callback.
     * @locus Client
     * @importFromPackage templating
     */
    Template.prototype.onRendered = function (cb) {
      this._callbacks.rendered.push(cb);
    };

    /**
     * @name  onDestroyed
     * @instance
     * @memberOf Template
     * @summary Register a function to be called when an instance of this template is removed from the DOM and destroyed.
     * @param {Function} callback A function to be added as a callback.
     * @locus Client
     * @importFromPackage templating
     */
    Template.prototype.onDestroyed = function (cb) {
      this._callbacks.destroyed.push(cb);
    };

    Template.prototype._getCallbacks = function (which) {
      var self = this;
      var callbacks = self[which] ? [self[which]] : [];
      // Fire all callbacks added with the new API (Template.onRendered())
      // as well as the old-style callback (e.g. Template.rendered) for
      // backwards-compatibility.
      callbacks = callbacks.concat(self._callbacks[which]);
      return callbacks;
    };

    var fireCallbacks = function (callbacks, template) {
      Template._withTemplateInstanceFunc(function () {
        return template;
      }, function () {
        for (var i = 0, N = callbacks.length; i < N; i++) {
          callbacks[i].call(template);
        }
      });
    };

    Template.prototype.constructView = function (contentFunc, elseFunc) {
      var self = this;
      var view = Blaze.View(self.viewName, self.renderFunction);
      view.template = self;

      view.templateContentBlock = contentFunc ? new Template('(contentBlock)', contentFunc) : null;
      view.templateElseBlock = elseFunc ? new Template('(elseBlock)', elseFunc) : null;

      if (self.__eventMaps || typeof self.events === 'object') {
        view._onViewRendered(function () {
          if (view.renderCount !== 1) return;

          if (!self.__eventMaps.length && typeof self.events === "object") {
            // Provide limited back-compat support for `.events = {...}`
            // syntax.  Pass `template.events` to the original `.events(...)`
            // function.  This code must run only once per template, in
            // order to not bind the handlers more than once, which is
            // ensured by the fact that we only do this when `__eventMaps`
            // is falsy, and we cause it to be set now.
            Template.prototype.events.call(self, self.events);
          }

          _.each(self.__eventMaps, function (m) {
            Blaze._addEventMap(view, m, view);
          });
        });
      }

      view._templateInstance = new Blaze.TemplateInstance(view);
      view.templateInstance = function () {
        // Update data, firstNode, and lastNode, and return the TemplateInstance
        // object.
        var inst = view._templateInstance;

        /**
         * @instance
         * @memberOf Blaze.TemplateInstance
         * @name  data
         * @summary The data context of this instance's latest invocation.
         * @locus Client
         */
        inst.data = Blaze.getData(view);

        if (view._domrange && !view.isDestroyed) {
          inst.firstNode = view._domrange.firstNode();
          inst.lastNode = view._domrange.lastNode();
        } else {
          // on 'created' or 'destroyed' callbacks we don't have a DomRange
          inst.firstNode = null;
          inst.lastNode = null;
        }

        return inst;
      };

      /**
       * @name  created
       * @instance
       * @memberOf Template
       * @summary Provide a callback when an instance of a template is created.
       * @locus Client
       * @deprecated in 1.1
       */
      // To avoid situations when new callbacks are added in between view
      // instantiation and event being fired, decide on all callbacks to fire
      // immediately and then fire them on the event.
      var createdCallbacks = self._getCallbacks('created');
      view.onViewCreated(function () {
        fireCallbacks(createdCallbacks, view.templateInstance());
      });

      /**
       * @name  rendered
       * @instance
       * @memberOf Template
       * @summary Provide a callback when an instance of a template is rendered.
       * @locus Client
       * @deprecated in 1.1
       */
      var renderedCallbacks = self._getCallbacks('rendered');
      view.onViewReady(function () {
        fireCallbacks(renderedCallbacks, view.templateInstance());
      });

      /**
       * @name  destroyed
       * @instance
       * @memberOf Template
       * @summary Provide a callback when an instance of a template is destroyed.
       * @locus Client
       * @deprecated in 1.1
       */
      var destroyedCallbacks = self._getCallbacks('destroyed');
      view.onViewDestroyed(function () {
        fireCallbacks(destroyedCallbacks, view.templateInstance());
      });

      return view;
    };

    /**
     * @class
     * @summary The class for template instances
     * @param {Blaze.View} view
     * @instanceName template
     */
    Blaze.TemplateInstance = function (view) {
      if (!(this instanceof Blaze.TemplateInstance))
        // called without `new`
        return new Blaze.TemplateInstance(view);

      if (!(view instanceof Blaze.View)) throw new Error("View required");

      view._templateInstance = this;

      /**
       * @name view
       * @memberOf Blaze.TemplateInstance
       * @instance
       * @summary The [View](../api/blaze.html#Blaze-View) object for this invocation of the template.
       * @locus Client
       * @type {Blaze.View}
       */
      this.view = view;
      this.data = null;

      /**
       * @name firstNode
       * @memberOf Blaze.TemplateInstance
       * @instance
       * @summary The first top-level DOM node in this template instance.
       * @locus Client
       * @type {DOMNode}
       */
      this.firstNode = null;

      /**
       * @name lastNode
       * @memberOf Blaze.TemplateInstance
       * @instance
       * @summary The last top-level DOM node in this template instance.
       * @locus Client
       * @type {DOMNode}
       */
      this.lastNode = null;

      // This dependency is used to identify state transitions in
      // _subscriptionHandles which could cause the result of
      // TemplateInstance#subscriptionsReady to change. Basically this is triggered
      // whenever a new subscription handle is added or when a subscription handle
      // is removed and they are not ready.
      this._allSubsReadyDep = new Tracker.Dependency();
      this._allSubsReady = false;

      this._subscriptionHandles = {};
    };

    /**
     * @summary Find all elements matching `selector` in this template instance, and return them as a JQuery object.
     * @locus Client
     * @param {String} selector The CSS selector to match, scoped to the template contents.
     * @returns {DOMNode[]}
     */
    Blaze.TemplateInstance.prototype.$ = function (selector) {
      var view = this.view;
      if (!view._domrange) throw new Error("Can't use $ on template instance with no DOM");
      return view._domrange.$(selector);
    };

    /**
     * @summary Find all elements matching `selector` in this template instance.
     * @locus Client
     * @param {String} selector The CSS selector to match, scoped to the template contents.
     * @returns {DOMElement[]}
     */
    Blaze.TemplateInstance.prototype.findAll = function (selector) {
      return Array.prototype.slice.call(this.$(selector));
    };

    /**
     * @summary Find one element matching `selector` in this template instance.
     * @locus Client
     * @param {String} selector The CSS selector to match, scoped to the template contents.
     * @returns {DOMElement}
     */
    Blaze.TemplateInstance.prototype.find = function (selector) {
      var result = this.$(selector);
      return result[0] || null;
    };

    /**
     * @summary A version of [Tracker.autorun](https://docs.meteor.com/api/tracker.html#Tracker-autorun) that is stopped when the template is destroyed.
     * @locus Client
     * @param {Function} runFunc The function to run. It receives one argument: a Tracker.Computation object.
     */
    Blaze.TemplateInstance.prototype.autorun = function (f) {
      return this.view.autorun(f);
    };

    /**
     * @summary A version of [Meteor.subscribe](https://docs.meteor.com/api/pubsub.html#Meteor-subscribe) that is stopped
     * when the template is destroyed.
     * @return {SubscriptionHandle} The subscription handle to the newly made
     * subscription. Call `handle.stop()` to manually stop the subscription, or
     * `handle.ready()` to find out if this particular subscription has loaded all
     * of its inital data.
     * @locus Client
     * @param {String} name Name of the subscription.  Matches the name of the
     * server's `publish()` call.
     * @param {Any} [arg1,arg2...] Optional arguments passed to publisher function
     * on server.
     * @param {Function|Object} [options] If a function is passed instead of an
     * object, it is interpreted as an `onReady` callback.
     * @param {Function} [options.onReady] Passed to [`Meteor.subscribe`](https://docs.meteor.com/api/pubsub.html#Meteor-subscribe).
     * @param {Function} [options.onStop] Passed to [`Meteor.subscribe`](https://docs.meteor.com/api/pubsub.html#Meteor-subscribe).
     * @param {DDP.Connection} [options.connection] The connection on which to make the
     * subscription.
     */
    Blaze.TemplateInstance.prototype.subscribe = function () /* arguments */{
      var self = this;

      var subHandles = self._subscriptionHandles;
      var args = _.toArray(arguments);

      // Duplicate logic from Meteor.subscribe
      var options = {};
      if (args.length) {
        var lastParam = _.last(args);

        // Match pattern to check if the last arg is an options argument
        var lastParamOptionsPattern = {
          onReady: Match.Optional(Function),
          // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use
          // onStop with an error callback instead.
          onError: Match.Optional(Function),
          onStop: Match.Optional(Function),
          connection: Match.Optional(Match.Any)
        };

        if (_.isFunction(lastParam)) {
          options.onReady = args.pop();
        } else if (lastParam && !_.isEmpty(lastParam) && Match.test(lastParam, lastParamOptionsPattern)) {
          options = args.pop();
        }
      }

      var subHandle;
      var oldStopped = options.onStop;
      options.onStop = function (error) {
        // When the subscription is stopped, remove it from the set of tracked
        // subscriptions to avoid this list growing without bound
        delete subHandles[subHandle.subscriptionId];

        // Removing a subscription can only change the result of subscriptionsReady
        // if we are not ready (that subscription could be the one blocking us being
        // ready).
        if (!self._allSubsReady) {
          self._allSubsReadyDep.changed();
        }

        if (oldStopped) {
          oldStopped(error);
        }
      };

      var connection = options.connection;
      var callbacks = _.pick(options, ["onReady", "onError", "onStop"]);

      // The callbacks are passed as the last item in the arguments array passed to
      // View#subscribe
      args.push(callbacks);

      // View#subscribe takes the connection as one of the options in the last
      // argument
      subHandle = self.view.subscribe.call(self.view, args, {
        connection: connection
      });

      if (!_.has(subHandles, subHandle.subscriptionId)) {
        subHandles[subHandle.subscriptionId] = subHandle;

        // Adding a new subscription will always cause us to transition from ready
        // to not ready, but if we are already not ready then this can't make us
        // ready.
        if (self._allSubsReady) {
          self._allSubsReadyDep.changed();
        }
      }

      return subHandle;
    };

    /**
     * @summary A reactive function that returns true when all of the subscriptions
     * called with [this.subscribe](#TemplateInstance-subscribe) are ready.
     * @return {Boolean} True if all subscriptions on this template instance are
     * ready.
     */
    Blaze.TemplateInstance.prototype.subscriptionsReady = function () {
      this._allSubsReadyDep.depend();

      this._allSubsReady = _.all(this._subscriptionHandles, function (handle) {
        return handle.ready();
      });

      return this._allSubsReady;
    };

    /**
     * @summary Specify template helpers available to this template.
     * @locus Client
     * @param {Object} helpers Dictionary of helper functions by name.
     * @importFromPackage templating
     */
    Template.prototype.helpers = function (dict) {
      if (!_.isObject(dict)) {
        throw new Error("Helpers dictionary has to be an object");
      }

      for (var k in dict) this.__helpers.set(k, dict[k]);
    };

    var canUseGetters = function () {
      if (Object.defineProperty) {
        var obj = {};
        try {
          Object.defineProperty(obj, "self", {
            get: function () {
              return obj;
            }
          });
        } catch (e) {
          return false;
        }
        return obj.self === obj;
      }
      return false;
    }();

    if (canUseGetters) {
      // Like Blaze.currentView but for the template instance. A function
      // rather than a value so that not all helpers are implicitly dependent
      // on the current template instance's `data` property, which would make
      // them dependent on the data context of the template inclusion.
      var currentTemplateInstanceFunc = null;

      // If getters are supported, define this property with a getter function
      // to make it effectively read-only, and to work around this bizarre JSC
      // bug: https://github.com/meteor/meteor/issues/9926
      Object.defineProperty(Template, "_currentTemplateInstanceFunc", {
        get: function () {
          return currentTemplateInstanceFunc;
        }
      });

      Template._withTemplateInstanceFunc = function (templateInstanceFunc, func) {
        if (typeof func !== 'function') {
          throw new Error("Expected function, got: " + func);
        }
        var oldTmplInstanceFunc = currentTemplateInstanceFunc;
        try {
          currentTemplateInstanceFunc = templateInstanceFunc;
          return func();
        } finally {
          currentTemplateInstanceFunc = oldTmplInstanceFunc;
        }
      };
    } else {
      // If getters are not supported, just use a normal property.
      Template._currentTemplateInstanceFunc = null;

      Template._withTemplateInstanceFunc = function (templateInstanceFunc, func) {
        if (typeof func !== 'function') {
          throw new Error("Expected function, got: " + func);
        }
        var oldTmplInstanceFunc = Template._currentTemplateInstanceFunc;
        try {
          Template._currentTemplateInstanceFunc = templateInstanceFunc;
          return func();
        } finally {
          Template._currentTemplateInstanceFunc = oldTmplInstanceFunc;
        }
      };
    }

    /**
     * @summary Specify event handlers for this template.
     * @locus Client
     * @param {EventMap} eventMap Event handlers to associate with this template.
     * @importFromPackage templating
     */
    Template.prototype.events = function (eventMap) {
      if (!_.isObject(eventMap)) {
        throw new Error("Event map has to be an object");
      }

      var template = this;
      var eventMap2 = {};
      for (var k in eventMap) {
        eventMap2[k] = function (k, v) {
          return function (event /*, ...*/) {
            var view = this; // passed by EventAugmenter
            var data = Blaze.getData(event.currentTarget);
            if (data == null) data = {};
            var args = Array.prototype.slice.call(arguments);
            var tmplInstanceFunc = Blaze._bind(view.templateInstance, view);
            args.splice(1, 0, tmplInstanceFunc());

            return Template._withTemplateInstanceFunc(tmplInstanceFunc, function () {
              return v.apply(data, args);
            });
          };
        }(k, eventMap[k]);
      }

      template.__eventMaps.push(eventMap2);
    };

    /**
     * @function
     * @name instance
     * @memberOf Template
     * @summary The [template instance](#Template-instances) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
     * @locus Client
     * @returns {Blaze.TemplateInstance}
     * @importFromPackage templating
     */
    Template.instance = function () {
      return Template._currentTemplateInstanceFunc && Template._currentTemplateInstanceFunc();
    };

    // Note: Template.currentData() is documented to take zero arguments,
    // while Blaze.getData takes up to one.

    /**
     * @summary
     *
     * - Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns
     * the data context of the template.
     * - Inside an event handler, returns the data context of the template on which
     * this event handler was defined.
     * - Inside a helper, returns the data context of the DOM node where the helper
     * was used.
     *
     * Establishes a reactive dependency on the result.
     * @locus Client
     * @function
     * @importFromPackage templating
     */
    Template.currentData = Blaze.getData;

    /**
     * @summary Accesses other data contexts that enclose the current data context.
     * @locus Client
     * @function
     * @param {Integer} [numLevels] The number of levels beyond the current data context to look. Defaults to 1.
     * @importFromPackage templating
     */
    Template.parentData = Blaze._parentData;

    /**
     * @summary Defines a [helper function](#Template-helpers) which can be used from all templates.
     * @locus Client
     * @function
     * @param {String} name The name of the helper function you are defining.
     * @param {Function} function The helper function itself.
     * @importFromPackage templating
     */
    Template.registerHelper = Blaze.registerHelper;

    /**
     * @summary Removes a global [helper function](#Template-helpers).
     * @locus Client
     * @function
     * @param {String} name The name of the helper function you are defining.
     * @importFromPackage templating
     */
    Template.deregisterHelper = Blaze.deregisterHelper;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                                     //
    // packages/blaze/backcompat.js                                                                                        //
    //                                                                                                                     //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    UI = Blaze;

    Blaze.ReactiveVar = ReactiveVar;
    UI._templateInstance = Blaze.Template.instance;

    Handlebars = {};
    Handlebars.registerHelper = Blaze.registerHelper;

    Handlebars._escape = Blaze._escape;

    // Return these from {{...}} helpers to achieve the same as returning
    // strings from {{{...}}} helpers
    Handlebars.SafeString = function (string) {
      this.string = string;
    };
    Handlebars.SafeString.prototype.toString = function () {
      return this.string.toString();
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("blaze", {
    Blaze: Blaze,
    UI: UI,
    Handlebars: Handlebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Random = Package.random.Random;
  var Hook = Package['callback-hook'].Hook;
  var ReactiveVar = Package['reactive-var'].ReactiveVar;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Accounts, options, tokenExpires;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "accounts-base": { "client_main.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/client_main.js                                                                              //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Accounts: () => Accounts,
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest,
              default: () => _exports
            });
            let AccountsClient, AccountsTest;
            _module.link("./accounts_client.js", {
              AccountsClient(v) {
                AccountsClient = v;
              },

              AccountsTest(v) {
                AccountsTest = v;
              }

            }, 0);

            /**
             * @namespace Accounts
             * @summary The namespace for all client-side accounts-related methods.
             */
            _module.runSetters(Accounts = new AccountsClient());
            /**
             * @summary A [Mongo.Collection](#collections) containing user documents.
             * @locus Anywhere
             * @type {Mongo.Collection}
             * @importFromPackage meteor
             */

            Meteor.users = Accounts.users;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_client.js": function (_require3, _exports3, _module2) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_client.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = _require3("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(_require3("@babel/runtime/helpers/objectSpread"));

            _module2.export({
              AccountsClient: () => AccountsClient,
              AccountsTest: () => AccountsTest
            });
            let AccountsCommon;
            _module2.link("./accounts_common.js", {
              AccountsCommon(v) {
                AccountsCommon = v;
              }

            }, 0);

            class AccountsClient extends AccountsCommon {
              constructor(options) {
                super(options);
                this._loggingIn = new ReactiveVar(false);
                this._loggingOut = new ReactiveVar(false);
                this._loginServicesHandle = this.connection.subscribe("meteor.loginServiceConfiguration");
                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = null;
                this.savedHash = window.location.hash;

                this._initUrlMatching(); // Defined in localstorage_token.js.


                this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.


                this._loginFuncs = {};
              } ///
              /// CURRENT USER
              ///
              // @override


              userId() {
                return this.connection.userId();
              } // This is mostly just called within this file, but Meteor.loginWithPassword
              // also uses it to make loggingIn() be true during the beginPasswordExchange
              // method call too.


              _setLoggingIn(x) {
                this._loggingIn.set(x);
              }
              /**
               * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingIn() {
                return this._loggingIn.get();
              }
              /**
               * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.
               * @locus Client
               */

              loggingOut() {
                return this._loggingOut.get();
              }
              /**
               * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using
               `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.
               * @locus Client
               * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.
               Should be the OAuth provider name accordingly.
               * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.
               */

              registerClientLoginFunction(funcName, func) {
                if (this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " has been defined already"));
                }

                this._loginFuncs[funcName] = func;
              }
              /**
               * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining
               arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains
               all arguments for the login function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               */

              callLoginFunction(funcName) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  funcArgs[_key - 1] = arguments[_key];
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login
               function.
               * @locus Client
               * @param {String} funcName The name of the login function you wanted to call.
               * @param {Array} funcArgs The `arguments` for the login function.
               */

              applyLoginFunction(funcName, funcArgs) {
                if (!this._loginFuncs[funcName]) {
                  throw new Error("".concat(funcName, " was not defined"));
                }

                return this._loginFuncs[funcName].apply(this, funcArgs);
              }
              /**
               * @summary Log the user out.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logout(callback) {
                this._loggingOut.set(true);

                this.connection.apply('logout', [], {
                  wait: true
                }, (error, result) => {
                  this._loggingOut.set(false);

                  if (error) {
                    callback && callback(error);
                  } else {
                    this.makeClientLoggedOut();
                    callback && callback();
                  }
                });
              }
              /**
               * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
               * @locus Client
               * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
               */

              logoutOtherClients(callback) {
                // We need to make two method calls: one to replace our current token,
                // and another to remove all tokens except the current one. We want to
                // call these two methods one after the other, without any other
                // methods running between them. For example, we don't want `logout`
                // to be called in between our two method calls (otherwise the second
                // method call would return an error). Another example: we don't want
                // logout to be called before the callback for `getNewToken`;
                // otherwise we would momentarily log the user out and then write a
                // new token to localStorage.
                //
                // To accomplish this, we make both calls as wait methods, and queue
                // them one after the other, without spinning off the event loop in
                // between. Even though we queue `removeOtherTokens` before
                // `getNewToken`, we won't actually send the `removeOtherTokens` call
                // until the `getNewToken` callback has finished running, because they
                // are both wait methods.
                this.connection.apply('getNewToken', [], {
                  wait: true
                }, (err, result) => {
                  if (!err) {
                    this._storeLoginToken(this.userId(), result.token, result.tokenExpires);
                  }
                });
                this.connection.apply('removeOtherTokens', [], {
                  wait: true
                }, err => callback && callback(err));
              } ///
              /// LOGIN METHODS
              ///
              // Call a login method on the server.
              //
              // A login method is a method which on success calls `this.setUserId(id)` and
              // `Accounts._setLoginToken` on the server and returns an object with fields
              // 'id' (containing the user id), 'token' (containing a resume token), and
              // optionally `tokenExpires`.
              //
              // This function takes care of:
              //   - Updating the Meteor.loggingIn() reactive data source
              //   - Calling the method in 'wait' mode
              //   - On success, saving the resume token to localStorage
              //   - On success, calling Accounts.connection.setUserId()
              //   - Setting up an onReconnect handler which logs in with
              //     the resume token
              //
              // Options:
              // - methodName: The method to call (default 'login')
              // - methodArguments: The arguments for the method
              // - validateResult: If provided, will be called with the result of the
              //                 method. If it throws, the client will not be logged in (and
              //                 its error will be passed to the callback).
              // - userCallback: Will be called with no arguments once the user is fully
              //                 logged in, or with the error on error.
              //


              callLoginMethod(options) {
                options = (0, _objectSpread2.default)({
                  methodName: 'login',
                  methodArguments: [{}],
                  _suppressLoggingIn: false
                }, options); // Set defaults for callback arguments to no-op functions; make sure we
                // override falsey values too.

                ['validateResult', 'userCallback'].forEach(f => {
                  if (!options[f]) options[f] = () => null;
                }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.

                let called;

                const loginCallbacks = _ref => {
                  let {
                    error,
                    loginDetails
                  } = _ref;

                  if (!called) {
                    called = true;

                    if (!error) {
                      this._onLoginHook.each(callback => {
                        callback(loginDetails);
                        return true;
                      });
                    } else {
                      this._onLoginFailureHook.each(callback => {
                        callback({
                          error
                        });
                        return true;
                      });
                    }

                    options.userCallback(error, loginDetails);
                  }
                };

                let reconnected = false; // We want to set up onReconnect as soon as we get a result token back from
                // the server, without having to wait for subscriptions to rerun. This is
                // because if we disconnect and reconnect between getting the result and
                // getting the results of subscription rerun, we WILL NOT re-send this
                // method (because we never re-send methods whose results we've received)
                // but we WILL call loggedInAndDataReadyCallback at "reconnect quiesce"
                // time. This will lead to makeClientLoggedIn(result.id) even though we
                // haven't actually sent a login method!
                //
                // But by making sure that we send this "resume" login in that case (and
                // calling makeClientLoggedOut if it fails), we'll end up with an accurate
                // client-side userId. (It's important that livedata_connection guarantees
                // that the "reconnect quiesce"-time call to loggedInAndDataReadyCallback
                // will occur before the callback from the resume login call.)

                const onResultReceived = (err, result) => {
                  if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was
                    // already logged in they will still get logged in on reconnect.
                    // See issue #4970.
                  } else {
                    // First clear out any previously set Acccounts login onReconnect
                    // callback (to make sure we don't keep piling up duplicate callbacks,
                    // which would then all be triggered when reconnecting).
                    if (this._reconnectStopper) {
                      this._reconnectStopper.stop();
                    }

                    this._reconnectStopper = DDP.onReconnect(conn => {
                      if (conn != this.connection) {
                        return;
                      }

                      reconnected = true; // If our token was updated in storage, use the latest one.

                      const storedToken = this._storedLoginToken();

                      if (storedToken) {
                        result = {
                          token: storedToken,
                          tokenExpires: this._storedLoginTokenExpires()
                        };
                      }

                      if (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());

                      if (this._tokenExpiresSoon(result.tokenExpires)) {
                        this.makeClientLoggedOut();
                      } else {
                        this.callLoginMethod({
                          methodArguments: [{
                            resume: result.token
                          }],
                          // Reconnect quiescence ensures that the user doesn't see an
                          // intermediate state before the login method finishes. So we don't
                          // need to show a logging-in animation.
                          _suppressLoggingIn: true,
                          userCallback: (error, loginDetails) => {
                            const storedTokenNow = this._storedLoginToken();

                            if (error) {
                              // If we had a login error AND the current stored token is the
                              // one that we tried to log in with, then declare ourselves
                              // logged out. If there's a token in storage but it's not the
                              // token that we tried to log in with, we don't know anything
                              // about whether that token is valid or not, so do nothing. The
                              // periodic localStorage poll will decide if we are logged in or
                              // out with this token, if it hasn't already. Of course, even
                              // with this check, another tab could insert a new valid token
                              // immediately before we clear localStorage here, which would
                              // lead to both tabs being logged out, but by checking the token
                              // in storage right now we hope to make that unlikely to happen.
                              //
                              // If there is no token in storage right now, we don't have to
                              // do anything; whatever code removed the token from storage was
                              // responsible for calling `makeClientLoggedOut()`, or the
                              // periodic localStorage poll will call `makeClientLoggedOut`
                              // eventually if another tab wiped the token from storage.
                              if (storedTokenNow && storedTokenNow === result.token) {
                                this.makeClientLoggedOut();
                              }
                            } // Possibly a weird callback to call, but better than nothing if
                            // there is a reconnect between "login result received" and "data
                            // ready".


                            loginCallbacks({
                              error,
                              loginDetails
                            });
                          }
                        });
                      }
                    });
                  }
                }; // This callback is called once the local cache of the current-user
                // subscription (and all subscriptions, in fact) are guaranteed to be up to
                // date.


                const loggedInAndDataReadyCallback = (error, result) => {
                  // If the login method returns its result but the connection is lost
                  // before the data is in the local cache, it'll set an onReconnect (see
                  // above). The onReconnect will try to log in using the token, and *it*
                  // will call userCallback via its own version of this
                  // loggedInAndDataReadyCallback. So we don't have to do anything here.
                  if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,
                  // because it could be matching a _setLoggingIn(true) from a
                  // half-completed pre-reconnect login method.

                  this._setLoggingIn(false);

                  if (error || !result) {
                    error = error || new Error("No result from call to ".concat(options.methodName));
                    loginCallbacks({
                      error
                    });
                    return;
                  }

                  try {
                    options.validateResult(result);
                  } catch (e) {
                    loginCallbacks({
                      error: e
                    });
                    return;
                  } // Make the client logged in. (The user data should already be loaded!)


                  this.makeClientLoggedIn(result.id, result.token, result.tokenExpires);
                  loginCallbacks({
                    loginDetails: {
                      type: result.type
                    }
                  });
                };

                if (!options._suppressLoggingIn) {
                  this._setLoggingIn(true);
                }

                this.connection.apply(options.methodName, options.methodArguments, {
                  wait: true,
                  onResultReceived: onResultReceived
                }, loggedInAndDataReadyCallback);
              }

              makeClientLoggedOut() {
                // Ensure client was successfully logged in before running logout hooks.
                if (this.connection._userId) {
                  this._onLogoutHook.each(callback => {
                    callback();
                    return true;
                  });
                }

                this._unstoreLoginToken();

                this.connection.setUserId(null);
                this._reconnectStopper && this._reconnectStopper.stop();
              }

              makeClientLoggedIn(userId, token, tokenExpires) {
                this._storeLoginToken(userId, token, tokenExpires);

                this.connection.setUserId(userId);
              } ///
              /// LOGIN SERVICES
              ///
              // A reactive function returning whether the loginServiceConfiguration
              // subscription is ready. Used by accounts-ui to hide the login button
              // until we have all the configuration loaded
              //


              loginServicesConfigured() {
                return this._loginServicesHandle.ready();
              }

              // Some login services such as the redirect login flow or the resume
              // login handler can log the user in at page load time.  The
              // Meteor.loginWithX functions have a callback argument, but the
              // callback function instance won't be in memory any longer if the
              // page was reloaded.  The `onPageLoadLogin` function allows a
              // callback to be registered for the case where the login was
              // initiated in a previous VM, and we now have the result of the login
              // attempt in a new VM.
              // Register a callback to be called if we have information about a
              // login attempt at page load time.  Call the callback immediately if
              // we already have the page load login attempt info, otherwise stash
              // the callback to be called if and when we do get the attempt info.
              //
              onPageLoadLogin(f) {
                if (this._pageLoadLoginAttemptInfo) {
                  f(this._pageLoadLoginAttemptInfo);
                } else {
                  this._pageLoadLoginCallbacks.push(f);
                }
              }

              // Receive the information about the login attempt at page load time.
              // Call registered callbacks, and also record the info in case
              // someone's callback hasn't been registered yet.
              //
              _pageLoadLogin(attemptInfo) {
                if (this._pageLoadLoginAttemptInfo) {
                  Meteor._debug('Ignoring unexpected duplicate page load login attempt info');

                  return;
                }

                this._pageLoadLoginCallbacks.forEach(callback => callback(attemptInfo));

                this._pageLoadLoginCallbacks = [];
                this._pageLoadLoginAttemptInfo = attemptInfo;
              }

              ///
              /// LOGIN TOKENS
              ///
              // These methods deal with storing a login token and user id in the
              // browser's localStorage facility. It polls local storage every few
              // seconds to synchronize login state between multiple tabs in the same
              // browser.
              loginWithToken(token, callback) {
                this.callLoginMethod({
                  methodArguments: [{
                    resume: token
                  }],
                  userCallback: callback
                });
              }

              // Semi-internal API. Call this function to re-enable auto login after
              // if it was disabled at startup.
              _enableAutoLogin() {
                this._autoLoginEnabled = true;

                this._pollStoredLoginToken();
              }

              ///
              /// STORING
              ///
              // Call this from the top level of the test file for any test that does
              // logging in and out, to protect multiple tabs running the same tests
              // simultaneously from interfering with each others' localStorage.
              _isolateLoginTokenForTest() {
                this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();
                this.USER_ID_KEY = this.USER_ID_KEY + Random.id();
              }

              _storeLoginToken(userId, token, tokenExpires) {
                Meteor._localStorage.setItem(this.USER_ID_KEY, userId);

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);

                if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());

                Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = token;
              }

              _unstoreLoginToken() {
                Meteor._localStorage.removeItem(this.USER_ID_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);

                Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to
                // connect a second time


                this._lastLoginTokenWhenPolled = null;
              }

              // This is private, but it is exported for now because it is used by a
              // test in accounts-password.
              _storedLoginToken() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);
              }

              _storedLoginTokenExpires() {
                return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);
              }

              _storedUserId() {
                return Meteor._localStorage.getItem(this.USER_ID_KEY);
              }

              _unstoreLoginTokenIfExpiresSoon() {
                const tokenExpires = this._storedLoginTokenExpires();

                if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {
                  this._unstoreLoginToken();
                }
              }

              ///
              /// AUTO-LOGIN
              ///
              _initLocalStorage() {
                // Key names to use in localStorage
                this.LOGIN_TOKEN_KEY = "Meteor.loginToken";
                this.LOGIN_TOKEN_EXPIRES_KEY = "Meteor.loginTokenExpires";
                this.USER_ID_KEY = "Meteor.userId";
                const rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;

                if (rootUrlPathPrefix || this.connection !== Meteor.connection) {
                  // We want to keep using the same keys for existing apps that do not
                  // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have
                  // to log in again after an app updates to a version of Meteor that
                  // contains this code, but it's generally preferable to namespace the
                  // keys so that connections from distinct apps to distinct DDP URLs
                  // will be distinct in Meteor._localStorage.
                  let namespace = ":".concat(this.connection._stream.rawUrl);

                  if (rootUrlPathPrefix) {
                    namespace += ":".concat(rootUrlPathPrefix);
                  }

                  this.LOGIN_TOKEN_KEY += namespace;
                  this.LOGIN_TOKEN_EXPIRES_KEY += namespace;
                  this.USER_ID_KEY += namespace;
                }

                let token;

                if (this._autoLoginEnabled) {
                  // Immediately try to log in via local storage, so that any DDP
                  // messages are sent after we have established our user account
                  this._unstoreLoginTokenIfExpiresSoon();

                  token = this._storedLoginToken();

                  if (token) {
                    // On startup, optimistically present us as logged in while the
                    // request is in flight. This reduces page flicker on startup.
                    const userId = this._storedUserId();

                    userId && this.connection.setUserId(userId);
                    this.loginWithToken(token, err => {
                      if (err) {
                        Meteor._debug("Error logging in with token: ".concat(err));

                        this.makeClientLoggedOut();
                      }

                      this._pageLoadLogin({
                        type: "resume",
                        allowed: !err,
                        error: err,
                        methodName: "login",
                        // XXX This is duplicate code with loginWithToken, but
                        // loginWithToken can also be called at other times besides
                        // page load.
                        methodArguments: [{
                          resume: token
                        }]
                      });
                    });
                  }
                } // Poll local storage every 3 seconds to login if someone logged in in
                // another tab


                this._lastLoginTokenWhenPolled = token;

                if (this._pollIntervalTimer) {
                  // Unlikely that _initLocalStorage will be called more than once for
                  // the same AccountsClient instance, but just in case...
                  clearInterval(this._pollIntervalTimer);
                }

                this._pollIntervalTimer = setInterval(() => {
                  this._pollStoredLoginToken();
                }, 3000);
              }

              _pollStoredLoginToken() {
                if (!this._autoLoginEnabled) {
                  return;
                }

                const currentLoginToken = this._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same


                if (this._lastLoginTokenWhenPolled != currentLoginToken) {
                  if (currentLoginToken) {
                    this.loginWithToken(currentLoginToken, err => {
                      if (err) {
                        this.makeClientLoggedOut();
                      }
                    });
                  } else {
                    this.logout();
                  }
                }

                this._lastLoginTokenWhenPolled = currentLoginToken;
              }

              ///
              /// URLS
              ///
              _initUrlMatching() {
                // By default, allow the autologin process to happen.
                this._autoLoginEnabled = true; // We only support one callback per URL.

                this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.

                this._attemptToMatchHash();
              }

              // Separate out this functionality for testing
              _attemptToMatchHash() {
                attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);
              }

              /**
               * @summary Register a function to call when a reset password link is clicked
               * in an email sent by
               * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onResetPasswordLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword).
               * 2. `done`: A function to call when the password reset UI flow is complete. The normal
               * login process is suspended until this function is called, so that the
               * password for user A can be reset even if user B was logged in.
               * @locus Client
               */
              onResetPasswordLink(callback) {
                if (this._accountsCallbacks["reset-password"]) {
                  Meteor._debug("Accounts.onResetPasswordLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["reset-password"] = callback;
              }

              /**
               * @summary Register a function to call when an email verification link is
               * clicked in an email sent by
               * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEmailVerificationLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: An email verification token that can be passed to
               * [`Accounts.verifyEmail`](#accounts_verifyemail).
               * 2. `done`: A function to call when the email verification UI flow is complete.
               * The normal login process is suspended until this function is called, so
               * that the user can be notified that they are verifying their email before
               * being logged in.
               * @locus Client
               */
              onEmailVerificationLink(callback) {
                if (this._accountsCallbacks["verify-email"]) {
                  Meteor._debug("Accounts.onEmailVerificationLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["verify-email"] = callback;
              }

              /**
               * @summary Register a function to call when an account enrollment link is
               * clicked in an email sent by
               * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).
               * This function should be called in top-level code, not inside
               * `Meteor.startup()`.
               * @memberof! Accounts
               * @name onEnrollmentLink
               * @param  {Function} callback The function to call. It is given two arguments:
               *
               * 1. `token`: A password reset token that can be passed to
               * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly
               * enrolled account a password.
               * 2. `done`: A function to call when the enrollment UI flow is complete.
               * The normal login process is suspended until this function is called, so that
               * user A can be enrolled even if user B was logged in.
               * @locus Client
               */
              onEnrollmentLink(callback) {
                if (this._accountsCallbacks["enroll-account"]) {
                  Meteor._debug("Accounts.onEnrollmentLink was called more than once. " + "Only one callback added will be executed.");
                }

                this._accountsCallbacks["enroll-account"] = callback;
              }

            }

            ;
            /**
             * @summary True if a login method (such as `Meteor.loginWithPassword`, 
             * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingIn = () => Accounts.loggingIn();
            /**
             * @summary True if a logout method (such as `Meteor.logout`) is currently in 
             * progress. A reactive data source.
             * @locus Client
             * @importFromPackage meteor
             */

            Meteor.loggingOut = () => Accounts.loggingOut();
            /**
             * @summary Log the user out.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logout = callback => Accounts.logout(callback);
            /**
             * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.
             * @locus Client
             * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.
             * @importFromPackage meteor
             */

            Meteor.logoutOtherClients = callback => Accounts.logoutOtherClients(callback);
            /**
             * @summary Login with a Meteor access token.
             * @locus Client
             * @param {Object} [token] Local storage token for use with login across 
             * multiple tabs in the same browser.
             * @param {Function} [callback] Optional callback. Called with no arguments on
             * success.
             * @importFromPackage meteor
             */

            Meteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback); ///
            /// HANDLEBARS HELPERS
            ///
            // If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}
            // global helpers.


            if (Package.blaze) {
              const {
                Template
              } = Package.blaze.Blaze;
              /**
               * @global
               * @name  currentUser
               * @isHelper true
               * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.
               */

              Template.registerHelper('currentUser', () => Meteor.user());
              /**
               * @global
               * @name  loggingIn
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).
               */

              Template.registerHelper('loggingIn', () => Meteor.loggingIn());
              /**
               * @global
               * @name  loggingOut
               * @isHelper true
               * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingOut', () => Meteor.loggingOut());
              /**
               * @global
               * @name  loggingInOrOut
               * @isHelper true
               * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).
               */

              Template.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());
            }

            const defaultSuccessHandler = function (token, urlPart) {
              // put login in a suspended state to wait for the interaction to finish
              this._autoLoginEnabled = false; // wait for other packages to register callbacks

              Meteor.startup(() => {
                // if a callback has been registered for this kind of token, call it
                if (this._accountsCallbacks[urlPart]) {
                  this._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());
                }
              });
            }; // Note that both arguments are optional and are currently only passed by
            // accounts_url_tests.js.


            const attemptToMatchHash = (accounts, hash, success) => {
              // All of the special hash URLs we support for accounts interactions
              ["reset-password", "verify-email", "enroll-account"].forEach(urlPart => {
                let token;
                const tokenRegex = new RegExp("^\\#\\/".concat(urlPart, "\\/(.*)$"));
                const match = hash.match(tokenRegex);

                if (match) {
                  token = match[1]; // XXX COMPAT WITH 0.9.3

                  if (urlPart === "reset-password") {
                    accounts._resetPasswordToken = token;
                  } else if (urlPart === "verify-email") {
                    accounts._verifyEmailToken = token;
                  } else if (urlPart === "enroll-account") {
                    accounts._enrollAccountToken = token;
                  }
                } else {
                  return;
                } // If no handlers match the hash, then maybe it's meant to be consumed
                // by some entirely different code, so we only clear it the first time
                // a handler successfully matches. Note that later handlers reuse the
                // savedHash, so clearing window.location.hash here will not interfere
                // with their needs.


                window.location.hash = ""; // Do some stuff with the token we matched

                success.call(accounts, token, urlPart);
              });
            }; // Export for testing


            const AccountsTest = {
              attemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success)
            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          }, "accounts_common.js": function (_require4, _exports4, _module3) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/accounts-base/accounts_common.js                                                                          //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            var _interopRequireDefault = _require4("@babel/runtime/helpers/interopRequireDefault");

            var _objectSpread2 = _interopRequireDefault(_require4("@babel/runtime/helpers/objectSpread"));

            _module3.export({
              AccountsCommon: () => AccountsCommon,
              EXPIRE_TOKENS_INTERVAL_MS: () => EXPIRE_TOKENS_INTERVAL_MS,
              CONNECTION_CLOSE_DELAY_MS: () => CONNECTION_CLOSE_DELAY_MS
            });

            class AccountsCommon {
              constructor(options) {
                // Currently this is read directly by packages like accounts-password
                // and accounts-ui-unstyled.
                this._options = {}; // Note that setting this.connection = null causes this.users to be a
                // LocalCollection, which is not what we want.

                this.connection = undefined;

                this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to
                // this collection.


                this.users = new Mongo.Collection("users", {
                  _preventAutopublish: true,
                  connection: this.connection
                }); // Callback exceptions are printed with Meteor._debug and ignored.

                this._onLoginHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogin callback"
                });
                this._onLoginFailureHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLoginFailure callback"
                });
                this._onLogoutHook = new Hook({
                  bindEnvironment: false,
                  debugPrintExceptions: "onLogout callback"
                }); // Expose for testing.

                this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;
                this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // Thrown when the user cancels the login process (eg, closes an oauth
                // popup, declines retina scan, etc)

                const lceName = 'Accounts.LoginCancelledError';
                this.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {
                  this.message = description;
                });
                this.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We
                // should come up with a more generic way to do this (eg, with some sort of
                // symbolic error code rather than a number).

                this.LoginCancelledError.numericError = 0x8acdc2f; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility

                Meteor.startup(() => {
                  const {
                    ServiceConfiguration
                  } = Package['service-configuration'];
                  this.loginServiceConfiguration = ServiceConfiguration.configurations;
                  this.ConfigError = ServiceConfiguration.ConfigError;
                });
              }
              /**
               * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               */

              userId() {
                throw new Error("userId method not implemented");
              }
              /**
               * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
               * @locus Anywhere
               */

              user() {
                const userId = this.userId();
                return userId ? this.users.findOne(userId) : null;
              } // Set up config for the accounts system. Call this on both the client
              // and the server.
              //
              // Note that this method gets overridden on AccountsServer.prototype, but
              // the overriding method calls the overridden method.
              //
              // XXX we should add some enforcement that this is called on both the
              // client and the server. Otherwise, a user can
              // 'forbidClientAccountCreation' only on the client and while it looks
              // like their app is secure, the server will still accept createUser
              // calls. https://github.com/meteor/meteor/issues/828
              //
              // @param options {Object} an object with fields:
              // - sendVerificationEmail {Boolean}
              //     Send email address verification emails to new users created from
              //     client signups.
              // - forbidClientAccountCreation {Boolean}
              //     Do not allow clients to create accounts directly.
              // - restrictCreationByEmailDomain {Function or String}
              //     Require created users to have an email matching the function or
              //     having the string as domain.
              // - loginExpirationInDays {Number}
              //     Number of days since login until a user is logged out (login token
              //     expires).
              // - passwordResetTokenExpirationInDays {Number}
              //     Number of days since password reset token creation until the
              //     token cannt be used any longer (password reset token expires).
              // - ambiguousErrorMessages {Boolean}
              //     Return ambiguous error messages from login failures to prevent
              //     user enumeration.
              // - bcryptRounds {Number}
              //     Allows override of number of bcrypt rounds (aka work factor) used
              //     to store passwords.

              /**
               * @summary Set global accounts options.
               * @locus Anywhere
               * @param {Object} options
               * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.
               * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the "Create account" link will not be available.
               * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.
               * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.
               * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.
               * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.
               * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.
               * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.
               */

              config(options) {
                // We don't want users to accidentally only call Accounts.config on the
                // client, where some of the options will have partial effects (eg removing
                // the "create account" button from accounts-ui if forbidClientAccountCreation
                // is set, or redirecting Google login to a specific-domain page) without
                // having their full effects.
                if (Meteor.isServer) {
                  __meteor_runtime_config__.accountsConfigCalled = true;
                } else if (!__meteor_runtime_config__.accountsConfigCalled) {
                  // XXX would be nice to "crash" the client and replace the UI with an error
                  // message, but there's no trivial way to do this.
                  Meteor._debug("Accounts.config was called on the client but not on the " + "server; some configuration options may not take effect.");
                } // We need to validate the oauthSecretKey option at the time
                // Accounts.config is called. We also deliberately don't store the
                // oauthSecretKey in Accounts._options.


                if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {
                  if (Meteor.isClient) {
                    throw new Error("The oauthSecretKey option may only be specified on the server");
                  }

                  if (!Package["oauth-encryption"]) {
                    throw new Error("The oauth-encryption package must be loaded to set oauthSecretKey");
                  }

                  Package["oauth-encryption"].OAuthEncryption.loadKey(options.oauthSecretKey);
                  options = (0, _objectSpread2.default)({}, options);
                  delete options.oauthSecretKey;
                } // validate option keys


                const VALID_KEYS = ["sendVerificationEmail", "forbidClientAccountCreation", "passwordEnrollTokenExpirationInDays", "restrictCreationByEmailDomain", "loginExpirationInDays", "passwordResetTokenExpirationInDays", "ambiguousErrorMessages", "bcryptRounds"];
                Object.keys(options).forEach(key => {
                  if (!VALID_KEYS.includes(key)) {
                    throw new Error("Accounts.config: Invalid key: ".concat(key));
                  }
                }); // set values in Accounts._options

                VALID_KEYS.forEach(key => {
                  if (key in options) {
                    if (key in this._options) {
                      throw new Error("Can't set `".concat(key, "` more than once"));
                    }

                    this._options[key] = options[key];
                  }
                });
              }
              /**
               * @summary Register a callback to be called after a login attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when login is successful.
               *                        The callback receives a single object that
               *                        holds login details. This object contains the login
               *                        result type (password, resume, etc.) on both the
               *                        client and server. `onLogin` callbacks registered
               *                        on the server also receive extra data, such
               *                        as user details, connection information, etc.
               */

              onLogin(func) {
                return this._onLoginHook.register(func);
              }
              /**
               * @summary Register a callback to be called after a login attempt fails.
               * @locus Anywhere
               * @param {Function} func The callback to be called after the login has failed.
               */

              onLoginFailure(func) {
                return this._onLoginFailureHook.register(func);
              }
              /**
               * @summary Register a callback to be called after a logout attempt succeeds.
               * @locus Anywhere
               * @param {Function} func The callback to be called when logout is successful.
               */

              onLogout(func) {
                return this._onLogoutHook.register(func);
              }

              _initConnection(options) {
                if (!Meteor.isClient) {
                  return;
                } // The connection used by the Accounts system. This is the connection
                // that will get logged in by Meteor.login(), and this is the
                // connection whose login state will be reflected by Meteor.userId().
                //
                // It would be much preferable for this to be in accounts_client.js,
                // but it has to be here because it's needed to create the
                // Meteor.users collection.


                if (options.connection) {
                  this.connection = options.connection;
                } else if (options.ddpUrl) {
                  this.connection = DDP.connect(options.ddpUrl);
                } else if (typeof __meteor_runtime_config__ !== "undefined" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {
                  // Temporary, internal hook to allow the server to point the client
                  // to a different authentication server. This is for a very
                  // particular use case that comes up when implementing a oauth
                  // server. Unsupported and may go away at any point in time.
                  //
                  // We will eventually provide a general way to use account-base
                  // against any DDP connection, not just one special one.
                  this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);
                } else {
                  this.connection = Meteor.connection;
                }
              }

              _getTokenLifetimeMs() {
                // When loginExpirationInDays is set to null, we'll use a really high
                // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an
                // unexpiring token.
                const loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;
                return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _getPasswordResetTokenLifetimeMs() {
                return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _getPasswordEnrollTokenLifetimeMs() {
                return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;
              }

              _tokenExpiration(when) {
                // We pass when through the Date constructor for backwards compatibility;
                // `when` used to be a number.
                return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());
              }

              _tokenExpiresSoon(when) {
                let minLifetimeMs = .1 * this._getTokenLifetimeMs();

                const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;

                if (minLifetimeMs > minLifetimeCapMs) {
                  minLifetimeMs = minLifetimeCapMs;
                }

                return new Date() > new Date(when) - minLifetimeMs;
              }

            }

            // Note that Accounts is defined separately in accounts_client.js and
            // accounts_server.js.

            /**
             * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             */
            Meteor.userId = () => Accounts.userId();
            /**
             * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.
             * @locus Anywhere but publish functions
             * @importFromPackage meteor
             */

            Meteor.user = () => Accounts.user(); // how long (in days) until a login token expires


            const DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // how long (in days) until reset password token expires

            const DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires

            const DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within
            // .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.
            // Tries to avoid abrupt disconnects from expiring tokens.

            const MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour
            // how often (in milliseconds) we check for expired tokens

            const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000;
            const CONNECTION_CLOSE_DELAY_MS = 10 * 1000;
            // A large number of expiration days (approximately 100 years worth) that is
            // used when creating unexpiring tokens.
            const LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/accounts-base/client_main.js");

  /* Exports */
  Package._define("accounts-base", _exports2, {
    Accounts: Accounts
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var WebApp;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "webapp": { "webapp_client.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                                    //
            // packages/webapp/webapp_client.js                                                                                   //
            //                                                                                                                    //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              WebApp: () => WebApp
            });
            const WebApp = {
              _isCssLoaded() {
                if (document.styleSheets.length === 0) {
                  return true;
                }

                return Array.prototype.find.call(document.styleSheets, sheet => {
                  if (sheet.cssText && !sheet.cssRules) {
                    // IE8
                    return !sheet.cssText.match(/meteor-css-not-found-error/);
                  }

                  return !Array.prototype.find.call(sheet.cssRules, rule => rule.selectorText === '.meteor-css-not-found-error');
                });
              }

            };
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/webapp/webapp_client.js");

  /* Exports */
  Package._define("webapp", _exports2, {
    WebApp: WebApp
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var DDP = Package['ddp-client'].DDP;

  /* Package-scope variables */
  var LivedataTest;

  /* Exports */
  Package._define("livedata", {
    DDP: DDP,
    LivedataTest: LivedataTest
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("hot-code-push");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var ObserveSequence = Package['observe-sequence'].ObserveSequence;
  var _ = Package.underscore._;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var HTML = Package.htmljs.HTML;
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;

  /* Package-scope variables */
  var Spacebars;

  (function () {

    ///////////////////////////////////////////////////////////////////////////////////
    //                                                                               //
    // packages/spacebars/spacebars-runtime.js                                       //
    //                                                                               //
    ///////////////////////////////////////////////////////////////////////////////////
    //
    Spacebars = {};

    var tripleEquals = function (a, b) {
      return a === b;
    };

    Spacebars.include = function (templateOrFunction, contentFunc, elseFunc) {
      if (!templateOrFunction) return null;

      if (typeof templateOrFunction !== 'function') {
        var template = templateOrFunction;
        if (!Blaze.isTemplate(template)) throw new Error("Expected template or null, found: " + template);
        var view = templateOrFunction.constructView(contentFunc, elseFunc);
        view.__startsNewLexicalScope = true;
        return view;
      }

      var templateVar = Blaze.ReactiveVar(null, tripleEquals);
      var view = Blaze.View('Spacebars.include', function () {
        var template = templateVar.get();
        if (template === null) return null;

        if (!Blaze.isTemplate(template)) throw new Error("Expected template or null, found: " + template);

        return template.constructView(contentFunc, elseFunc);
      });
      view.__templateVar = templateVar;
      view.onViewCreated(function () {
        this.autorun(function () {
          templateVar.set(templateOrFunction());
        });
      });
      view.__startsNewLexicalScope = true;

      return view;
    };

    // Executes `{{foo bar baz}}` when called on `(foo, bar, baz)`.
    // If `bar` and `baz` are functions, they are called before
    // `foo` is called on them.
    //
    // This is the shared part of Spacebars.mustache and
    // Spacebars.attrMustache, which differ in how they post-process the
    // result.
    Spacebars.mustacheImpl = function (value /*, args*/) {
      var args = arguments;
      // if we have any arguments (pos or kw), add an options argument
      // if there isn't one.
      if (args.length > 1) {
        var kw = args[args.length - 1];
        if (!(kw instanceof Spacebars.kw)) {
          kw = Spacebars.kw();
          // clone arguments into an actual array, then push
          // the empty kw object.
          args = Array.prototype.slice.call(arguments);
          args.push(kw);
        } else {
          // For each keyword arg, call it if it's a function
          var newHash = {};
          for (var k in kw.hash) {
            var v = kw.hash[k];
            newHash[k] = typeof v === 'function' ? v() : v;
          }
          args[args.length - 1] = Spacebars.kw(newHash);
        }
      }

      return Spacebars.call.apply(null, args);
    };

    Spacebars.mustache = function (value /*, args*/) {
      var result = Spacebars.mustacheImpl.apply(null, arguments);

      if (result instanceof Spacebars.SafeString) return HTML.Raw(result.toString());else
        // map `null`, `undefined`, and `false` to null, which is important
        // so that attributes with nully values are considered absent.
        // stringify anything else (e.g. strings, booleans, numbers including 0).
        return result == null || result === false ? null : String(result);
    };

    Spacebars.attrMustache = function (value /*, args*/) {
      var result = Spacebars.mustacheImpl.apply(null, arguments);

      if (result == null || result === '') {
        return null;
      } else if (typeof result === 'object') {
        return result;
      } else if (typeof result === 'string' && HTML.isValidAttributeName(result)) {
        var obj = {};
        obj[result] = '';
        return obj;
      } else {
        throw new Error("Expected valid attribute name, '', null, or object");
      }
    };

    Spacebars.dataMustache = function (value /*, args*/) {
      var result = Spacebars.mustacheImpl.apply(null, arguments);

      return result;
    };

    // Idempotently wrap in `HTML.Raw`.
    //
    // Called on the return value from `Spacebars.mustache` in case the
    // template uses triple-stache (`{{{foo bar baz}}}`).
    Spacebars.makeRaw = function (value) {
      if (value == null) // null or undefined
        return null;else if (value instanceof HTML.Raw) return value;else return HTML.Raw(value);
    };

    // If `value` is a function, evaluate its `args` (by calling them, if they
    // are functions), and then call it on them. Otherwise, return `value`.
    //
    // If `value` is not a function and is not null, then this method will assert
    // that there are no args. We check for null before asserting because a user
    // may write a template like {{user.fullNameWithPrefix 'Mr.'}}, where the
    // function will be null until data is ready.
    Spacebars.call = function (value /*, args*/) {
      if (typeof value === 'function') {
        // Evaluate arguments by calling them if they are functions.
        var newArgs = [];
        for (var i = 1; i < arguments.length; i++) {
          var arg = arguments[i];
          newArgs[i - 1] = typeof arg === 'function' ? arg() : arg;
        }

        return value.apply(null, newArgs);
      } else {
        if (value != null && arguments.length > 1) {
          throw new Error("Can't call non-function: " + value);
        }
        return value;
      }
    };

    // Call this as `Spacebars.kw({ ... })`.  The return value
    // is `instanceof Spacebars.kw`.
    Spacebars.kw = function (hash) {
      if (!(this instanceof Spacebars.kw))
        // called without new; call with new
        return new Spacebars.kw(hash);

      this.hash = hash || {};
    };

    // Call this as `Spacebars.SafeString("some HTML")`.  The return value
    // is `instanceof Spacebars.SafeString` (and `instanceof Handlebars.SafeString).
    Spacebars.SafeString = function (html) {
      if (!(this instanceof Spacebars.SafeString))
        // called without new; call with new
        return new Spacebars.SafeString(html);

      return new Handlebars.SafeString(html);
    };
    Spacebars.SafeString.prototype = Handlebars.SafeString.prototype;

    // `Spacebars.dot(foo, "bar", "baz")` performs a special kind
    // of `foo.bar.baz` that allows safe indexing of `null` and
    // indexing of functions (which calls the function).  If the
    // result is a function, it is always a bound function (e.g.
    // a wrapped version of `baz` that always uses `foo.bar` as
    // `this`).
    //
    // In `Spacebars.dot(foo, "bar")`, `foo` is assumed to be either
    // a non-function value or a "fully-bound" function wrapping a value,
    // where fully-bound means it takes no arguments and ignores `this`.
    //
    // `Spacebars.dot(foo, "bar")` performs the following steps:
    //
    // * If `foo` is falsy, return `foo`.
    //
    // * If `foo` is a function, call it (set `foo` to `foo()`).
    //
    // * If `foo` is falsy now, return `foo`.
    //
    // * Return `foo.bar`, binding it to `foo` if it's a function.
    Spacebars.dot = function (value, id1 /*, id2, ...*/) {
      if (arguments.length > 2) {
        // Note: doing this recursively is probably less efficient than
        // doing it in an iterative loop.
        var argsForRecurse = [];
        argsForRecurse.push(Spacebars.dot(value, id1));
        argsForRecurse.push.apply(argsForRecurse, Array.prototype.slice.call(arguments, 2));
        return Spacebars.dot.apply(null, argsForRecurse);
      }

      if (typeof value === 'function') value = value();

      if (!value) return value; // falsy, don't index, pass through

      var result = value[id1];
      if (typeof result !== 'function') return result;
      // `value[id1]` (or `value()[id1]`) is a function.
      // Bind it so that when called, `value` will be placed in `this`.
      return function () /*arguments*/{
        return result.apply(value, arguments);
      };
    };

    // Spacebars.With implements the conditional logic of rendering
    // the `{{else}}` block if the argument is falsy.  It combines
    // a Blaze.If with a Blaze.With (the latter only in the truthy
    // case, since the else block is evaluated without entering
    // a new data context).
    Spacebars.With = function (argFunc, contentFunc, elseFunc) {
      var argVar = new Blaze.ReactiveVar();
      var view = Blaze.View('Spacebars_with', function () {
        return Blaze.If(function () {
          return argVar.get();
        }, function () {
          return Blaze.With(function () {
            return argVar.get();
          }, contentFunc);
        }, elseFunc);
      });
      view.onViewCreated(function () {
        this.autorun(function () {
          argVar.set(argFunc());

          // This is a hack so that autoruns inside the body
          // of the #with get stopped sooner.  It reaches inside
          // our ReactiveVar to access its dep.

          Tracker.onInvalidate(function () {
            argVar.dep.changed();
          });

          // Take the case of `{{#with A}}{{B}}{{/with}}`.  The goal
          // is to not re-render `B` if `A` changes to become falsy
          // and `B` is simultaneously invalidated.
          //
          // A series of autoruns are involved:
          //
          // 1. This autorun (argument to Spacebars.With)
          // 2. Argument to Blaze.If
          // 3. Blaze.If view re-render
          // 4. Argument to Blaze.With
          // 5. The template tag `{{B}}`
          //
          // When (3) is invalidated, it immediately stops (4) and (5)
          // because of a Tracker.onInvalidate built into materializeView.
          // (When a View's render method is invalidated, it immediately
          // tears down all the subviews, via a Tracker.onInvalidate much
          // like this one.
          //
          // Suppose `A` changes to become falsy, and `B` changes at the
          // same time (i.e. without an intervening flush).
          // Without the code above, this happens:
          //
          // - (1) and (5) are invalidated.
          // - (1) runs, invalidating (2) and (4).
          // - (5) runs.
          // - (2) runs, invalidating (3), stopping (4) and (5).
          //
          // With the code above:
          //
          // - (1) and (5) are invalidated, invalidating (2) and (4).
          // - (1) runs.
          // - (2) runs, invalidating (3), stopping (4) and (5).
          //
          // If the re-run of (5) is originally enqueued before (1), all
          // bets are off, but typically that doesn't seem to be the
          // case.  Anyway, doing this is always better than not doing it,
          // because it might save a bunch of DOM from being updated
          // needlessly.
        });
      });

      return view;
    };

    // XXX COMPAT WITH 0.9.0
    Spacebars.TemplateWith = Blaze._TemplateWith;

    ///////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("spacebars", {
    Spacebars: Spacebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Exports */
  Package._define("templating-compiler");
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var _ = Package.underscore._;
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;
  var Spacebars = Package.spacebars.Spacebars;
  var HTML = Package.htmljs.HTML;

  /* Package-scope variables */
  var Template;

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/templating.js                                                                    //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //

    // Packages and apps add templates on to this object.

    /**
     * @summary The class for defining templates
     * @class
     * @instanceName Template.myTemplate
     */
    Template = Blaze.Template;

    var RESERVED_TEMPLATE_NAMES = "__proto__ name".split(" ");

    // Check for duplicate template names and illegal names that won't work.
    Template.__checkName = function (name) {
      // Some names can't be used for Templates. These include:
      //  - Properties Blaze sets on the Template object.
      //  - Properties that some browsers don't let the code to set.
      //    These are specified in RESERVED_TEMPLATE_NAMES.
      if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {
        if (Template[name] instanceof Template && name !== "body") throw new Error("There are multiple templates named '" + name + "'. Each template needs a unique name.");
        throw new Error("This template name is reserved: " + name);
      }
    };

    // XXX COMPAT WITH 0.8.3
    Template.__define__ = function (name, renderFunc) {
      Template.__checkName(name);
      Template[name] = new Template("Template." + name, renderFunc);
      // Exempt packages built pre-0.9.0 from warnings about using old
      // helper syntax, because we can.  It's not very useful to get a
      // warning about someone else's code (like a package on Atmosphere),
      // and this should at least put a bit of a dent in number of warnings
      // that come from packages that haven't been updated lately.
      Template[name]._NOWARN_OLDSTYLE_HELPERS = true;
    };

    // Define a template `Template.body` that renders its
    // `contentRenderFuncs`.  `<body>` tags (of which there may be
    // multiple) will have their contents added to it.

    /**
     * @summary The [template object](#templates_api) representing your `<body>`
     * tag.
     * @locus Client
     */
    Template.body = new Template('body', function () {
      var view = this;
      return _.map(Template.body.contentRenderFuncs, function (func) {
        return func.apply(view);
      });
    });
    Template.body.contentRenderFuncs = []; // array of Blaze.Views
    Template.body.view = null;

    Template.body.addContent = function (renderFunc) {
      Template.body.contentRenderFuncs.push(renderFunc);
    };

    // This function does not use `this` and so it may be called
    // as `Meteor.startup(Template.body.renderIntoDocument)`.
    Template.body.renderToDocument = function () {
      // Only do it once.
      if (Template.body.view) return;

      var view = Blaze.render(Template.body, document.body);
      Template.body.view = view;
    };

    // XXX COMPAT WITH 0.9.0
    UI.body = Template.body;

    // XXX COMPAT WITH 0.9.0
    // (<body> tags in packages built with 0.9.0)
    Template.__body__ = Template.body;
    Template.__body__.__contentParts = Template.body.contentViews;
    Template.__body__.__instantiate = Template.body.renderToDocument;

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/template.dynamic.js                                                              //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //

    Template.__checkName("__dynamic");
    Template["__dynamic"] = new Template("Template.__dynamic", function () {
      var view = this;
      return [Blaze.View("lookup:checkContext", function () {
        return Spacebars.mustache(view.lookup("checkContext"));
      }), "\n  ", Blaze.If(function () {
        return Spacebars.call(view.lookup("dataContextPresent"));
      }, function () {
        return ["\n    ", Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function () {
          return Blaze._InOuterTemplateScope(view, function () {
            return Spacebars.include(function () {
              return Spacebars.call(view.templateContentBlock);
            });
          });
        }), "\n  "];
      }, function () {
        return ["\n    \n    ", Blaze._TemplateWith(function () {
          return {
            template: Spacebars.call(view.lookup("template")),
            data: Spacebars.call(view.lookup(".."))
          };
        }, function () {
          return Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function () {
            return Blaze._InOuterTemplateScope(view, function () {
              return Spacebars.include(function () {
                return Spacebars.call(view.templateContentBlock);
              });
            });
          });
        }), "\n  "];
      })];
    });

    Template.__checkName("__dynamicWithDataContext");
    Template["__dynamicWithDataContext"] = new Template("Template.__dynamicWithDataContext", function () {
      var view = this;
      return Spacebars.With(function () {
        return Spacebars.dataMustache(view.lookup("chooseTemplate"), view.lookup("template"));
      }, function () {
        return ["\n    \n    ", Blaze._TemplateWith(function () {
          return Spacebars.call(Spacebars.dot(view.lookup(".."), "data"));
        }, function () {
          return Spacebars.include(view.lookupTemplate(".."), function () {
            return Blaze._InOuterTemplateScope(view, function () {
              return Spacebars.include(function () {
                return Spacebars.call(view.templateContentBlock);
              });
            });
          });
        }), "\n  "];
      });
    });

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                                              //
    // packages/templating-runtime/dynamic.js                                                                       //
    //                                                                                                              //
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    var Template = Blaze.Template;

    /**
     * @isTemplate true
     * @memberOf Template
     * @function dynamic
     * @summary Choose a template to include dynamically, by name.
     * @locus Templates
     * @param {String} template The name of the template to include.
     * @param {Object} [data] Optional. The data context in which to include the
     * template.
     */

    Template.__dynamicWithDataContext.helpers({
      chooseTemplate: function (name) {
        return Blaze._getTemplate(name, function () {
          return Template.instance();
        });
      }
    });

    Template.__dynamic.helpers({
      dataContextPresent: function () {
        return _.has(this, "data");
      },
      checkContext: function () {
        if (!_.has(this, "template")) {
          throw new Error("Must specify name in the 'template' argument " + "to {{> Template.dynamic}}.");
        }

        _.each(this, function (v, k) {
          if (k !== "template" && k !== "data") {
            throw new Error("Invalid argument to {{> Template.dynamic}}: " + k);
          }
        });
      }
    });

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("templating-runtime", {
    Template: Template
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Template = Package['templating-runtime'].Template;

  /* Exports */
  Package._define("templating", {
    Template: Template
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;

  /* Package-scope variables */
  var LaunchScreen;

  (function () {

    ////////////////////////////////////////////////////////////////////////////
    //                                                                        //
    // packages/launch-screen/mobile-launch-screen.js                         //
    //                                                                        //
    ////////////////////////////////////////////////////////////////////////////
    //
    // XXX This currently implements loading screens for mobile apps only,
    // but in the future can be expanded to all apps.

    var holdCount = 0;
    var alreadyHidden = false;

    LaunchScreen = {
      hold: function () {
        if (!Meteor.isCordova) {
          return {
            release: function () {/* noop */}
          };
        }

        if (alreadyHidden) {
          throw new Error("Can't show launch screen once it's hidden");
        }

        holdCount++;

        var released = false;
        var release = function () {
          if (!Meteor.isCordova) return;

          if (!released) {
            released = true;
            holdCount--;
            if (holdCount === 0 && typeof navigator !== 'undefined' && navigator.splashscreen) {
              alreadyHidden = true;
              navigator.splashscreen.hide();
            }
          }
        };

        // Returns a launch screen handle with a release method
        return {
          release: release
        };
      }
    };

    ////////////////////////////////////////////////////////////////////////////
  }).call(this);

  (function () {

    ////////////////////////////////////////////////////////////////////////////
    //                                                                        //
    // packages/launch-screen/default-behavior.js                             //
    //                                                                        //
    ////////////////////////////////////////////////////////////////////////////
    //
    // Hold launch screen on app load. This reflects the fact that Meteor
    // mobile apps that use this package always start with a launch screen
    // visible. (see XXX comment at the top of package.js for more
    // details)
    var handle = LaunchScreen.hold();

    var Template = Package.templating && Package.templating.Template;

    Meteor.startup(function () {
      if (!Template) {
        handle.release();
      } else if (Package['iron:router']) {
        // XXX Instead of doing this here, this code should be in
        // iron:router directly. Note that since we're in a
        // `Meteor.startup` block it's ok that we don't have a
        // weak dependency on iron:router in package.js.
        Package['iron:router'].Router.onAfterAction(function () {
          handle.release();
        });
      } else {
        Template.body.onRendered(function () {
          handle.release();
        });

        // In case `Template.body` never gets rendered (due to some bug),
        // hide the launch screen after 6 seconds. This matches the
        // observed timeout that Cordova apps on Android (but not iOS)
        // have on hiding the launch screen (even if you don't call
        // `navigator.splashscreen.hide()`)
        setTimeout(function () {
          handle.release();
        }, 6000);
      }
    });

    ////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("launch-screen", {
    LaunchScreen: LaunchScreen
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Blaze = Package.blaze.Blaze;
  var UI = Package.blaze.UI;
  var Handlebars = Package.blaze.Handlebars;

  /* Exports */
  Package._define("ui", {
    Blaze: Blaze,
    UI: UI,
    Handlebars: Handlebars
  });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

    /* Imports */
    var Meteor = Package.meteor.Meteor;
    var global = Package.meteor.global;
    var meteorEnv = Package.meteor.meteorEnv;
    var meteorInstall = Package.modules.meteorInstall;
    var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
    var Promise = Package.promise.Promise;

    /* Package-scope variables */
    var __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues;

    var _require2 = meteorInstall({ "node_modules": { "meteor": { "barbatus:typescript-runtime": { "typescript-helpers.js": function (_require, _exports, _module) {

                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //                                                                                                                     //
                        // packages/barbatus_typescript-runtime/typescript-helpers.js                                                          //
                        //                                                                                                                     //
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        //
                        let tslib;
                        _module.link("tslib", {
                            default(v) {
                                tslib = v;
                            }

                        }, 0);
                        __extends = tslib.__extends;
                        __assign = tslib.__assign;
                        __rest = tslib.__rest;
                        __decorate = tslib.__decorate;
                        __param = tslib.__param;
                        __metadata = tslib.__metadata;
                        __awaiter = tslib.__awaiter;
                        __generator = tslib.__generator;
                        __exportStar = tslib.__exportStar;
                        __values = tslib.__values;
                        __read = tslib.__read;
                        __spread = tslib.__spread;
                        __await = tslib.__await;
                        __asyncGenerator = tslib.__asyncGenerator;
                        __asyncDelegator = tslib.__asyncDelegator;
                        __asyncValues = tslib.__asyncValues;
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    }, "node_modules": { "tslib": { "package.json": function (_require3, _exports2, _module2) {

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                     //
                                // node_modules/meteor/barbatus_typescript-runtime/node_modules/tslib/package.json                                     //
                                //                                                                                                                     //
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                _module2.exports = {
                                    "name": "tslib",
                                    "version": "1.9.1",
                                    "main": "tslib.js"
                                };

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            }, "tslib.js": function (_require4, _exports3, _module3) {

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //                                                                                                                     //
                                // node_modules/meteor/barbatus_typescript-runtime/node_modules/tslib/tslib.js                                         //
                                //                                                                                                                     //
                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                //
                                /*! *****************************************************************************
                                Copyright (c) Microsoft Corporation. All rights reserved.
                                Licensed under the Apache License, Version 2.0 (the "License"); you may not use
                                this file except in compliance with the License. You may obtain a copy of the
                                License at http://www.apache.org/licenses/LICENSE-2.0
                                
                                THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
                                KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
                                WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
                                MERCHANTABLITY OR NON-INFRINGEMENT.
                                
                                See the Apache Version 2.0 License for specific language governing permissions
                                and limitations under the License.
                                ***************************************************************************** */
                                /* global global, define, System, Reflect, Promise */
                                var __extends;
                                var __assign;
                                var __rest;
                                var __decorate;
                                var __param;
                                var __metadata;
                                var __awaiter;
                                var __generator;
                                var __exportStar;
                                var __values;
                                var __read;
                                var __spread;
                                var __await;
                                var __asyncGenerator;
                                var __asyncDelegator;
                                var __asyncValues;
                                var __makeTemplateObject;
                                var __importStar;
                                var __importDefault;
                                (function (factory) {
                                    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
                                    if (typeof define === "function" && define.amd) {
                                        define("tslib", ["exports"], function (_exports4) {
                                            factory(createExporter(root, createExporter(_exports4)));
                                        });
                                    } else if (typeof _module3 === "object" && typeof _module3.exports === "object") {
                                        factory(createExporter(root, createExporter(_module3.exports)));
                                    } else {
                                        factory(createExporter(root));
                                    }
                                    function createExporter(_exports5, previous) {
                                        if (_exports5 !== root) {
                                            if (typeof Object.create === "function") {
                                                Object.defineProperty(_exports5, "__esModule", { value: true });
                                            } else {
                                                _exports5.__esModule = true;
                                            }
                                        }
                                        return function (id, v) {
                                            return _exports5[id] = previous ? previous(id, v) : v;
                                        };
                                    }
                                })(function (exporter) {
                                    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                                        d.__proto__ = b;
                                    } || function (d, b) {
                                        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
                                    };

                                    __extends = function (d, b) {
                                        extendStatics(d, b);
                                        function __() {
                                            this.constructor = d;
                                        }
                                        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                                    };

                                    __assign = Object.assign || function (t) {
                                        for (var s, i = 1, n = arguments.length; i < n; i++) {
                                            s = arguments[i];
                                            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                                        }
                                        return t;
                                    };

                                    __rest = function (s, e) {
                                        var t = {};
                                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
                                        if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
                                        return t;
                                    };

                                    __decorate = function (decorators, target, key, desc) {
                                        var c = arguments.length,
                                            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                                            d;
                                        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                                        return c > 3 && r && Object.defineProperty(target, key, r), r;
                                    };

                                    __param = function (paramIndex, decorator) {
                                        return function (target, key) {
                                            decorator(target, key, paramIndex);
                                        };
                                    };

                                    __metadata = function (metadataKey, metadataValue) {
                                        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
                                    };

                                    __awaiter = function (thisArg, _arguments, P, generator) {
                                        return new (P || (P = Promise))(function (resolve, reject) {
                                            function fulfilled(value) {
                                                try {
                                                    step(generator.next(value));
                                                } catch (e) {
                                                    reject(e);
                                                }
                                            }
                                            function rejected(value) {
                                                try {
                                                    step(generator["throw"](value));
                                                } catch (e) {
                                                    reject(e);
                                                }
                                            }
                                            function step(result) {
                                                result.done ? resolve(result.value) : new P(function (resolve) {
                                                    resolve(result.value);
                                                }).then(fulfilled, rejected);
                                            }
                                            step((generator = generator.apply(thisArg, _arguments || [])).next());
                                        });
                                    };

                                    __generator = function (thisArg, body) {
                                        var _ = { label: 0, sent: function () {
                                                if (t[0] & 1) throw t[1];return t[1];
                                            }, trys: [], ops: [] },
                                            f,
                                            y,
                                            t,
                                            g;
                                        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
                                            return this;
                                        }), g;
                                        function verb(n) {
                                            return function (v) {
                                                return step([n, v]);
                                            };
                                        }
                                        function step(op) {
                                            if (f) throw new TypeError("Generator is already executing.");
                                            while (_) try {
                                                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                                                if (y = 0, t) op = [0, t.value];
                                                switch (op[0]) {
                                                    case 0:case 1:
                                                        t = op;break;
                                                    case 4:
                                                        _.label++;return { value: op[1], done: false };
                                                    case 5:
                                                        _.label++;y = op[1];op = [0];continue;
                                                    case 7:
                                                        op = _.ops.pop();_.trys.pop();continue;
                                                    default:
                                                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                                            _ = 0;continue;
                                                        }
                                                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                                                            _.label = op[1];break;
                                                        }
                                                        if (op[0] === 6 && _.label < t[1]) {
                                                            _.label = t[1];t = op;break;
                                                        }
                                                        if (t && _.label < t[2]) {
                                                            _.label = t[2];_.ops.push(op);break;
                                                        }
                                                        if (t[2]) _.ops.pop();
                                                        _.trys.pop();continue;
                                                }
                                                op = body.call(thisArg, _);
                                            } catch (e) {
                                                op = [6, e];y = 0;
                                            } finally {
                                                f = t = 0;
                                            }
                                            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
                                        }
                                    };

                                    __exportStar = function (m, _exports6) {
                                        for (var p in m) if (!_exports6.hasOwnProperty(p)) _exports6[p] = m[p];
                                    };

                                    __values = function (o) {
                                        var m = typeof Symbol === "function" && o[Symbol.iterator],
                                            i = 0;
                                        if (m) return m.call(o);
                                        return {
                                            next: function () {
                                                if (o && i >= o.length) o = void 0;
                                                return { value: o && o[i++], done: !o };
                                            }
                                        };
                                    };

                                    __read = function (o, n) {
                                        var m = typeof Symbol === "function" && o[Symbol.iterator];
                                        if (!m) return o;
                                        var i = m.call(o),
                                            r,
                                            ar = [],
                                            e;
                                        try {
                                            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                                        } catch (error) {
                                            e = { error: error };
                                        } finally {
                                            try {
                                                if (r && !r.done && (m = i["return"])) m.call(i);
                                            } finally {
                                                if (e) throw e.error;
                                            }
                                        }
                                        return ar;
                                    };

                                    __spread = function () {
                                        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
                                        return ar;
                                    };

                                    __await = function (v) {
                                        return this instanceof __await ? (this.v = v, this) : new __await(v);
                                    };

                                    __asyncGenerator = function (thisArg, _arguments, generator) {
                                        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                                        var g = generator.apply(thisArg, _arguments || []),
                                            i,
                                            q = [];
                                        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
                                            return this;
                                        }, i;
                                        function verb(n) {
                                            if (g[n]) i[n] = function (v) {
                                                return new Promise(function (a, b) {
                                                    q.push([n, v, a, b]) > 1 || resume(n, v);
                                                });
                                            };
                                        }
                                        function resume(n, v) {
                                            try {
                                                step(g[n](v));
                                            } catch (e) {
                                                settle(q[0][3], e);
                                            }
                                        }
                                        function step(r) {
                                            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
                                        }
                                        function fulfill(value) {
                                            resume("next", value);
                                        }
                                        function reject(value) {
                                            resume("throw", value);
                                        }
                                        function settle(f, v) {
                                            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
                                        }
                                    };

                                    __asyncDelegator = function (o) {
                                        var i, p;
                                        return i = {}, verb("next"), verb("throw", function (e) {
                                            throw e;
                                        }), verb("return"), i[Symbol.iterator] = function () {
                                            return this;
                                        }, i;
                                        function verb(n, f) {
                                            i[n] = o[n] ? function (v) {
                                                return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
                                            } : f;
                                        }
                                    };

                                    __asyncValues = function (o) {
                                        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
                                        var m = o[Symbol.asyncIterator],
                                            i;
                                        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
                                            return this;
                                        }, i);
                                        function verb(n) {
                                            i[n] = o[n] && function (v) {
                                                return new Promise(function (resolve, reject) {
                                                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                                                });
                                            };
                                        }
                                        function settle(resolve, reject, d, v) {
                                            Promise.resolve(v).then(function (v) {
                                                resolve({ value: v, done: d });
                                            }, reject);
                                        }
                                    };

                                    __makeTemplateObject = function (cooked, raw) {
                                        if (Object.defineProperty) {
                                            Object.defineProperty(cooked, "raw", { value: raw });
                                        } else {
                                            cooked.raw = raw;
                                        }
                                        return cooked;
                                    };

                                    __importStar = function (mod) {
                                        if (mod && mod.__esModule) return mod;
                                        var result = {};
                                        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                                        result["default"] = mod;
                                        return result;
                                    };

                                    __importDefault = function (mod) {
                                        return mod && mod.__esModule ? mod : { "default": mod };
                                    };

                                    exporter("__extends", __extends);
                                    exporter("__assign", __assign);
                                    exporter("__rest", __rest);
                                    exporter("__decorate", __decorate);
                                    exporter("__param", __param);
                                    exporter("__metadata", __metadata);
                                    exporter("__awaiter", __awaiter);
                                    exporter("__generator", __generator);
                                    exporter("__exportStar", __exportStar);
                                    exporter("__values", __values);
                                    exporter("__read", __read);
                                    exporter("__spread", __spread);
                                    exporter("__await", __await);
                                    exporter("__asyncGenerator", __asyncGenerator);
                                    exporter("__asyncDelegator", __asyncDelegator);
                                    exporter("__asyncValues", __asyncValues);
                                    exporter("__makeTemplateObject", __makeTemplateObject);
                                    exporter("__importStar", __importStar);
                                    exporter("__importDefault", __importDefault);
                                });

                                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            } } } } } } }, {
        "extensions": [".js", ".json"]
    });

    _require2("/node_modules/meteor/barbatus:typescript-runtime/typescript-helpers.js");

    /* Exports */
    Package._define("barbatus:typescript-runtime", {
        __extends: __extends,
        __assign: __assign,
        __rest: __rest,
        __decorate: __decorate,
        __param: __param,
        __metadata: __metadata,
        __awaiter: __awaiter,
        __generator: __generator,
        __exportStar: __exportStar,
        __values: __values,
        __read: __read,
        __spread: __spread,
        __await: __await,
        __asyncGenerator: __asyncGenerator,
        __asyncDelegator: __asyncDelegator,
        __asyncValues: __asyncValues
    });
})();//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Tracker = Package.tracker.Tracker;
  var Deps = Package.tracker.Deps;
  var Retry = Package.retry.Retry;
  var DDP = Package['ddp-client'].DDP;
  var Mongo = Package.mongo.Mongo;
  var meteorInstall = Package.modules.meteorInstall;
  var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
  var Promise = Package.promise.Promise;

  /* Package-scope variables */
  var Autoupdate;

  var _require2 = meteorInstall({ "node_modules": { "meteor": { "autoupdate": { "autoupdate_client.js": function (_require, _exports, _module) {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //                                                                                                            //
            // packages/autoupdate/autoupdate_client.js                                                                   //
            //                                                                                                            //
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //
            _module.export({
              Autoupdate: () => Autoupdate
            });
            // Subscribe to the `meteor_autoupdate_clientVersions` collection,
            // which contains the set of acceptable client versions.
            //
            // A "hard code push" occurs when the running client version is not in
            // the set of acceptable client versions (or the server updates the
            // collection, there is a published client version marked `current` and
            // the running client version is no longer in the set).
            //
            // When the `reload` package is loaded, a hard code push causes
            // the browser to reload, so that it will load the latest client
            // version from the server.
            //
            // A "soft code push" represents the situation when the running client
            // version is in the set of acceptable versions, but there is a newer
            // version available on the server.
            //
            // `Autoupdate.newClientAvailable` is a reactive data source which
            // becomes `true` if there is a new version of the client is available on
            // the server.
            //
            // This package doesn't implement a soft code reload process itself,
            // but `newClientAvailable` could be used for example to display a
            // "click to reload" link to the user.
            // The client version of the client code currently running in the
            // browser.
            const clientArch = Meteor.isCordova ? "web.cordova" : Meteor.isModern ? "web.browser" : "web.browser.legacy";
            const autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {
              version: "unknown",
              versionRefreshable: "unknown",
              versionNonRefreshable: "unknown",
              assets: []
            };
            const Autoupdate = {};
            // The collection of acceptable client versions.
            const ClientVersions = Autoupdate._ClientVersions = // Used by a self-test.
            new Mongo.Collection("meteor_autoupdate_clientVersions");

            Autoupdate.newClientAvailable = function () {
              return !!(ClientVersions.findOne({
                _id: clientArch,
                versionNonRefreshable: {
                  $ne: autoupdateVersions.versionNonRefreshable
                }
              }) || ClientVersions.findOne({
                _id: clientArch,
                versionRefreshable: {
                  $ne: autoupdateVersions.versionRefreshable
                }
              }));
            }; // Set to true if the link.onload callback ever fires for any <link> node.


            let knownToSupportCssOnLoad = false;
            const retry = new Retry({
              // Unlike the stream reconnect use of Retry, which we want to be instant
              // in normal operation, this is a wacky failure. We don't want to retry
              // right away, we can start slowly.
              //
              // A better way than timeconstants here might be to use the knowledge
              // of when we reconnect to help trigger these retries. Typically, the
              // server fixing code will result in a restart and reconnect, but
              // potentially the subscription could have a transient error.
              minCount: 0,
              // don't do any immediate retries
              baseTimeout: 30 * 1000 // start with 30s

            });
            let failures = 0;

            Autoupdate._retrySubscription = () => {
              Meteor.subscribe("meteor_autoupdate_clientVersions", {
                onError(error) {
                  Meteor._debug("autoupdate subscription failed", error);

                  failures++;
                  retry.retryLater(failures, function () {
                    // Just retry making the subscription, don't reload the whole
                    // page. While reloading would catch more cases (for example,
                    // the server went back a version and is now doing old-style hot
                    // code push), it would also be more prone to reload loops,
                    // which look really bad to the user. Just retrying the
                    // subscription over DDP means it is at least possible to fix by
                    // updating the server.
                    Autoupdate._retrySubscription();
                  });
                },

                onReady() {
                  // Call checkNewVersionDocument with a slight delay, so that the
                  // const handle declaration is guaranteed to be initialized, even if
                  // the added or changed callbacks are called synchronously.
                  const resolved = Promise.resolve();

                  function check(doc) {
                    resolved.then(() => checkNewVersionDocument(doc));
                  }

                  const handle = ClientVersions.find().observe({
                    added: check,
                    changed: check
                  });

                  function checkNewVersionDocument(doc) {
                    if (doc._id !== clientArch) {
                      return;
                    }

                    if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {
                      // Non-refreshable assets have changed, so we have to reload the
                      // whole page rather than just replacing <link> tags.
                      if (handle) handle.stop();

                      if (Package.reload) {
                        // The reload package should be provided by ddp-client, which
                        // is provided by the ddp package that autoupdate depends on.
                        Package.reload.Reload._reload();
                      }

                      return;
                    }

                    if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {
                      autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:
                      // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710

                      var newCss = doc.assets || [];
                      var oldLinks = [];
                      Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {
                        if (link.className === '__meteor-css__') {
                          oldLinks.push(link);
                        }
                      });

                      function waitUntilCssLoads(link, callback) {
                        var called;

                        link.onload = function () {
                          knownToSupportCssOnLoad = true;

                          if (!called) {
                            called = true;
                            callback();
                          }
                        };

                        if (!knownToSupportCssOnLoad) {
                          var id = Meteor.setInterval(function () {
                            if (link.sheet) {
                              if (!called) {
                                called = true;
                                callback();
                              }

                              Meteor.clearInterval(id);
                            }
                          }, 50);
                        }
                      }

                      let newLinksLeftToLoad = newCss.length;

                      function removeOldLinks() {
                        if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {
                          oldLinks.splice(0).forEach(link => {
                            link.parentNode.removeChild(link);
                          });
                        }
                      }

                      if (newCss.length > 0) {
                        newCss.forEach(css => {
                          const newLink = document.createElement("link");
                          newLink.setAttribute("rel", "stylesheet");
                          newLink.setAttribute("type", "text/css");
                          newLink.setAttribute("class", "__meteor-css__");
                          newLink.setAttribute("href", css.url);
                          waitUntilCssLoads(newLink, function () {
                            Meteor.setTimeout(removeOldLinks, 200);
                          });
                          const head = document.getElementsByTagName("head").item(0);
                          head.appendChild(newLink);
                        });
                      } else {
                        removeOldLinks();
                      }
                    }
                  }
                }

              });
            };

            Autoupdate._retrySubscription();
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          } } } } }, {
    "extensions": [".js", ".json"]
  });

  var _exports2 = _require2("/node_modules/meteor/autoupdate/autoupdate_client.js");

  /* Exports */
  Package._define("autoupdate", _exports2, {
    Autoupdate: Autoupdate
  });
})();/* Imports for global scope */

Mongo = Package.mongo.Mongo;
ReactiveVar = Package['reactive-var'].ReactiveVar;
Tracker = Package.tracker.Tracker;
Deps = Package.tracker.Deps;
Accounts = Package['accounts-base'].Accounts;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
WebApp = Package.webapp.WebApp;
DDP = Package['ddp-client'].DDP;
LaunchScreen = Package['launch-screen'].LaunchScreen;
Blaze = Package.ui.Blaze;
UI = Package.ui.UI;
Handlebars = Package.ui.Handlebars;
Spacebars = Package.spacebars.Spacebars;
Template = Package['templating-runtime'].Template;
meteorInstall = Package.modules.meteorInstall;
meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
Promise = Package.promise.Promise;
__extends = Package['barbatus:typescript-runtime'].__extends;
__assign = Package['barbatus:typescript-runtime'].__assign;
__rest = Package['barbatus:typescript-runtime'].__rest;
__decorate = Package['barbatus:typescript-runtime'].__decorate;
__param = Package['barbatus:typescript-runtime'].__param;
__metadata = Package['barbatus:typescript-runtime'].__metadata;
__awaiter = Package['barbatus:typescript-runtime'].__awaiter;
__generator = Package['barbatus:typescript-runtime'].__generator;
__exportStar = Package['barbatus:typescript-runtime'].__exportStar;
__values = Package['barbatus:typescript-runtime'].__values;
__read = Package['barbatus:typescript-runtime'].__read;
__spread = Package['barbatus:typescript-runtime'].__spread;
__await = Package['barbatus:typescript-runtime'].__await;
__asyncGenerator = Package['barbatus:typescript-runtime'].__asyncGenerator;
__asyncDelegator = Package['barbatus:typescript-runtime'].__asyncDelegator;
__asyncValues = Package['barbatus:typescript-runtime'].__asyncValues;
Autoupdate = Package.autoupdate.Autoupdate;
Reload = Package.reload.Reload;
HTML = Package.htmljs.HTML;//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var global = Package.meteor.global;
  var meteorEnv = Package.meteor.meteorEnv;
  var Accounts = Package['accounts-base'].Accounts;
  var Mongo = Package.mongo.Mongo;

  /* Package-scope variables */
  var ServiceConfiguration;

  (function () {

    ////////////////////////////////////////////////////////////////////////////////////////
    //                                                                                    //
    // packages/service-configuration/service_configuration_common.js                     //
    //                                                                                    //
    ////////////////////////////////////////////////////////////////////////////////////////
    //
    if (typeof ServiceConfiguration === 'undefined') {
      ServiceConfiguration = {};
    }

    // Table containing documents with configuration options for each
    // login service
    ServiceConfiguration.configurations = new Mongo.Collection("meteor_accounts_loginServiceConfiguration", {
      _preventAutopublish: true,
      connection: Meteor.isClient ? Accounts.connection : Meteor.connection
    });
    // Leave this collection open in insecure mode. In theory, someone could
    // hijack your oauth connect requests to a different endpoint or appId,
    // but you did ask for 'insecure'. The advantage is that it is much
    // easier to write a configuration wizard that works only in insecure
    // mode.


    // Thrown when trying to use a login service which is not configured
    ServiceConfiguration.ConfigError = function (serviceName) {
      if (Meteor.isClient && !Accounts.loginServicesConfigured()) {
        this.message = "Login service configuration not yet loaded";
      } else if (serviceName) {
        this.message = "Service " + serviceName + " not configured";
      } else {
        this.message = "Service not configured";
      }
    };
    ServiceConfiguration.ConfigError.prototype = new Error();
    ServiceConfiguration.ConfigError.prototype.name = 'ServiceConfiguration.ConfigError';

    ////////////////////////////////////////////////////////////////////////////////////////
  }).call(this);

  /* Exports */
  Package._define("service-configuration", {
    ServiceConfiguration: ServiceConfiguration
  });
})();// Disable hot-code-push
if (Package.reload) {
  Package.reload.Reload._onMigrate(function () {
    return [false];
  });
}